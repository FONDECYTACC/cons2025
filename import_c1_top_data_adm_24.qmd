---
title: "SENDAs Agreement 1 Update 2010-2022"
description: |
  Load administrative data from SENDAs patient, compare information with previous databases and explore new data.
date: last-modified
author: "Andrés González Santa Cruz"
bibliography: [_lit/refs.bib]
csl: "_lit/american-medical-association.csl" # (Opcional: estilo de citas, p.ej., APA)
toc: true
toc-depth: 5
toc-location: left
toc-float: true
format: 
  html:
    css: [_lib/styles.scss]
    code-fold: true
    embed-resources: true
    fig-cap-location: top  
editor: source
---

```{=html}
<style type="text/css">

.showopt {

background-color: #004c93; color: #FFFFFF; width: 100px; height: 20px; text-align: center; vertical-align: middle !important; float: right; font-family: sans-serif; border-radius: 8px;

}

.showopt:hover {
background-color: #dfe4f2;
color: #004c93;

}

pre.plot {
background-color: white !important;
}

.tablelines table, .tablelines td, .tablelines th {
border: 1px solid black;
}

.centrado {
text-align: center;
}

.table.center {
margin-left:auto;
margin-right:auto;
}

/* https://vivekjaiskumar.medium.com/css-is-and-not-selector-17c942ec83f :is()*/

/* Applies to outputs that are not code other than R*/

pre {
overflow-x: auto !important;
}

pre code {
word-wrap: normal !important;
white-space: pre !important;
}

/*
pre:not(.sourceCode) {
white-space: nowrap !important;
}
*/
.sourceCode { /* Important gives precedence */
font-size: 10px !important;
line-height: 50% !important;
}
body{ /* Normal */
text-align: justify;
}
.superbigimage{
overflow-y:scroll;
height:350px;
white-space: nowrap;
overflow-x: auto;
width:100%;
}
.superbigimage img{
overflow-y: scroll;
overflow-x: hidden;
}
.message { color:#446C6E; font-family: monospace;font-size: 10px; line-height: 110%; font-weight: bold;}
div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 5px; text-align: justify;}
div.red { background-color:#e6bab1; border-radius: 5px; padding: 5px; text-align: justify;}
.pandoc-table { /* Should add !important; but it seems no necessary */
margin-left:auto; /* To center */
margin-right:auto;
border-collapse: collapse;
table-layout: auto;
font-size: 11px;
overflow-y: auto;
max-height:450px !important;
white-space: nowrap;
overflow-x: auto;
width:450px;
}
.pandoc-table th {/* header */
text-align: center !important;
font-size: 10px;
padding: 0px;
}
.pandoc-table td {
text-align: left !important;
font-size: 9px;
padding: 0px;
}
.pandoc-table caption {
text-align: left !important;
font-size: 11px !important;
}

.center-table {
text-align: left !important;
font-size: 9px;
overflow-y:scroll;
height:450px;
overflow-x: scroll;
}

.controlly{
overflow-y:scroll;
height:350px;
overflow-x: scroll;

}

/*2025-03-07*/
.callout-warning,
.callout-error,
.callout-message {
  font-size: 0.7rem !important;  /* Adjust this value as needed */
}


/*2025-03-07*/
.callout-warning,
.callout-error,
.callout-message {
  font-size: 0.5rem !important;  /* Adjust this value as needed */
}

.alert, .message {
    font-size: 0.5em !important;
}

.alert.alert-warning,
.alert.alert-danger,
.message {
    font-size: 0.5em !important;
}
</style>
```
```{css, echo=F}
h1 {
    color: var(--heading-color);
    font-size: 2rem;
    margin-bottom: 1vh;
}

p {
  font-size: 1.1rem;
  line-height: 1.6rem;
}

a {
  color: var(--primary-color);
  text-decoration: none;
  border-bottom: 3px solid transparent;
  font-weight: bold;
  &:hover, &:focus {
      border-bottom: 3px solid currentColor;
  }
}

section {
  margin: 0 auto;
}

.post-meta {
  font-size: 1rem;
  font-style: italic;
  display: block;
  margin-bottom: 4vh;
  color: var(--secondary-color);
}

nav {
  display: flex;
  justify-content: flex-end;
  padding: 20px 0;
}

/*slider switch css */
.theme-switch-wrapper {
  display: flex;
  align-items: center;
  
  em {
    margin-left: 10px;
    font-size: 1rem;
  }
}
.theme-switch {
  display: inline-block;
  height: 34px;
  position: relative;
  width: 60px;
}

.theme-switch input {
  display:none;
}

.slider {
  background-color: #ccc;
  bottom: 0;
  cursor: pointer;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  transition: .4s;
}

.slider:before {
  background-color: #fff;
  bottom: 4px;
  content: "";
  height: 26px;
  left: 4px;
  position: absolute;
  transition: .4s;
  width: 26px;
}

input:checked + .slider {
  background-color: #66bb6a;
}

input:checked + .slider:before {
  transform: translateX(26px);
}

.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

```

```{=html}

<script>
function myFunction1() {
var x = document.getElementById("myDIV");
if (x.style.display === "none") {
x.style.display = "block";
} else {
x.style.display = "none";
}
}
</script>

<script>
function myFunction2() {
var x = document.getElementById("myDIV2");
if (x.style.display === "none") {
x.style.display = "block";
} else {
x.style.display = "none";
}
}
</script>
```

<style>
.scrollable-content {
  max-height: 350px;
  overflow-y: auto;
}
pre.scrollable-code {
  max-height: 350px;
  overflow-y: auto;
}

</style>

<br>

# Data Loading and Exploration

## Loading Packages and uniting databases

Proceed to load the necessary packages.

<div class="scrollable-content">
```{r packages-and-fuctions}
#| message: false
#| include: true
#| warning: false
#| results: "hold"

unlink("*_files", recursive=T)

#clean enviroment
rm(list = ls()); gc()

#https://github.com/rstudio/renv/issues/544
#renv falls back to copying rather than symlinking, which is evidently very slow in this configuration.
renv::settings$use.cache(FALSE)

#check if rstools is installed
try(installr::install.Rtools(check_r_update=F))

#change repository to CL
local({
  r <- getOption("repos")
  r["CRAN"] <- "https://cran.dcc.uchile.cl/"
  options(repos=r)
})
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#PACKAGES#######################################################################
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

unlink("*_cache", recursive=T)

cat("RUst version")
system("rustc --version")#[1] 127

#Package to bring packages in development
if(!require(devtools)){install.packages("devtools")}

#Package to install packages
if (!require("pacman")) install.packages("pacman")
#Package administration
if(!require(renv)){install.packages("renv")}
#To manipulate data 
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(janitor)){install.packages("janitor")}
#For contingency tables
if(!require(kableExtra)){install.packages("kableExtra")}
#For connections with python
if(!require(reticulate)){install.packages("reticulate")}
#To manipulate big data
if(!require(polars)){install.packages("polars", repos = "https://community.r-multiverse.org")}
#code completion
#To bring big databases
if(!require(nanoparquet)){install.packages("nanoparquet")}

if(!require(tidytable)){install.packages("tidytable")}


# pacman::p_load(
#   altair, arrow, biostat3, car, caret, chilemapas, choroplethr, choroplethrAdmin1,
#   choroplethrMaps, codebook, compareGroups, DiagrammeR, DiagrammeRsvg, DT, epiR, epitools,
#   factoextra, FactoMineR, finalfit, flexsurv, fmsb, ggfortify, ggiraph, ggiraphExtra,
#   ggpubr, ggrepel, glca, gridExtra, here, Hmisc, htmlwidgets, installr, janitor, kableExtra,
#   lsmeans, magick, matrixStats, Metrics, muhaz, naniar, neuralnet, NeuralNetTools, pagedown,
#   panelr, patchwork, pdp, plotly, plyr, plotly, posterdown, polycor, pROC, psych, radiant,
#   rateratio.test, reshape, reshape2, reticulate, rio, ROCit, rnaturalearth, rsvg, sf, sjPlot,
#   sqldf, Statamarkdown, survminer, survMisc, tableone, tidylog, tidyverse, treemapify, VIM,
#   webshot, xaringanthemer, zoo, install=T
# )


#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#FUNCTIONS######################################################################
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
  if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
    if(options()$OutDec=="."){
      options(OutDec = dec)
      write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
      options(OutDec = ".")
      return(x)
    } else {
      options(OutDec = ",")
      write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
      options(OutDec = ",")
      return(x)    
    }
  } else {
    if(options()$OutDec=="."){
      options(OutDec = dec)
      write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
      options(OutDec = ".")
      return(x)
    } else {
      options(OutDec = ",")
      write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
      options(OutDec = ",")
      return(x)       
    }
  }
}  

#WINDOWS do not restrict memory size
if(.Platform$OS.type == "windows") withAutoprint({
  memory.size()
  memory.size(TRUE)
  memory.limit()
})
memory.limit(size=56000)


#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#NAs are replaced with "" in knitr kable
options(knitr.kable.NA = '')

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){

  # select the correct markup
  # one * for italics, two ** for bold
  map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
  markup <- map[value]  

  for (r in rows){
    for(c in cols){

      # Make sure values are not factors
      df[[c]] <- as.character( df[[c]])

      # Update formatting
      df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
    }
  }

  return(df)
}
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
   error = function(x, options) {
     paste('\n\n<div class="alert alert-danger" style="font-size: 0.5rem !important;">',
           gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
           '</div>', sep = '\n')
   },
   warning = function(x, options) {
     paste('\n\n<div class="alert alert-warning" style="font-size: 0.5rem !important;">',
           gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
           '</div>', sep = '\n')
   },
   message = function(x, options) {
     paste('<div class="message" style="font-size: 0.5rem !important;">',
           gsub('##', '\n', x),
           '</div>', sep = '\n')
   }
)

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#CONFIG #######################################################################
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

options(scipen=2) #display numbers rather scientific number

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#ENCODING#######################################################################
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

conv_chars <- data.frame(
    ANSI = c("Á", "á", "É", "é", "Í", "í", "Ó", "ó", "Ú", "ú", "Ñ", "ñ", "¿", "ó"),
    UTF_8 = c("Ã", "Ã¡", "Ã‰", "Ã©", "Ã", "Ã­", "Ã“", "Ã³", "Ãš", "Ãº", "Ã‘", "Ã±", "Â¿", "Ã²"),
    JAVASCRIPT = c("u00c1", "u00e1", "u00c9", "u00e9", "u00cd", "u00ed", "u00d3", "u00f3", "u00da", "u00fa", "u00d1", "u00f1", "u00bf", "0xF2"),
    HTML = c("&#193;", "&#225;", "&#201;", "&#233;", "&#205;", "&#237;", "&#211;", "&#243;", "&#218;", "&#250;", "&#209;", "&#241;", "&#191;", "")
)

convert_chars <- function(x) {
    x <- gsub("ÃƒÂ³", "ó", x)  # ó
    x <- gsub("ÃƒÂ¡", "á", x)  # á
    x <- gsub("ÃƒÂ©", "é", x)  # é
    x <- gsub("ÃƒÂº", "ú", x)  # ú
    x <- gsub("ÃƒÂ±", "ñ", x)  # ñ
    x <- gsub("Ãƒâ€˜", "Ñ", x) # Ñ (mayúscula)
    x <- gsub("ÃƒÂ", "Á", x)   # Á
    x <- gsub("Ã‚Âº", "º", x)  # º
    x <- gsub("Ã‚Â°", "°", x)  # °
    x <- gsub("Ã‚Âª", "ª", x)  # ª
    x <- gsub("Ã‚Â¡", "¡", x)  # ¡
    x <- gsub("Ã‚Â¿", "¿", x)  # ¿
    x <- gsub("ÃƒÂ­", "í", x)  # í
    x <- gsub("Ãƒâ€œ", "Ó", x)  # Ó
    x <- gsub("Ãƒâ€š", "Ê", x)  # Ê
    x <- gsub("Ãƒâ€", "É", x)  # É
    x <- gsub("ÃƒÂ¼", "ü", x)  # ü
    x <- gsub("ÃƒÂ¯", "ï", x)  # ï
    x <- gsub("ÃƒÂ¶", "ö", x)  # ö
    x <- gsub("Ã‚Â«", "«", x)  # «
    x <- gsub("Ã‚Â»", "»", x)  # »
    x <- gsub("Ãƒâ€¡", "Ç", x)  # Ç
    x <- gsub("ÃƒÂ§", "ç", x)  # ç
    x <- gsub("Ã‚Â", "", x)    # Otros casos residuales
    x <- gsub("Ãƒ", "", x)     # Otros casos residuales
    return(x)
}
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

sum_dates <- function(x){
  
  cbind.data.frame(
min= as.Date(min(unclass(as.Date(x)), na.rm=T), origin = "1970-01-01"),
p001= as.Date(quantile(unclass(as.Date(x)), .001, na.rm=T), origin = "1970-01-01"),
p005= as.Date(quantile(unclass(as.Date(x)), .005, na.rm=T), origin = "1970-01-01"),
p025= as.Date(quantile(unclass(as.Date(x)), .025, na.rm=T), origin = "1970-01-01"),
p25= as.Date(quantile(unclass(as.Date(x)), .25, na.rm=T), origin = "1970-01-01"),
p50= as.Date(quantile(unclass(as.Date(x)), .5, na.rm=T), origin = "1970-01-01"),
p75= as.Date(quantile(unclass(as.Date(x)), .75, na.rm=T), origin = "1970-01-01"),
p975= as.Date(quantile(unclass(as.Date(x)), .975, na.rm=T), origin = "1970-01-01"),
p995= as.Date(quantile(unclass(as.Date(x)), .995, na.rm=T), origin = "1970-01-01"),
p999= as.Date(quantile(unclass(as.Date(x)), .999, na.rm=T), origin = "1970-01-01"),
max= as.Date(max(unclass(as.Date(x)), na.rm=T), origin = "1970-01-01")
  )
}
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

# Define the function adapted for Polars
sum_dates_polars <- function(df, date_col) {
  # Create the list of quantiles
  quantiles <- c(0.001, 0.005, 0.025, 0.25, 0.5, 0.75, 0.975, 0.995, 0.999)
  # Create expressions to calculate min and max
  expr_list <- list(
    pl$col(date_col)$min()$alias("min"),
    pl$col(date_col)$max()$alias("max")
  )
  # Add expressions for quantiles
  for (q in quantiles) {
    expr_list <- append(expr_list, pl$col(date_col)$quantile(q)$alias(paste0("p", sub("\\.", "", as.character(q)))))
  }
  # Apply the expressions and return a DataFrame with the results
  df$select(expr_list)
}
```
</div>

<br>

### C1 Oct 2023

Load the C1 data 2023. We defined the directory `r paste0(gsub("cons", "", paste0(getwd(),"/cons")), "data/20231018_original_data/")`; given that there are many misfits in the Latin or UTF-8 codifications in databases, we also define what is a missing value (i.e., "", "NA, "null"), we defined a flexible approach to tell R how to define what value has a database (from 1e5th row to infinite), position the HASH KEY (individual masked ID) and TABLE (year of the database) columns in the first places. If a yearly database consists in more than one database and contains the characters "dup1", then the databases will be formatted as objects that started with the  "SISTRAT23dup1_" characters; if contains the characters "dup2", then the characters will be "SISTRAT23dup2_"; the rest will start with the following characters: "SISTRAT23_". From the folder of the databases, we excluded the files that contained the characters "TOP" and "erronea". Then we grouped the databases from 2010 to 2013, 2019 and 2020 (single databases by year) into `C1_dup1`, then the first databases (dup1) of yearly databases from 2014 to 2019, 2021 and 2022 were grouped into `C1_dup1`, and the second databases of the same years were grouped into `C1_dup2`.

<div class="center-table">
```{r import-c1}
#| echo: true
#| error: true
#| warning: false
#| message: true
#| results: "hold"

invisible("Para homologar nombres")
iconv_xlsx<-rio::import("_input/iconv.xlsx")

replacements <- setNames(as.character(iconv_xlsx[, 2]), iconv_xlsx[, 1])


# Define the directories
dir_c1_oct <- paste0(gsub("cons", "", 
                          paste0(getwd(),"/cons")
                          ), "data/20231018_original_data/")

#matches a string that contains _enc.
SISTRAT23_c14<-list.files(path=toString(dir_c1_oct), pattern="_enc")
#discard other agreements
SISTRAT23_c14 <- SISTRAT23_c14[!startsWith(SISTRAT23_c14, "c")]

#Import datasets from Sept 27, 2022
for (i in 1:length(SISTRAT23_c14)) {
  #Define cada unidad con el nombre de la lista por posición
  x<-SISTRAT23_c14[i]
  #toma los primeros 4 caracteres de una cadena x y luego busca un número que aparezca después de "_dup". Si encuentra ese número, lo añade a la cadena. Si no lo encuentra, simplemente deja los primeros 4 caracteres sin agregar nada más.
  xn<- paste0(stringr::str_sub(x, 1, 4),ifelse(is.na(str_extract(x,"(?<=_dup)\\d+")),"",str_extract(x, "(?<=_dup)\\d+")))

  #Leer la base de datos
  dataset<- 
  readr::read_delim(paste0(dir_c1_oct, x),
                    na = c("", "NA","null"),
                    locale = locale(encoding = "windows-1252"),
                    guess_max = min(1e5, Inf), 
                    trim_ws=T,
                    skip=0)
  
  colnames(dataset) <- sapply(names(dataset), convert_chars)

  dataset%>%
    #rename_with(., ~ gsub("'", "", iconv(.x, from = "UTF-8", to='ASCII//TRANSLIT'))) %>% 
    #Cambiar caracteres erróneos
    rename_with(~ stringr::str_replace_all(.x, c("\\u009c"="u",
                                                 "\\u0097"="o",
                                                 "\\u0087"="a",
                                                 "\\u0092"="i",
                                                 "\\u0096"="n")))   %>%
    janitor::clean_names() %>% 
    as.data.frame() %>% 
    dplyr::rename("HASH_KEY"="hashkey") %>% 
    dplyr::select(HASH_KEY, everything()) %>% 
    janitor::clean_names() %>% 
    assign(paste0("OCTSISTRAT_c1_",xn),.,envir = .GlobalEnv)
}

#Erase datasets
#rm(list = ls()[grepl("OCTSISTRAT_c1_", ls())])

#MERGE DATABASES
CONS_C1_2010_22_sub<- ls()[grepl("OCTSISTRAT_c1_",ls())]

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Check availability of variables in multiple datasets")
# Create an empty list to store column names
column_list <- list()
# Iterare in each database, extract column names and store it in the list
for (dataset_name in CONS_C1_2010_22_sub) {
  # getDB
  dataset <- get(dataset_name)
  # Obtain column names
  cols <- colnames(dataset)
  # Store in list
  column_list[[dataset_name]] <- cols
}
# Get a unique vector of column names 
all_columns <- unique(unlist(column_list))
# Create a DB w/ columns as rows and DBs as columns
presence_matrix <- data.frame(Column_Name = all_columns)
# Fill with X whether present in a DB
for (dataset_name in CONS_C1_2010_22_sub) {
  presence_matrix[[dataset_name]] <- ifelse(presence_matrix$Column_Name %in% column_list[[dataset_name]], "X", "")
}
#sort by original order
presence_matrix$Column_Name <- factor(presence_matrix$Column_Name, levels = all_columns)
# Sort by column name
presence_matrix <- presence_matrix %>%
  dplyr::arrange(Column_Name)

colnames(presence_matrix) <- gsub("OCTSISTRAT_c1", "c1", colnames(presence_matrix))


presence_matrix %>%
  knitr::kable("markdown", caption = "Presencia de columnas en cada base de datos")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Check availability of variables in multiple datasets")

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Merge C1 dataset")

SISTRAT23_c1_2010_2022= data.table::rbindlist(mget(CONS_C1_2010_22_sub), idcol="TABLE", fill=T) %>%
  dplyr::mutate(TABLE = str_extract(TABLE, "(?<=c1_)\\d+")) %>% #distinct(TABLE)
  dplyr::mutate(TABLE_rec = sub("^(\\d{4}).*dup(\\d*)?.*", "\\1\\2", TABLE)) %>% 
  dplyr::select(TABLE, hash_key, everything())

rm(list = ls()[grepl("OCTSISTRAT_c1_", ls())])
```
</div>

<br>

#### Clean C1 Oct 2023

Now, we apply to every column and their contents, using `rpolars`.

::: center-table
```{r import-c12-r}
#| echo: true
#| error: true
#| warning: false
#| message: true
#| results: "hold"
#| eval: false #i chose to do it in polars

fix_encoding <- function(x) {
  if (is.character(x)) {
    x <- str_replace_all(x, "ÃƒÂ³", "ó")
    x <- str_replace_all(x, "ÃƒÂ¡", "á")
    x <- str_replace_all(x, "ÃƒÂ©", "é")
    x <- str_replace_all(x, "ÃƒÂº", "ú")
    x <- str_replace_all(x, "ÃƒÂ±", "ñ")
    x <- str_replace_all(x, "Ãƒâ€˜", "Ñ")
    x <- str_replace_all(x, "ÃƒÂ", "Á")
    x <- str_replace_all(x, "Ã‚Âº", "º")
    x <- str_replace_all(x, "Ã‚Â°", "°")
    x <- str_replace_all(x, "Ã‚Âª", "ª")
    x <- str_replace_all(x, "Ã‚Â¡", "¡")
    x <- str_replace_all(x, "Ã‚Â¿", "¿")
    x <- str_replace_all(x, "ÃƒÂ", "í")
    x <- str_replace_all(x, "ÃƒÂ­", "í")
    x <- str_replace_all(x, "Ãƒâ€œ", "Ó")
    x <- str_replace_all(x, "Ãƒâ€š", "Ê")
    x <- str_replace_all(x, "Ãƒâ€", "É")
    x <- str_replace_all(x, "ÃƒÂ¼", "ü")
    x <- str_replace_all(x, "ÃƒÂ¯", "ï")
    x <- str_replace_all(x, "ÃƒÂ¶", "ö")
    x <- str_replace_all(x, "Ã‚Â«", "«")
    x <- str_replace_all(x, "Ã‚Â»", "»")
    x <- str_replace_all(x, "Ãƒâ€¡", "Ç")
    x <- str_replace_all(x, "ÃƒÂ§", "ç")
    x <- str_replace_all(x, "Ã‚Â", "")
    x <- str_replace_all(x, "Ãƒ", "")
    x <- str_replace_all(x, "\u00AD", "")
    x <- str_replace_all(x, "\u00C2\u00AD", "")
    x <- str_replace_all(x, "\u00C2", "")
    x <- str_replace_all(x, "VIÁ'A", "VIÑA")
    x <- str_replace_all(x, "RELONCAVÁ\u008d", "RELONCAVI")
    x <- str_replace_all(x, "MarÁa", "María")
    x <- str_replace_all(x, "Á'UBLE", "ÑUBLE")
    x <- str_replace_all(x, "VÁnculos", "Vínculos")#x <- str_replace_all(x, "CONCEPCIÁ"N", "CONCEPCIÓN")
    x <- str_replace_all(x,'CONCEPCIÁ\“N', "CONCEPCIÓN")    
    x <- str_replace_all(x, "AYSÁ‰N", "AYSÉN")
    x <- str_replace_all(x, "MÁnimo", "Mínimo")
    x <- str_replace_all(x, "M\\?mo", "Mínimo")
    x <- str_replace_all(x, "ClÁnica", "Clínica")
    x <- str_replace_all(x, "Prisionizaci\\?", "Prisionalización")
    x <- str_replace_all(x, "Explotaci\\?omercial", "Explotación comercial")
    x <- str_replace_all(x, "PatologÁa", "Patología")
    x <- str_replace_all(x, "CardiopatÁas", "Cardiopatías")
    x <- str_replace_all(x, "especÁfico", "específico")
    x <- str_replace_all(x, "esquizotÁpico", "esquizotípico")
    x <- str_replace_all(x, "TricotilomanÁa", "Tricotilomanía")
    x <- str_replace_all(x, "hipomanÁaco", "hipomaníaco")
    x <- str_replace_all(x, "lÁmite", "límite")
    x <- str_replace_all(x, "manÁaco", "maníaco")
    x <- str_replace_all(x, "Á\u0081nimo", "Ánimo")
    x <- str_replace_all(x, "CleptomanÁa", "Cleptomanía")
    x <- str_replace_all(x, "HipocondrÁa", "Hipocondría")
    x <- str_replace_all(x, "RAÁ\u008dCES", "RAÍCES")
    x <- str_replace_all(x, "RAÁ\\u008dCES", "RAÍCES")
    x <- str_replace_all(x, "CuracavÁ", "Curacaví")
    x <- str_replace_all(x, "raÁces", "raíces")
    x <- str_replace_all(x, "TERAPÁ‰UTICA", "TERAPÉUTICA")
    x <- str_replace_all(x, "RaÁces", "Raíces")
    x <- str_replace_all(x, "\\?BLE", "ÑUBLE")
    x <- str_replace_all(x, "BÁo-BÁo", "Bío-Bío")
    x <- str_replace_all(x, "IBA\\?S", "IBAÑEZ")
    x <- str_replace_all(x, "ReloncavÁ", "Reloncaví")
    x <- str_replace_all(x, "ValparaÁso", "Valparaíso")
    x <- str_replace_all(x, "AraucanÁa ", "Araucanía")
    x <- str_replace_all(x, "Á'uble", "Ñuble")
    x <- str_replace_all(x, "EspecÁfico", "Específico")
    x <- str_replace_all(x, "VI\\? DEL MAR", "VIÑA DEL MAR")
    x <- str_replace_all(x, "DO\\?HUE", "DOÑIHUE")
    x <- str_replace_all(x, "HUALA\\?", "HUALAÑÉ")
    x <- str_replace_all(x, "\\?qu\\?", "ÑIQUÉN")
    x <- str_replace_all(x, "CHA\\?RAL", "CHAÑARAL")
    x <- str_replace_all(x, "OLLAG\\?", "OLLAGÜE")
    x <- str_replace_all(x, "VICU\\?", "VICUÑA")
    x <- str_replace_all(x, "CA\\?TE", "CAÑETE")
    x <- str_replace_all(x, "\\?\\?A", "ÑUÑOA")
    x <- str_replace_all(x, "PolicÁa", "Policía")
    x <- str_replace_all(x, "GarantÁa", "Garantía")
    x <- str_replace_all(x, "fiscalÁa", "fiscalía")
    x <- str_replace_all(x, "HaitÁ", "Haití")
    x <- str_replace_all(x, "HungrÁa", "Hungría")
    x <- str_replace_all(x, "PaÁses Bajos", "Países Bajos")
    x <- str_replace_all(x, "Atacame\\?", "Atacameño")
    x <- str_replace_all(x, "Y\\?na", "Yámana")
    x <- str_replace_all(x, "Y\\?gan", "Yagán")
    x <- str_replace_all(x, "Hipn\\?os", "Hipnóticos")
    x <- str_replace_all(x, "Hero\\?", "Heroína")
    x <- str_replace_all(x, "code\\?", "codeína")
    x <- str_replace_all(x, "Analg\\?cos", "Analgésicos")
    x <- str_replace_all(x, "barbit\\?os", "barbitúricos")
    x <- str_replace_all(x, "Alucin\\?os", "Alucinógenos")
    x <- str_replace_all(x, "ãƒâ³n", "ón")
    x <- str_replace_all(x, "ãƒâ©n", "én")
    x <- str_replace_all(x, "ãƒâº", "ú")
    x <- str_replace_all(x, "ãƒâºa", "úa")
    x <- str_replace_all(x, "ãƒâos", "íos")
    x <- str_replace_all(x, "ãƒâuble", "Ñuble")
    x <- str_replace_all(x, "ãƒâ³n general", "ón general")
    x <- str_replace_all(x, "ãƒâ", "í")
    x <- str_replace_all(x, "ãƒâ³n casa", "ón casa")
    x <- str_replace_all(x, "ãƒârbara", "árbara")
    x <- str_replace_all(x, "nãƒâ", "ñ")
    x <- str_replace_all(x, "raãƒâces", "raíces")
    x <- str_replace_all(x, "bãƒâsico", "básico")
    x <- str_replace_all(x, "ãƒâ©utico", "éutico")
    x <- str_replace_all(x, "vãƒânculos", "vínculos")
    x <- str_replace_all(x, "marãƒâa", "maría")
    x <- str_replace_all(x, "inãƒâ©s", "inés")
    x <- str_replace_all(x, "raí\\u008dces", "raíces")
    x <- str_replace_all(x, "chiloí©", "chiloé")
    x <- str_replace_all(x, "terapí©utico", "terapéutico")
    x <- str_replace_all(x, "bísico", "básico")
    x <- str_replace_all(x, "peí±ablanca", "peñablanca")
    x <- str_replace_all(x, "iní©s", "inés")
  }
  return(x)
}

#get the columns with characters
char_cols <- names(which(sapply(SISTRAT23_c1_2010_2022, is.character)))


# Apply the function to columns in character format
SISTRAT23_c1_2010_2022 <- SISTRAT23_c1_2010_2022 |>
  mutate(across(.cols = all_of(char_cols), .fns = fix_encoding))

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column")

# Obtain unique values per column
unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    SISTRAT23_c1_2010_2022 |>
      select(all_of(col_name)) |>
      distinct() |>
      pull()
  }),
  char_cols
)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:

library(tidytable)

# Create a function to apply all replacements to a single column
apply_sequential_replacements <- function(x) {
  x <- str_replace_all(x, "\u00AD", "")
  x <- str_replace_all(x, "\u00C2\u00AD", "")
  x <- str_replace_all(x, "\u00C2", "")
  x <- str_replace_all(x, "RÁo Negro", "Río Negro")
  x <- str_replace_all(x, "BÁo-BÁo", "Bío-Bío")
  x <- str_replace_all(x, "PE\\?LOLEN", "PEÑALOLÉN")
  x <- str_replace_all(x, "PE\\?FLOR", "PEÑAFLOR")
  x <- str_replace_all(x, "SAN GREGORIO DE \\?QUEN", "SAN GREGORIO DE ÑIQUÉN")
  x <- str_replace_all(x, "\\?o nitroso", "óxido nitroso")
  x <- str_replace_all(x, "Coca\\?", "Cocaína")
  x <- str_replace_all(x, "Nunca estud¡", "Nunca estudió")
  x <- str_replace_all(x, "T\\?ica Comercial/Industrial/Normalista", "Técnica Comercial/Industrial/Normalista")
  x <- str_replace_all(x, "Profesional \\(4 o m\\?a\\? incompleta", "Profesional (4 o más incompleta)")
  x <- str_replace_all(x, "Profesional \\(4 o m\\?a\\? completa", "Profesional (4 o más completa)")
  x <- str_replace_all(x, "T\\?ica profesional˜", "Técnica profesional")
  x <- str_replace_all(x, "T\\?ico superior \\(1-3 a\\? completa", "Técnico superior (1-3 años completa)")
  x <- str_replace_all(x, "Educaci\\?\\?ca", "Educación básica")
  x <- str_replace_all(x, "T\\?ico superior \\(1-3 a\\? incompleta", "Técnico superior (1-3 años incompleta)")
  x <- str_replace_all(x, "cientÁficos", "científicos")
  x <- str_replace_all(x, "Ášnicamente", "Únicamente")
  x <- str_replace_all(x, "Hospeder\\?", "Hospedería")
  x <- str_replace_all(x, "Residencial, pensi\\?hostal", "Residencial, pensión, hostal")
  x <- str_replace_all(x, "Ocupaci\\?rregular", "Ocupación irregular")
  x <- str_replace_all(x, "CocaÁna", "Cocaína")
  x <- str_replace_all(x, "HeroÁna", "Heroína")
  x <- str_replace_all(x, "codeÁna", "codeína")
  x <- str_replace_all(x, "sintomÁ¡tico", "sintomático")
  x <- str_replace_all(x, "disfunciÁ³n", "disfunción")
  x <- str_replace_all(x, "lesiÁ³n", "lesión")
  x <- str_replace_all(x, "dÁas", "días")
  x <- str_replace_all(x, "orientaciÁ³n", "orientación")
  x <- str_replace_all(x, "especificaciÁ³n", "especificación")
  x <- str_replace_all(x, "\\tCODESAM", "CODESAM")
  x <- str_replace_all(x, "fÁsico", "físico")
  x <- str_replace_all(x, "PsÁquica", "Psíquica")
  x <- str_replace_all(x, "estÁ¡ndar", "estándar")
  return(x)
}

# Apply the function to each character column
SISTRAT23_c1_2010_2022 <- SISTRAT23_c1_2010_2022 |>
  as_tidytable() |>  # Convert to tidytable if it isn't already
  mutate(across(all_of(char_cols), apply_replacements))

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column, again")

# Obtain unique values per column
unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    SISTRAT23_c1_2010_2022 |>
      select(all_of(col_name)) |>
      distinct() |>
      pull()
  }),
  char_cols
)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Standardize values (to lower, correct tildes, etc.)")

# Function to standardize text
standardize_text <- function(x) {
  # Replace NA with empty string to avoid errors
  x <- ifelse(is.na(x), "", x)
  
  # Convert to lowercase
  x <- tolower(x)
  
  # Trim leading and trailing spaces
  x <- stringr::str_trim(x)
  
  # Replace multiple spaces with a single space
  x <- stringr::str_replace_all(x, "\\s+", " ")
  
  # Remove periods at the end
  x <- stringr::str_replace_all(x, "\\s*\\.\\s*$", "")
  
  # Replace accented characters
  accent_replacements <- c(
    "á" = "a", "é" = "e", "í" = "i", "ó" = "o", "ú" = "u",
    "Á" = "a", "É" = "e", "Í" = "i", "Ó" = "o", "Ú" = "u",
    "ñ" = "n", "Ñ" = "n"
  )
  
  for (accent in names(accent_replacements)) {
    x <- gsub(accent, accent_replacements[accent], x, fixed = TRUE)
  }
  
  return(x)
}

##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:

# Apply to all character columns
SISTRAT23_c1_2010_2022_df <- SISTRAT23_c1_2010_2022|>
  mutate(across(all_of(char_cols), standardize_text))

```
:::


::: center-table
```{r import-c12-polars}
#| echo: true
#| error: true
#| warning: false
#| message: true
#| results: "hold"
#| eval: true

# data frame to polars DataFrame 
#dataset_pl <- polars::pl$DataFrame(SISTRAT23_c1_2010_2022)
SISTRAT23_c1_2010_2022_pl <- as_polars_df(SISTRAT23_c1_2010_2022)

#get the columns with characters
char_cols <- names(which(sapply(SISTRAT23_c1_2010_2022, is.character)))

#apply replacements for every column wiht characters
for (col in char_cols) {
  SISTRAT23_c1_2010_2022_pl <- SISTRAT23_c1_2010_2022_pl$with_columns(
    pl$col(col)$
      str$replace("ÃƒÂ³", "ó")$
      str$replace("ÃƒÂ¡", "á")$
      str$replace("ÃƒÂ©", "é")$
      str$replace("ÃƒÂº", "ú")$
      str$replace("ÃƒÂ±", "ñ")$
      str$replace("Ãƒâ€˜", "Ñ")$
      str$replace("ÃƒÂ", "Á")$
      str$replace("ÃƒÂ¡", "á")$
      str$replace("ÃƒÂ©", "é")$
      str$replace("ÃƒÂº", "ú")$
      str$replace("ÃƒÂ±", "ñ")$
      str$replace("Ãƒâ€˜", "Ñ")$
      str$replace("ÃƒÂ", "Á")$
      str$replace("Ã‚Âº", "º")$
      str$replace("Ã‚Â°", "°")$
      str$replace("Ã‚Âª", "ª")$
      str$replace("Ã‚Â¡", "¡")$
      str$replace("Ã‚Â¿", "¿")$
      str$replace("ÃƒÂ", "í")$
      str$replace("ÃƒÂ­", "í")$
      str$replace("Ãƒâ€œ", "Ó")$
      str$replace("Ãƒâ€š", "Ê")$
      str$replace("Ãƒâ€", "É")$
      str$replace("ÃƒÂ¼", "ü")$
      str$replace("ÃƒÂ¯", "ï")$
      str$replace("ÃƒÂ¶", "ö")$
      str$replace("Ã‚Â«", "«")$
      str$replace("Ã‚Â»", "»")$
      str$replace("Ãƒâ€¡", "Ç")$
      str$replace("ÃƒÂ§", "ç")$
      str$replace("Ã‚Â", "")$
      str$replace("Ãƒ", "")$
      str$replace("\u00AD", "")$
      str$replace("\u00C2\u00AD", "")$
      str$replace("\u00C2", "")$
      str$replace("VIÁ‘A", "VIÑA")$
      str$replace("RELONCAVÁ\u008d", "RELONCAVI")$
      str$replace("MarÁa", "María")$
      str$replace("Á‘UBLE", "ÑUBLE")$
      str$replace("VÁnculos", "Vínculos")$
      str$replace("CONCEPCIÁ“N", "CONCEPCIÓN")$
      str$replace("AYSÁ‰N", "AYSÉN")$
      str$replace("MÁnimo", "Mínimo")$
      str$replace("M\\?mo", "Mínimo")$
      str$replace("ClÁnica", "Clínica")$
      str$replace("Prisionizaci\\?", "Prisionalización")$
      str$replace("Explotaci\\?omercial", "Explotación comercial")$
      str$replace("PatologÁa", "Patología")$
      str$replace("CardiopatÁas", "Cardiopatías")$
      str$replace("especÁfico", "específico")$
      str$replace("esquizotÁpico", "esquizotípico")$
      str$replace("TricotilomanÁa", "Tricotilomanía")$
      str$replace("hipomanÁaco", "hipomaníaco")$
      str$replace("lÁmite", "límite")$
      str$replace("manÁaco", "maníaco")$
      str$replace("Á\u0081nimo", "Ánimo")$
      str$replace("CleptomanÁa", "Cleptomanía")$
      str$replace("HipocondrÁa", "Hipocondría")$
      str$replace("RAÁ\u008dCES", "RAÍCES")$
      str$replace("RAÁ\\u008dCES", "RAÍCES")$
      str$replace("CuracavÁ", "Curacaví")$
      str$replace("raÁces", "raíces")$
      str$replace("TERAPÁ‰UTICA", "TERAPÉUTICA")$
      str$replace("RaÁces", "Raíces")$
      str$replace("\\?BLE", "ÑUBLE")$
      str$replace("BÁo-BÁo", "Bío-Bío")$
      str$replace("IBA\\?S", "IBAÑEZ")$
      str$replace("ReloncavÁ", "Reloncaví")$
      str$replace("ValparaÁso", "Valparaíso")$
      str$replace("AraucanÁa ", "Araucanía")$
      str$replace("Á‘uble", "Ñuble")$
      str$replace("EspecÁfico", "Específico")$
      str$replace("VI\\? DEL MAR", "VIÑA DEL MAR")$
      str$replace("DO\\?HUE", "DOÑIHUE")$
      str$replace("HUALA\\?", "HUALAÑÉ")$
      str$replace("\\?qu\\?", "ÑIQUÉN")$
      str$replace("CHA\\?RAL", "CHAÑARAL")$
      str$replace("OLLAG\\?", "OLLAGÜE")$
      str$replace("VICU\\?", "VICUÑA")$
      str$replace("CA\\?TE", "CAÑETE")$
      str$replace("\\?\\?A", "ÑUÑOA")$
      str$replace("PolicÁa", "Policía")$
      str$replace("GarantÁa", "Garantía")$
      str$replace("fiscalÁa", "fiscalía")$
      str$replace("HaitÁ", "Haití")$
      str$replace("HungrÁa", "Hungría")$
      str$replace("PaÁses Bajos", "Países Bajos")$
      str$replace("Atacame\\?", "Atacameño")$
      str$replace("Y\\?na", "Yámana")$
      str$replace("Y\\?gan", "Yagán")$
      str$replace("Hipn\\?os", "Hipnóticos")$
      str$replace("Hero\\?", "Heroína")$
      str$replace("code\\?", "codeína")$
      str$replace("Analg\\?cos", "Analgésicos")$
      str$replace("barbit\\?os", "barbitúricos")$
      str$replace("Alucin\\?os", "Alucinógenos")$
      str$replace("ãƒâ³n", "ón")$
      str$replace("ãƒâ©n", "én")$
      str$replace("ãƒâº", "ú")$
      str$replace("ãƒâºa", "úa")$
      str$replace("ãƒâos", "íos")$
      str$replace("ãƒâuble", "Ñuble")$
      str$replace("ãƒâ³n general", "ón general")$
      str$replace("ãƒâ", "í")$
      str$replace("ãƒâ³n casa", "ón casa")$
      str$replace("ãƒârbara", "árbara")$
      str$replace("nãƒâ", "ñ")$
      str$replace("raãƒâces", "raíces")$
      str$replace("bãƒâsico", "básico")$
      str$replace("ãƒâ©utico", "éutico")$
      str$replace("vãƒânculos", "vínculos")$
      str$replace("marãƒâa", "maría")$
      str$replace("inãƒâ©s", "inés")$
      str$replace("raí\\u008dces", "raíces")$
      str$replace("chiloí©", "chiloé")$
      str$replace("terapí©utico", "terapéutico")$
      str$replace("bísico", "básico")$
      str$replace("peí±ablanca", "peñablanca")$
      str$replace("iní©s", "inés")$
      alias(col)
  )
}

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column")

unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    # Obtener los valores únicos de la columna
    unique_values <- SISTRAT23_c1_2010_2022_pl$
      select(pl$col(col_name)$unique())$  # select unique values
      to_series()$                        # convert to a polars series
      to_r()                              # Conver to a vector of R
    return(unique_values)
  }),
  char_cols  # Asignamos los nombres de las columnas a la lista
)


#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
# Crear una lista para almacenar las expresiones de reemplazo
expr_list <- list()

for (col in char_cols) {
  # Create the expression with every replacement for the actual column
  expr <- pl$col(col)$
    str$replace("\u00AD", "")$
    str$replace("\u00C2\u00AD", "")$
    str$replace("\u00C2", "")$
    str$replace("RÁo Negro", "Río Negro")$
    str$replace("BÁo-BÁo", "Bío-Bío")$
    str$replace("PE\\?LOLEN", "PEÑALOLÉN")$
    str$replace("PE\\?FLOR", "PEÑAFLOR")$
    str$replace("SAN GREGORIO DE \\?QUEN", "SAN GREGORIO DE ÑIQUÉN")$
    str$replace("\\?o nitroso", "óxido nitroso")$
    str$replace("Coca\\?", "Cocaína")$
    str$replace("Nunca estud¡", "Nunca estudió")$
    str$replace("T\\?ica Comercial/Industrial/Normalista", "Técnica Comercial/Industrial/Normalista")$
    str$replace("Profesional \\(4 o m\\?a\\? incompleta", "Profesional (4 o más incompleta)")$
    str$replace("Profesional \\(4 o m\\?a\\? completa", "Profesional (4 o más completa)")$
    str$replace("T\\?ica profesional˜", "Técnica profesional")$
    str$replace("T\\?ico superior \\(1-3 a\\? completa", "Técnico superior (1-3 años completa)")$
    str$replace("Educaci\\?\\?ca", "Educación básica")$
    str$replace("T\\?ico superior \\(1-3 a\\? incompleta", "Técnico superior (1-3 años incompleta)")$
    str$replace("cientÁficos", "científicos")$
    str$replace("Ášnicamente", "Únicamente")$
    str$replace("Hospeder\\?", "Hospedería")$
    str$replace("Residencial, pensi\\?hostal", "Residencial, pensión, hostal")$
    str$replace("Ocupaci\\?rregular", "Ocupación irregular")$
    str$replace("CocaÁna", "Cocaína")$
    str$replace("HeroÁna", "Heroína")$
    str$replace("codeÁna", "codeína")$
    str$replace("sintomÁ¡tico", "sintomático")$
    str$replace("disfunciÁ³n", "disfunción")$
    str$replace("lesiÁ³n", "lesión")$
    str$replace("dÁas", "días")$
    str$replace("orientaciÁ³n", "orientación")$
    str$replace("especificaciÁ³n", "especificación")$
    str$replace("\\tCODESAM", "CODESAM")$
    str$replace("fÁsico", "físico")$
    str$replace("PsÁquica", "Psíquica")$
    str$replace("estÁ¡ndar", "estándar")$
    alias(col)  # Mantain the original name of the column
  
  # Add the expression to the list
  expr_list[[length(expr_list) + 1]] <- expr
}

# Apply all corrections at once
SISTRAT23_c1_2010_2022_pl <- SISTRAT23_c1_2010_2022_pl$with_columns(expr_list)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column, again")

unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    # Obtener los valores únicos de la columna
    unique_values <- SISTRAT23_c1_2010_2022_pl$
      select(pl$col(col_name)$unique())$  # select unique values
      to_series()$                        # convert to a polars series
      to_r()                              # Conver to a vector of R
    return(unique_values)
  }),
  char_cols  # assign column names to the list
)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Standardize values (to lower, correct tildes, etc.)")

# Create a list of expressions to apply the transformations
expr_list <- list()

# Mapping of accented characters to their non-accented equivalents
accent_replacements <- list(
  "á" = "a",
  "é" = "e",
  "í" = "i",
  "ó" = "o",
  "ú" = "u",
  "Á" = "a",
  "É" = "e",
  "Í" = "i",
  "Ó" = "o",
  "Ú" = "u",
  "ñ" = "n",
  "Ñ" = "n"
)

for (col in char_cols) {
  # Create the transformation expressions for each column
  expr <- pl$col(col)$
    str$to_lowercase()$  # Similar to tolower
    str$replace_all("^\\s+|\\s+$", "")$  # Replace leading and trailing spaces (simulating str_trim)
    str$replace_all("\\s+", " ")$  # Similar to str_replace_all("\\s+", " ")
    str$replace_all("\\s*\\.\\s*$", "")  # Remove periods at the end (optional: remove spaces before the period)
    
  # Apply accented character replacements
  for (accent in names(accent_replacements)) {
    expr <- expr$str$replace_all(accent, accent_replacements[[accent]])
  }
  
  expr <- expr$alias(col)  # Retain the original column name
  
  # Add the expression to the list
  expr_list[[length(expr_list) + 1]] <- expr
}

# Apply all transformations at once
SISTRAT23_c1_2010_2022_pl <- SISTRAT23_c1_2010_2022_pl$with_columns(expr_list)


#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Get the dataframe to R")
SISTRAT23_c1_2010_2022_df <- SISTRAT23_c1_2010_2022_pl$to_data_frame()

invisible("2025-03-08: corrected TABLE to get only years of retrieval")
SISTRAT23_c1_2010_2022_df <-
SISTRAT23_c1_2010_2022_df |> tidytable::mutate(TABLE_rec3= ifelse(nchar(TABLE_rec) < 5,paste0(TABLE_rec, "0"), as.character(TABLE_rec))) |> tidytable::mutate(TABLE= as.character(round(readr::parse_number(TABLE_rec3)/10,0))) |> select(-TABLE_rec3)
```
::: 

::: center-table
```{r clean-c1}
#| echo: true
#| error: true
#| warning: false
#| message: true
#| results: "hold"

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
# Clean col names
patterns <- c("_a3", "i_a_", "_a_", "_ao", "ac_")
replacements <- c("o", "ia", "i", "u", "e")

for (i in seq_along(patterns)) {
  colnames(SISTRAT23_c1_2010_2022_df) <- sub(patterns[i], replacements[i], colnames(SISTRAT23_c1_2010_2022_df))
}

#nombre_centro with unique id_centro#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#exploration: 
#centers with same id, distinct name
SISTRAT23_c1_2010_2022_df[,c("nombre_centro","i_dcentro")] %>% 
  dplyr::group_by(nombre_centro,i_dcentro) %>% 
  dplyr::summarise(n=dplyr::n()) %>% 
  dplyr::group_by(i_dcentro) %>% 
  dplyr::filter(dplyr::n()>1) %>% 
  dplyr::arrange(i_dcentro) %>% 
  knitr::kable("markdown", caption="Centers with same ID, distinct name")

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#2025-03-08: corrected values after contrasting with MAY DB
SISTRAT23_c1_2010_2022_df$nombre_centro <- dplyr::recode(SISTRAT23_c1_2010_2022_df$nombre_centro,
                                "cosam conchala"="cosam conchali", "cesfam bajos de san agustan (c. de tango)"= "cesfam bajos de san agustin (c. de tango)", "cesfam juan antonio raos"="cesfam juan antonio rios", "pab funcionarios gendarmeraa"="pab funcionarios gendarmeria")

SISTRAT23_c1_2010_2022_df$serviciode_salud <- dplyr::recode(SISTRAT23_c1_2010_2022_df$serviciode_salud,"araucanianorte"="araucania norte", "araucaniasur (temuco)"="araucania sur (temuco)")
SISTRAT23_c1_2010_2022_df$az <- dplyr::recode(SISTRAT23_c1_2010_2022_df$az,"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas"="sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas")
SISTRAT23_c1_2010_2022_df$bb <- dplyr::recode(SISTRAT23_c1_2010_2022_df$bb,"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas"="sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas")
SISTRAT23_c1_2010_2022_df$bd <- dplyr::recode(SISTRAT23_c1_2010_2022_df$bd,"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas"="sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas")
SISTRAT23_c1_2010_2022_df$diagnostico_trs_fa_sico <- dplyr::recode(SISTRAT23_c1_2010_2022_df$diagnostico_trs_fa_sico, "cardiopatias: miocardiopataa dilatada por oh, arritmias, hta"="cardiopatias: miocardiopatia dilatada por oh, arritmias, hta")
SISTRAT23_c1_2010_2022_df$diagnostico_trs_fa_sico <- gsub("miocardiopataa","miocardiopatia",SISTRAT23_c1_2010_2022_df$diagnostico_trs_fa_sico)
SISTRAT23_c1_2010_2022_df$tipo_centro_derivacion <- dplyr::recode(SISTRAT23_c1_2010_2022_df$tipo_centro_derivacion,"hospital (residencial ej. corta, mediana estadaa, unidad de desintoxicacion)"="hospital (residencial ej. corta, mediana estadia, unidad de desintoxicacion)")
SISTRAT23_c1_2010_2022_df$consorcio <- dplyr::recode(SISTRAT23_c1_2010_2022_df$consorcio,
  "centro terapa‰utico de tratamiento maria veronica verdugo urrutia e.i.r.l"="centro terapeutico de tratamiento maria veronica verdugo urrutia e.i.r.l")

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#before 2025
#rename with unique level nombre_centro
SISTRAT23_c1_2010_2022_df$nombre_centro_rec <- recode(SISTRAT23_c1_2010_2022_df$nombre_centro,
  "cadem de chillan" = "cosam nuble (cadem de chillan)",
  "centro de tratamiento adicciones esperanza, hospital santa cruzz" = "centro de tratamiento adicciones esperanza, hospital santa cruz",
  "CESFAM Colon" = "CESFAM Colón",
  "comunidad terapeutica orion san bernardo (orion vespertino) pai - mpai pg" ="comunidad terapeutica orion san bernardo (orion vespertino)",
  "cta villa alemana (cta penablanca)" = "cta nancy araya ruiz hospital penablanca (ex cta villa alemana -cta penablanca)",
  "sociedad de profesionales salud integral ltda"="sociedad de profesionales salud integral ltda (mujeres)")

#estado conyugal#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
SISTRAT23_c1_2010_2022_df$estado_conyugal <- dplyr::recode(SISTRAT23_c1_2010_2022_df$estado_conyugal,
                                "nocontesta"="no contesta")
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#2025-03-06: corrected errors in tr.compliance and primary sub use frequency 
SISTRAT23_c1_2010_2022_df$motivode_egreso <- dplyr::recode(SISTRAT23_c1_2010_2022_df$motivode_egreso,
                                "alta admnistrativa"="alta administrativa")
SISTRAT23_c1_2010_2022_df$frecuenciade_consumo_sustancia <- dplyr::recode(SISTRAT23_c1_2010_2022_df$frecuenciade_consumo_sustancia,
                                "menos de 1 daa - semana"="menos de 1 dia - semana")

```
:::

<br>

### C1 May 2023

```{r import-c1-may}
#| echo: true
#| error: false
#| warning: true
#| message: true
#| paged.print: true
#| results: "hold"
#| eval: true

invisible("We tryied to join previous database with actual database to identify original HASHs to join with PO records")

wdpath<-
paste0(gsub("/cons","",gsub("cons","",paste0(getwd(),"/cons"))))
envpath<- if(regmatches(wdpath, regexpr("[A-Za-z]+", wdpath))=="G"){"G:/Mi unidad/Alvacast/SISTRAT 2023/"}else{"E:/Mi unidad/Alvacast/SISTRAT 2023/"}

dir_c1_pre<- paste0(gsub("cons","",envpath),"data/20230825_original_data/senda/Encriptado c1/Personas tratadas C1/")

#matches a string that starts with the number 2, followed by any number of characters, followed by a space, followed by the word "txt".
MAYSISTRAT23_c1<-list.files(path=toString(dir_c1_pre), pattern="202353")

#Import datasets from May 3, 2022
for (i in 1:length(MAYSISTRAT23_c1)) {
  x<-MAYSISTRAT23_c1[i]
  readr::read_delim(paste0(dir_c1_pre, x),
                    na = c("", "NA","null"),
                    guess_max = min(1e5, Inf)) %>% 
    janitor::clean_names() %>% 
    as.data.frame() %>% 
    dplyr::rename("HASH_KEY"="rut") %>% 
    dplyr::select(HASH_KEY, everything()) %>% 
    assign(paste0("MAYSISTRAT23_c1_",stringr::str_sub(x, 1, 4)),.,envir = .GlobalEnv)
}

#Estimate previous databases (November 13, 2019)
MAYSISTRAT23_c1_pre_oct19<-list.files(path=toString(dir_c1_pre), pattern="20191113")

#Import datasets
for (i in 1:length(MAYSISTRAT23_c1_pre_oct19)) {
  x<-MAYSISTRAT23_c1_pre_oct19[i]
  #2019 have a special treatment because it has another registry
  if(grepl("EneOct",x)){
  readr::read_delim(paste0(dir_c1_pre, x),
                    na = c("", "NA","null"),
                    guess_max = min(1e5, Inf),
                    skip=0) %>% 
    janitor::clean_names() %>% 
    as.data.frame() %>% 
    dplyr::rename("HASH_KEY" = !!names(.[92]))%>%
    dplyr::mutate(TABLE= rep(x,)) %>% 
    dplyr::select(TABLE, HASH_KEY, everything()) %>%       
    assign(paste0("MAYSISTRAT23_c1_pre_",stringr::str_sub(x, 1, 4)),.,envir = .GlobalEnv)
  } else {
  readr::read_delim(paste0(dir_c1_pre, x),
                    na = c("", "NA","null"),
                    guess_max = min(1e5, Inf),
                    skip=0) %>% 
    janitor::clean_names() %>% 
    as.data.frame() %>% 
    dplyr::rename("HASH_KEY" = !!names(.[91]))%>%
    dplyr::mutate(TABLE= rep(x,)) %>% 
    dplyr::select(TABLE, HASH_KEY, everything()) %>%       
    assign(paste0("MAYSISTRAT23_c1_pre_",stringr::str_sub(x, 1, 4)),.,envir = .GlobalEnv)    
  }
}

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#MERGE DATABASES#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

CONS_C1_2019_22<-data.table::rbindlist(mget(paste0("MAYSISTRAT23_c1_",c(2019:2022))), idcol="TABLE", fill=T) %>% 
 dplyr::mutate(TABLE = sub(".+(....)$", "\\1", TABLE))
CONS_C1_2010_19<-plyr::rbind.fill(mget(paste0("MAYSISTRAT23_c1_pre_",c(2010:2019)))) %>% 
  data.table::data.table() %>% 
 dplyr::mutate(TABLE = sub("^(\\d{4}).*", "\\1", TABLE))

OLDMAY_CONS_C1_2010_22<- plyr::rbind.fill(CONS_C1_2010_19,CONS_C1_2019_22)



#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
library(polars)

# data frame to polars DataFrame 
OLDMAY_CONS_C1_2010_22_pl <- as_polars_df(OLDMAY_CONS_C1_2010_22)

#get the columns with characters
char_cols <- names(which(sapply(OLDMAY_CONS_C1_2010_22, is.character)))

#apply replacements for every column wiht characters
for (col in char_cols) {
  OLDMAY_CONS_C1_2010_22_pl <- OLDMAY_CONS_C1_2010_22_pl$with_columns(
    pl$col(col)$
      str$replace("ÃƒÂ³", "ó")$
      str$replace("ÃƒÂ¡", "á")$
      str$replace("ÃƒÂ©", "é")$
      str$replace("ÃƒÂº", "ú")$
      str$replace("ÃƒÂ±", "ñ")$
      str$replace("Ãƒâ€˜", "Ñ")$
      str$replace("ÃƒÂ", "Á")$
      str$replace("ÃƒÂ¡", "á")$
      str$replace("ÃƒÂ©", "é")$
      str$replace("ÃƒÂº", "ú")$
      str$replace("ÃƒÂ±", "ñ")$
      str$replace("Ãƒâ€˜", "Ñ")$
      str$replace("ÃƒÂ", "Á")$
      str$replace("Ã‚Âº", "º")$
      str$replace("Ã‚Â°", "°")$
      str$replace("Ã‚Âª", "ª")$
      str$replace("Ã‚Â¡", "¡")$
      str$replace("Ã‚Â¿", "¿")$
      str$replace("ÃƒÂ", "í")$
      str$replace("ÃƒÂ­", "í")$
      str$replace("Ãƒâ€œ", "Ó")$
      str$replace("Ãƒâ€š", "Ê")$
      str$replace("Ãƒâ€", "É")$
      str$replace("ÃƒÂ¼", "ü")$
      str$replace("ÃƒÂ¯", "ï")$
      str$replace("ÃƒÂ¶", "ö")$
      str$replace("Ã‚Â«", "«")$
      str$replace("Ã‚Â»", "»")$
      str$replace("Ãƒâ€¡", "Ç")$
      str$replace("ÃƒÂ§", "ç")$
      str$replace("Ã‚Â", "")$
      str$replace("Ãƒ", "")$
      str$replace("\u00AD", "")$
      str$replace("\u00C2\u00AD", "")$
      str$replace("\u00C2", "")$
      str$replace("VIÁ‘A", "VIÑA")$
      str$replace("RELONCAVÁ\u008d", "RELONCAVI")$
      str$replace("MarÁa", "María")$
      str$replace("Á‘UBLE", "ÑUBLE")$
      str$replace("VÁnculos", "Vínculos")$
      str$replace("CONCEPCIÁ“N", "CONCEPCIÓN")$
      str$replace("AYSÁ‰N", "AYSÉN")$
      str$replace("MÁnimo", "Mínimo")$
      str$replace("M\\?mo", "Mínimo")$
      str$replace("ClÁnica", "Clínica")$
      str$replace("Prisionizaci\\?", "Prisionalización")$
      str$replace("Explotaci\\?omercial", "Explotación comercial")$
      str$replace("PatologÁa", "Patología")$
      str$replace("CardiopatÁas", "Cardiopatías")$
      str$replace("especÁfico", "específico")$
      str$replace("esquizotÁpico", "esquizotípico")$
      str$replace("TricotilomanÁa", "Tricotilomanía")$
      str$replace("hipomanÁaco", "hipomaníaco")$
      str$replace("lÁmite", "límite")$
      str$replace("manÁaco", "maníaco")$
      str$replace("Á\u0081nimo", "Ánimo")$
      str$replace("CleptomanÁa", "Cleptomanía")$
      str$replace("HipocondrÁa", "Hipocondría")$
      str$replace("RAÁ\u008dCES", "RAÍCES")$
      str$replace("RAÁ\\u008dCES", "RAÍCES")$
      str$replace("CuracavÁ", "Curacaví")$
      str$replace("raÁces", "raíces")$
      str$replace("TERAPÁ‰UTICA", "TERAPÉUTICA")$
      str$replace("RaÁces", "Raíces")$
      str$replace("\\?BLE", "ÑUBLE")$
      str$replace("BÁo-BÁo", "Bío-Bío")$
      str$replace("IBA\\?S", "IBAÑEZ")$
      str$replace("ReloncavÁ", "Reloncaví")$
      str$replace("ValparaÁso", "Valparaíso")$
      str$replace("AraucanÁa ", "Araucanía")$
      str$replace("Á‘uble", "Ñuble")$
      str$replace("EspecÁfico", "Específico")$
      str$replace("VI\\? DEL MAR", "VIÑA DEL MAR")$
      str$replace("DO\\?HUE", "DOÑIHUE")$
      str$replace("HUALA\\?", "HUALAÑÉ")$
      str$replace("\\?qu\\?", "ÑIQUÉN")$
      str$replace("CHA\\?RAL", "CHAÑARAL")$
      str$replace("OLLAG\\?", "OLLAGÜE")$
      str$replace("VICU\\?", "VICUÑA")$
      str$replace("CA\\?TE", "CAÑETE")$
      str$replace("\\?\\?A", "ÑUÑOA")$
      str$replace("PolicÁa", "Policía")$
      str$replace("GarantÁa", "Garantía")$
      str$replace("fiscalÁa", "fiscalía")$
      str$replace("HaitÁ", "Haití")$
      str$replace("HungrÁa", "Hungría")$
      str$replace("PaÁses Bajos", "Países Bajos")$
      str$replace("Atacame\\?", "Atacameño")$
      str$replace("Y\\?na", "Yámana")$
      str$replace("Y\\?gan", "Yagán")$
      str$replace("Hipn\\?os", "Hipnóticos")$
      str$replace("Hero\\?", "Heroína")$
      str$replace("code\\?", "codeína")$
      str$replace("Analg\\?cos", "Analgésicos")$
      str$replace("barbit\\?os", "barbitúricos")$
      str$replace("Alucin\\?os", "Alucinógenos")$
      str$replace("ãƒâ³n", "ón")$
      str$replace("ãƒâ©n", "én")$
      str$replace("ãƒâº", "ú")$
      str$replace("ãƒâºa", "úa")$
      str$replace("ãƒâos", "íos")$
      str$replace("ãƒâuble", "Ñuble")$
      str$replace("ãƒâ³n general", "ón general")$
      str$replace("ãƒâ", "í")$
      str$replace("ãƒâ³n casa", "ón casa")$
      str$replace("ãƒârbara", "árbara")$
      str$replace("nãƒâ", "ñ")$
      str$replace("raãƒâces", "raíces")$
      str$replace("bãƒâsico", "básico")$
      str$replace("ãƒâ©utico", "éutico")$
      str$replace("vãƒânculos", "vínculos")$
      str$replace("marãƒâa", "maría")$
      str$replace("inãƒâ©s", "inés")$
      str$replace("raí\\u008dces", "raíces")$
      str$replace("chiloí©", "chiloé")$
      str$replace("terapí©utico", "terapéutico")$
      str$replace("bísico", "básico")$
      str$replace("peí±ablanca", "peñablanca")$
      str$replace("iní©s", "inés")$
      alias(col)
  )
}

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column")

unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    # Obtener los valores únicos de la columna
    unique_values <- OLDMAY_CONS_C1_2010_22_pl$
      select(pl$col(col_name)$unique())$  # select unique values
      to_series()$                        # convert to a polars series
      to_r()                              # Conver to a vector of R
    return(unique_values)
  }),
  char_cols  # Asignamos los nombres de las columnas a la lista
)
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
# Crear una lista para almacenar las expresiones de reemplazo
expr_list <- list()

for (col in char_cols) {
  # Create the expression with every replacement for the actual column
  expr <- pl$col(col)$
    str$replace("\u00AD", "")$
    str$replace("\u00C2\u00AD", "")$
    str$replace("\u00C2", "")$
    str$replace("RÁo Negro", "Río Negro")$
    str$replace("BÁo-BÁo", "Bío-Bío")$
    str$replace("PE\\?LOLEN", "PEÑALOLÉN")$
    str$replace("PE\\?FLOR", "PEÑAFLOR")$
    str$replace("SAN GREGORIO DE \\?QUEN", "SAN GREGORIO DE ÑIQUÉN")$
    str$replace("\\?o nitroso", "óxido nitroso")$
    str$replace("Coca\\?", "Cocaína")$
    str$replace("Nunca estud¡", "Nunca estudió")$
    str$replace("T\\?ica Comercial/Industrial/Normalista", "Técnica Comercial/Industrial/Normalista")$
    str$replace("Profesional \\(4 o m\\?a\\? incompleta", "Profesional (4 o más incompleta)")$
    str$replace("Profesional \\(4 o m\\?a\\? completa", "Profesional (4 o más completa)")$
    str$replace("T\\?ica profesional˜", "Técnica profesional")$
    str$replace("T\\?ico superior \\(1-3 a\\? completa", "Técnico superior (1-3 años completa)")$
    str$replace("Educaci\\?\\?ca", "Educación básica")$
    str$replace("T\\?ico superior \\(1-3 a\\? incompleta", "Técnico superior (1-3 años incompleta)")$
    str$replace("cientÁficos", "científicos")$
    str$replace("Ášnicamente", "Únicamente")$
    str$replace("Hospeder\\?", "Hospedería")$
    str$replace("Residencial, pensi\\?hostal", "Residencial, pensión, hostal")$
    str$replace("Ocupaci\\?rregular", "Ocupación irregular")$
    str$replace("CocaÁna", "Cocaína")$
    str$replace("HeroÁna", "Heroína")$
    str$replace("codeÁna", "codeína")$
    str$replace("sintomÁ¡tico", "sintomático")$
    str$replace("disfunciÁ³n", "disfunción")$
    str$replace("lesiÁ³n", "lesión")$
    str$replace("dÁas", "días")$
    str$replace("orientaciÁ³n", "orientación")$
    str$replace("especificaciÁ³n", "especificación")$
    str$replace("\\tCODESAM", "CODESAM")$
    str$replace("fÁsico", "físico")$
    str$replace("PsÁquica", "Psíquica")$
    str$replace("estÁ¡ndar", "estándar")$
    alias(col)  # Mantain the original name of the column
  
  # Add the expression to the list
  expr_list[[length(expr_list) + 1]] <- expr
}

# Aplicar todas las correcciones a la vez
OLDMAY_CONS_C1_2010_22_pl <- OLDMAY_CONS_C1_2010_22_pl$with_columns(expr_list)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column, again")


unique_values_list <- setNames(
  lapply(char_cols, function(col_name) {
    # Obtener los valores únicos de la columna
    unique_values <- OLDMAY_CONS_C1_2010_22_pl$
      select(pl$col(col_name)$unique())$  # select unique values
      to_series()$                        # convert to a polars series
      to_r()                              # Conver to a vector of R
    return(unique_values)
  }),
  char_cols  # assign column names to the list
)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Standardize values (to lower, correct tildes, etc.)")

# Create a list of expressions to apply the transformations
expr_list <- list()

# Mapping of accented characters to their non-accented equivalents
accent_replacements <- list(
  "á" = "a",
  "é" = "e",
  "í" = "i",
  "ó" = "o",
  "ú" = "u",
  "Á" = "a",
  "É" = "e",
  "Í" = "i",
  "Ó" = "o",
  "Ú" = "u",
  "ñ" = "n",
  "Ñ" = "n"
)

for (col in char_cols) {
  # Create the transformation expressions for each column
  expr <- pl$col(col)$
    str$to_lowercase()$  # Similar to tolower
    str$replace_all("^\\s+|\\s+$", "")$  # Replace leading and trailing spaces (simulating str_trim)
    str$replace_all("\\s+", " ")$  # Similar to str_replace_all("\\s+", " ")
    str$replace_all("\\s*\\.\\s*$", "")  # Remove periods at the end (optional: remove spaces before the period)
    
  # Apply accented character replacements
  for (accent in names(accent_replacements)) {
    expr <- expr$str$replace_all(accent, accent_replacements[[accent]])
  }
  
  expr <- expr$alias(col)  # Retain the original column name
  
  # Add the expression to the list
  expr_list[[length(expr_list) + 1]] <- expr
}

# Apply all transformations at once
OLDMAY_CONS_C1_2010_22_pl <- OLDMAY_CONS_C1_2010_22_pl$with_columns(expr_list)

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Get the dataframe to R")
OLDMAY_CONS_C1_2010_22_df <- OLDMAY_CONS_C1_2010_22_pl$to_data_frame()

invisible("Erased this variable")
OLDMAY_CONS_C1_2010_22_df$hash_rut_completo<-NULL
```


```{r import-c1-may-compare-c1oct}
#| echo: true
#| error: false
#| warning: true
#| message: true
#| paged.print: true
#| results: "hold"
#| eval: true

#2025-03-08: corrected values after contrasting with OCT DB
#estado conyugal#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
OLDMAY_CONS_C1_2010_22_df$estado_conyugal <- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$estado_conyugal,
                                "nocontesta"="no contesta")
OLDMAY_CONS_C1_2010_22_df$tenencia_de_la_vivienda <- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$tenencia_de_la_vivienda,
                                "n/a"="")
OLDMAY_CONS_C1_2010_22_df$motivo_de_egreso <- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$motivo_de_egreso,
                                "alta admnistrativa"="alta administrativa")

column_names_df <- data.frame(OCT = c(names(SISTRAT23_c1_2010_2022_df), rep(NA, max(0, length(names(OLDMAY_CONS_C1_2010_22_df)) - length(names(SISTRAT23_c1_2010_2022_df))))), 
                              MAY = c(names(OLDMAY_CONS_C1_2010_22_df), rep(NA, max(0, length(names(SISTRAT23_c1_2010_2022_df)) - length(names(OLDMAY_CONS_C1_2010_22_df))))))

column_names_df <-
  column_names_df |> 
  dplyr::mutate(OCT= recode (OCT,"orientacion_sexual"="opciondiscapacidad", "opciondiscapacidad"="orientacion_sexual"))

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##
list_to_df <- function(lst) {
    # For each list element, create a data frame with the variable name and its values
    df_list <- lapply(names(lst), function(var) {
        data.frame(variable = var, 
                   value = lst[[var]],
                   stringsAsFactors = FALSE)
    })
    # Combine the individual data frames into one
    result_df <- do.call(rbind, df_list)
    rownames(result_df) <- NULL
    return(result_df)
}

invisible("Compare values of each database")

strictly_char_cols_c1oct<-
setdiff(names(which(sapply(SISTRAT23_c1_2010_2022_df, is.character))), c("hash_key", "codigo_identificacion", "fecha_ingresoa_tratamiento", "fecha_ingresoa_convenio_senda", "fecha_egresode_tratamiento", "nombre_centro_rec"))

unique_values_list_c1_vs_c1may<- setNames(
  lapply(strictly_char_cols_c1oct, function(col_name) {
    SISTRAT23_c1_2010_2022_df |>
      select(all_of(col_name)) |>
      distinct() |>
      pull()
  }),
 strictly_char_cols_c1oct
)

strictly_char_cols_c1may<-
setdiff(names(which(sapply(OLDMAY_CONS_C1_2010_22_df, is.character))), c("HASH_KEY", "codigo_identificacion", "fecha_ingreso_a_tratamiento", "fecha_ingreso_a_convenio_senda", "fecha_egreso_de_tratamiento"))

unique_values_list_c1may_vs_c1oct<- setNames(
  lapply(strictly_char_cols_c1may, function(col_name) {
    OLDMAY_CONS_C1_2010_22_df |>
      select(all_of(col_name)) |>
      distinct() |>
      pull()
  }),
  strictly_char_cols_c1may
)

invisible("Inspect differences between values of the different variables")
#str(unique_values_list_c1_vs_c1may)
#str(unique_values_list_c1may_vs_c1oct)
comparison_values_may_vs_oct<-
  #recycles values of may  database
cbind2(
list_to_df(unique_values_list_c1may_vs_c1oct) |>
  #to have an order similar to the original database
  dplyr::mutate(variable= factor(variable, levels=strictly_char_cols_c1may)) |>
  arrange(variable, value) |> rename("may_variable"="variable", "may_value"="value"),
list_to_df(unique_values_list_c1_vs_c1may) |>
  #to remain with the ordered variables of gender identity
  dplyr::mutate(variable= factor(variable, levels=column_names_df$OCT)) |>
  arrange(variable, value) |> rename("oct_variable"="variable", "oct_value"="value")
)
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##

# # Convertir a data frame
# oct_df <- data.frame(OCT = column_names_df$OCT)
# may_df <- data.frame(MAY = column_names_df$MAY)

# Encontrar correspondencias basadas en similitud de nombres
# column_mapping <- fuzzyjoin::stringdist_join(oct_df, may_df, by = c("OCT"="MAY"), method = "jw", max_dist = 0.2) %>%
#   distinct(OCT, .keep_all = TRUE)  # Para mantener solo la mejor coincidencia para cada columna en OCT



# Crear una lista de renombrado para dplyr::rename
rename_list<-c('HASH_KEY'='hash_key',
'codigo_identificacion'='codigo_identificacion',
'nombre_centro'='nombre_centro',
'tipo_centro'='tipo_centro',
'region_del_centro'='regiondel_centro',
'servicio_de_salud'='serviciode_salud',
'tipo_de_programa'='tipode_programa',
'tipo_de_plan'='tipode_plan',
'senda'='senda',
'dias_en_tratamiento'='diasen_tratamiento',
'n_meses_en_tratamiento'='n_mesesen_tratamiento',
'dias_en_senda'='diasen_senda',
'n_meses_en_senda'='n_mesesen_senda',
'sexo'='sexo',
'edad'='edad',
'nombre_usuario'='nombre_usuario',
'comuna_residencia'='comuna_residencia',
'origen_de_ingreso'='origende_ingreso',
'pais_nacimiento'='pais_nacimiento',
'nacionalidad'='nacionalidad',
'etnia'='etnia',
'estado_conyugal'='estado_conyugal',
'numero_de_hijos'='numerode_hijos',
'numero_de_hijos_ingreso_tratamiento_residencial'='numerode_hijos_ingreso_tratamie',
'parentesco_con_el_jefe_de_hogar'='parentescoconel_jefede_hogar',
'numero_de_tratamientos_anteriores'='numerode_tratamientos_anteriore',
'fecha_ultimo_tratamiento'='fecha_ultimo_tratamiento',
'sustancia_de_inicio'='sustanciade_inicio',
'edad_inicio_consumo'='edad_inicio_consumo',
'se_trata_de_una_mujer_embarazada'='setratadeunamujerembarazad',
'escolaridad_ultimo_ano_cursado'='escolaridadultimoanocursado',
'condicion_ocupacional'='condicion_ocupacional',
'categoria_ocupacional'='categoria_ocupacional',
'rubro_trabaja'='rubro_trabaja',
'con_quien_vive'='con_quien_vive',
'tipo_de_vivienda'='tipodevivienda',
'tenencia_de_la_vivienda'='tenenciadelavivienda',
'sustancia_principal'='sustancia_principal',
'otras_sustancias_no1'='otras_sustanciasno1',
'otras_sustancias_no2'='otras_sustanciasno2',
'otras_sustancias_no3'='otras_sustanciasno3',
'frecuencia_de_consumo_sustancia_principal'='frecuenciade_consumo_sustancia',
'edad_inicio_sustancia_principal'='edad_inicio_sustancia_principal',
'via_administracion_sustancia_principal'='vaiadministracion_sustancia_pr',
'diagnostico_trs_consumo_sustancia'='diagnostico_trs_consumo_sustanc',
'diagnostico_trs_psiquiatrico_dsm_iv'='diagnostico_trs_psiquiatrico_ds',
'diagnostico_trs_psiquiatrico_sub_dsm_iv'='diagnostico_trs_psiquiatrico_su',
'x2_diagnostico_trs_psiquiatrico_dsm_iv'='diagnostico_trs_psiquiatrico',
'x2_diagnostico_trs_psiquiatrico_sub_dsm_iv'='av',
'x3_diagnostico_trs_psiquiatrico_dsm_iv'='aw',
'x3_diagnostico_trs_psiquiatrico_sub_dsm_iv'='ax',
'diagnostico_trs_psiquiatrico_cie_10'='diagnostico_trs_psiquiatrico_ci',
'diagnostico_trs_psiquiatrico_sub_cie_10'='az',
'x2_diagnostico_trs_psiquiatrico_cie_10'='ba',
'x2_diagnostico_trs_psiquiatrico_sub_cie_10'='bb',
'x3_diagnostico_trs_psiquiatrico_cie_10'='bc',
'x3_diagnostico_trs_psiquiatrico_sub_cie_10'='bd',
'diagnostico_trs_fisico'='diagnostico_trs_fa_sico',
'otros_problemas_de_atencion_de_salud_mental'='otros_problemasde_atencionde_s',
'compromiso_biopsicosocial'='compromiso_biopsicosocial',
'diagnostico_global_de_necesidades_de_integracion_social_60'='diagnosticoglobaldenecesidade',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_61'='diagnosticodenecesidadesdein',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_62'='bj',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_63'='bk',
'fecha_ingreso_a_tratamiento'='fecha_ingresoa_tratamiento',
'fecha_ingreso_a_convenio_senda'='fecha_ingresoa_convenio_senda',
'usuario_de_tribunales_tratamiento_drogas'='usuariode_tribunales_tratamien',
'consentimiento_informado'='consentimiento_informado',
'fecha_egreso_de_tratamiento'='fecha_egresode_tratamiento',
'motivo_de_egreso'='motivode_egreso',
'tipo_centro_derivacion'='tipo_centro_derivacion',
'evaluacion_del_proceso_terapeutico'='evaluaciondel_proceso_terapeuti',
'evaluacion_al_egreso_respecto_al_patron_de_consumo'='evaluacional_egreso_respectoal',
'evaluacion_al_egreso_respecto_a_situacion_familiar'='evaluacional_egreso_respectoa',
'evaluacion_al_egreso_respecto_relaciones_interpersonales'='evaluacional_egreso_respecto_re',
'evaluacion_al_egreso_respecto_a_situacion_ocupacional'='bw',
'evaluacion_al_egreso_respecto_salud_mental'='evaluacional_egreso_respecto_sa',
'evaluacion_al_egreso_respecto_salud_fisica'='by',
'evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social'='evaluacional_egreso_respecto_tr',
'diagnostico_trastorno_psiquiatrico_cie_10_al_egreso'='diagnostico_trastorno_psiquiatri',
'diagnostico_global_de_necesidades_de_integracion_social_80'='cb',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_81'='cc',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_82'='cd',
'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_83'='ce',
'tiene_menores_de_edad_a_cargo'='tienemenoresdeedadacargo',
'motivo_de_egreso_alta_administrativa'='motivodeegreso_alta_administra',
'consorcio'='consorcio',
'id_centro'='i_dcentro',
'ha_estado_embarazada_egreso'='haestadoembarazadaegreso',
'identidad_de_genero'='identidaddegenero',
'discapacidad'='discapacidad',
'opcion_discapacidad'='opciondiscapacidad',
'orientacion_sexual'='orientacion_sexual',
'servicios_basicos_95'='servicios_basicos',
'laboral_ingresos'='laboral_ingresos',
'perso_dormitorio_vivienda'='perso_dormitorio_vivienda',
'precariedad_vivienda'='precariedad_vivienda',
'servicios_basicos_99'='ct')

SISTRAT23_c1_2010_2022_df2 <- SISTRAT23_c1_2010_2022_df  |> 
  dplyr::rename(!!!rename_list)

invisible("To get MAY vs OCT")
invisible("Only based on the variables that are in both databases, excepting HASH KEY")
OLD_NEW_SISTRAT23_c1_2010_2022_df2<-
inner_join(SISTRAT23_c1_2010_2022_df2, OLDMAY_CONS_C1_2010_22_df, by = 
             setdiff(intersect(names(SISTRAT23_c1_2010_2022_df2), names(OLDMAY_CONS_C1_2010_22_df)),"HASH_KEY"))

message(paste0("Entries with equal values from MAY (",formatC(nrow(OLDMAY_CONS_C1_2010_22_df), big.mark=","),") and OCT database: ",formatC(nrow(OLD_NEW_SISTRAT23_c1_2010_2022_df2), big.mark=",")))

rm(list = ls()[grepl("MAYSISTRAT23", ls())])
```

We compared values and column names with C1 october database and it is storred in `comparison_values_may_vs_oct.xlsx`.

We suspect that `1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464` is the encryption of invalid RUNs, so we deleted these observations.

```{r tab1b2-hashs-mfv-discard}
#| echo: true
#| error: false
#| warning: true
#| message: true
#| paged.print: true
#| results: "hold"

SISTRAT23_c1_2010_2022_df2<-
tidytable::filter(SISTRAT23_c1_2010_2022_df2, !HASH_KEY== "1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464") 
```

<br>


### TOP Oct 2023

Load the TOP data

```{r import-top}
#| echo: true
#| error: false
#| warning: true
#| message: true
#| results: "hide"

#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#LOAD DATABASES_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_

# Define the directories
path <- dirname(paste0(getwd(),"/cons"))
dir_top <- paste0(gsub("cons", "", path), "data/20231018_original_data/TOP/")

# Function to simplify pattern matching
matches_pattern <- function(x, patterns) {
  any(sapply(patterns, function(p) grepl(p, x)))
}

# Create a function to process each file
process_file_top <- function(x) {
  # Determine the HASH_KEY index based on file name
  prefix <- ifelse(matches_pattern(x, "dup1"), "OCTSISTRAT23dup1_top_", 
                   ifelse(matches_pattern(x, "dup2"), "OCTSISTRAT23dup2_top_", "OCTSISTRAT23_top_"))
  
  # Read and process the file
  readr::read_delim(paste0(dir_top, x),
                    na = c("", "NA", "null"),
                    guess_max = min(1e5, Inf),
                    skip = 0) %>% 
    janitor::clean_names() %>%
    dplyr::rename(
      HASH_KEY = !!names(.[(ncol(.))])) %>%
    dplyr::mutate(TABLE = rep(x)) %>%
    dplyr::select(TABLE, HASH_KEY, everything()) %>%
    assign(paste0(prefix, stringr::str_extract(x,"\\d+")), ., envir = .GlobalEnv)
}

# Get the list of files and apply the process_file function to each
files_top_2015_2022_sub <- list.files(path = toString(dir_top))[grepl("csv",list.files(path = toString(dir_top)))]
lapply(files_top_2015_2022_sub, process_file_top)

#Remove objects that contain "_top_"
#rm(list= ls()[grep("_top_", ls())])

#MERGE DATABASES
CONS_TOP_2015_22_sub<-  ls()[grep("OCTSISTRAT23", ls())][grepl("_top_", ls()[grep("OCTSISTRAT23", ls())])]

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Check availability of variables in multiple datasets")
# Create an empty list to store column names
column_list <- list()
# Iterare in each database, extract column names and store it in the list
for (dataset_name in CONS_TOP_2015_22_sub) {
  # getDB
  dataset <- get(dataset_name)
  # Obtain column names
  cols <- colnames(dataset)
  # Store in list
  column_list[[dataset_name]] <- cols
}
# Get a unique vector of column names 
all_columns <- unique(unlist(column_list))
# Create a DB w/ columns as rows and DBs as columns
presence_matrix_top <- data.frame(Column_Name = all_columns)
# Fill with X whether present in a DB
for (dataset_name in CONS_TOP_2015_22_sub) {
  presence_matrix_top[[dataset_name]] <- ifelse(presence_matrix_top$Column_Name %in% column_list[[dataset_name]], "X", "")
}
#sort by original order
presence_matrix_top$Column_Name <- factor(presence_matrix_top$Column_Name, levels = all_columns)
# Sort by column name
presence_matrix_top <- presence_matrix_top %>%
  dplyr::arrange(Column_Name)

colnames(presence_matrix_top) <- gsub("_top_","top",gsub("dup[1-2]_top_", "top",gsub("OCTSISTRAT23", "", colnames(presence_matrix_top))))
```

::: center-table
```{r import-top2}
#| echo: true
#| error: false
#| warning: true
#| message: true

presence_matrix_top %>%
  knitr::kable("markdown", caption = "Presencia de columnas en cada base de datos (TOP)")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Consolidate TOP")

SISTRAT23_top_2015_2022<-plyr::rbind.fill(mget(CONS_TOP_2015_22_sub))%>% 
  data.table::data.table() %>% 
 dplyr::mutate(TABLE_rec = sub("^(\\d{4}).*dup(\\d*)?.*", "\\1\\2", TABLE)) %>% 
 dplyr::mutate(TABLE = sub("^(\\d{4}).*", "\\1", TABLE))

for (i in seq_along(patterns)) {
  colnames(SISTRAT23_top_2015_2022) <- sub(patterns[i], replacements[i], colnames(SISTRAT23_top_2015_2022))
}

strictly_char_cols_top<- setdiff(names(SISTRAT23_top_2015_2022), c("id", "nombre_apliacadordel_top", "fecha_aplicacion_top", "fechade_ingresoa_tratamiento", "fecha_nacimiento", "edad", "fecha_egreso", "HASH_KEY"))

unique_values_list_top<- setNames(
  lapply(strictly_char_cols_top, function(col_name) {
    SISTRAT23_top_2015_2022 |>
      select(all_of(col_name)) |>
      distinct() |>
      pull()
  }),
 strictly_char_cols_top
)
#To export it and analyse each unique value
unique_values_list_top_df <- list_to_df(unique_values_list_top)# rio::export("clipboard")

invisible("corregir nombres erroneos de la base")
SISTRAT23_top_2015_2022<-
SISTRAT23_top_2015_2022%>%
  rename_with(~gsub("da3sis", "dosis", .x), contains("da3sis")) %>%
  rename_with(~gsub("fa_sica", "fisica", .x), contains("fa_sica")) %>% 
  rename_with(~gsub("riaa", "rina", .x), contains("riaa"))

rm(list = ls()[grepl("OCTSISTRAT23", ls())])
```
:::

<br>


### Clean TOP Oct 2023

Now, we apply to every column and their contents, using `rpolars`.

```{r import-top2-polars}
#| echo: true
#| error: true
#| warning: false
#| message: true
#| results: "hold"

# data frame to polars DataFrame 
#dataset_pl <- polars::pl$DataFrame(SISTRAT23_c1_2010_2022)
SISTRAT23_top_2015_2022_pl <- as_polars_df(SISTRAT23_top_2015_2022)

#get the columns with characters
char_cols_top <- names(which(sapply(SISTRAT23_top_2015_2022, is.character)))

char_cols_top_filter<-
setdiff(char_cols_top, c("TABLE", "HASH_KEY", "TABLE_rec"))

#apply replacements for every column wiht characters
for (col in char_cols_top) {
  SISTRAT23_top_2015_2022_pl <- SISTRAT23_top_2015_2022_pl$with_columns(
    pl$col(col)$
      str$replace("\u00C2\u00AD", "")$
      str$replace("\u00AD", "")$
      str$replace("\u00C2", "")$      
    # Reemplazos para las vocales acentuadas y la Ñ en mayúsculas
      str$replace("Ãƒâ€˜", "Ñ")$
      str$replace("Ãƒâ€", "É")$
      str$replace("Ãƒâ€š", "Ê")$
      str$replace("Ãƒâ€œ", "Ó")$
      str$replace("Ãƒâ€¡", "Ç")$
      str$replace("Ãƒâ€¹", "Ë")$
      str$replace("Ãƒâ€º", "Ù")$
      str$replace("Ãƒâ€�", "Ô")$
      str$replace("Ãƒâ€¢", "Õ")$
      str$replace("Ãƒâ€œ", "Ó")$
      str$replace("ÃƒÂ", "Á")$
      str$replace("ÃƒÂ©", "É")$
      str$replace("ÃƒÂ­", "Í")$
      str$replace("ÃƒÂ³", "Ó")$
      str$replace("ÃƒÂº", "Ú")$
      str$replace("ÃƒÂ¡", "á")$
      str$replace("ÃƒÂ©", "é")$
      str$replace("ÃƒÂ­", "í")$
      str$replace("ÃƒÂ³", "ó")$
      str$replace("ÃƒÂº", "ú")$
      str$replace("MÃnimo", "Mínimo")$
      str$replace("DerivaciÃ³n", "Derivación")$
      str$replace("TerapÃ©utica", "Terapéutica")$
      str$replace("Ã\u0091UBLE", "ÑUBLE")$
      str$replace("IBAÃ\u0091ES", "IBANEZ")$
      str$replace("Ã³xido", "Óxido")$
      str$replace("codeÃna", "codeína")$
      str$replace("CocaÃna", "Cocaína")$
      str$replace("AnabÃ³licos", "Anabólicos")$
      str$replace("AlucinÃ³genos", "Alucinógenos")$
      str$replace("barbitÃºricos", "barbitúricos")$
      str$replace("HipnÃ³ticos", "Hipnóticos")$
      str$replace("AnalgÃ©sicos", "Analgésicos")$
      str$replace("ReloncavÃ", "Reloncaví")$
      str$replace("Mejillones \\t", "Mejillones")$
      str$replace("ChiloÃ©", "Chiloé")$
      str$replace("ConchalÃ", "Conchalí")$
      str$replace("poblaciÃ³n", "población")$
      str$replace("ViÃ±a", "VIña")$
      str$replace("BÃ¡rbara", "Bárbara")$
      str$replace("RAÃ\u008dCES", "RAÍCES")$
      str$replace("BÃ¡sico", "Básico")$
      str$replace("FÃ©nix", "Féniz")$
      str$replace("CuracavÃ", "Curacaví")$
      str$replace("VÃnculos", "Vínculos")$
      str$replace("TERAPÃ\u0089UTICA", "TERAPÉUTICA")$
      str$replace("RÃos", "Ríos")$
      str$replace("RehabilitaciÃ³n", "Rehabilitación")$
      str$replace("rehabilitaciÃ³n", "rehabilitación")$
      str$replace("AyelÃ©n", "Ayelén")$
      str$replace("RamÃ³n", "Ramón")$
      str$replace("Paine\t", "Paine")$
      str$replace("Batuco\t", "Batuco")$
      str$replace("JosÃ©", "José")$
      str$replace("Batuco\t", "Batuco")$
      str$replace("ColÃ³n", "Colón")$
      str$replace("Ksorrem Karen' nÃ¡", "Ksorrem Karen' ná")$
      str$replace("MarÃa", "María")$
      str$replace("InÃ©s", "Inés")$
      str$replace("LÃ³pez", "López")$
      str$replace("PÃ©rez", "Pérez")$
      str$replace("NuÃ±ez", "Nuñez")$
      str$replace("FarfÃ¡n", "Farfán")$
      str$replace("peÃ±ailillo", "peñailillo")$
      str$replace("FarfÃ¡n", "Farfán")$
      str$replace("CalderÃ³n", "Calderón")$
      str$replace("AndrÃ©s", "Andrés")$
      str$replace("JofrÃ©", "Jofré")$
      str$replace("CofrÃ©", "Cofré")$
      str$replace("VÃ\u008dCTOR", "VÍCTOR")$
      str$replace("RAMÃ\u0093N", "RAMÓN")$
      str$replace("Hualane\t", "Hualane")$
      alias(col)
  )  
} 
      
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Obtain unique values by column")


unique_values_list_top <- setNames(
  lapply(char_cols_top_filter, function(col_name) {
    tryCatch({
      col_name_lower <- tolower(col_name)
      SISTRAT23_top_2015_2022_pl$select(
        pl$col(col_name_lower)$unique()
      )$to_series()$to_r()
    }, error = function(e) {
      warning(paste("Error processing column:", col_name, "-", e$message))
      return(NULL)
    })
  }),
  char_cols_top_filter
)


#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Standardize values (to lower, correct tildes, etc.)")

# Create a list of expressions to apply the transformations
expr_list <- list()

# Mapping of accented characters to their non-accented equivalents
accent_replacements <- list(
  "á" = "a",
  "é" = "e",
  "í" = "i",
  "ó" = "o",
  "ú" = "u",
  "Á" = "a",
  "É" = "e",
  "Í" = "i",
  "Ó" = "o",
  "Ú" = "u",
  "ñ" = "n",
  "Ñ" = "n"
)

for (col in char_cols_top) {
  # Create the transformation expressions for each column
  expr <- pl$col(col)$
    str$to_lowercase()$  # Similar to tolower
    str$replace_all("^\\s+|\\s+$", "")$  # Replace leading and trailing spaces (simulating str_trim)
    str$replace_all("\\s+", " ")$  # Similar to str_replace_all("\\s+", " ")
    str$replace_all("\\s*\\.\\s*$", "")  # Remove periods at the end (optional: remove spaces before the period)
    
  # Apply accented character replacements
  for (accent in names(accent_replacements)) {
    expr <- expr$str$replace_all(accent, accent_replacements[[accent]])
  }
  
  expr <- expr$alias(col)  # Retain the original column name
  
  # Add the expression to the list
  expr_list[[length(expr_list) + 1]] <- expr
}

# Apply all transformations at once
SISTRAT23_top_2015_2022_pl <- SISTRAT23_top_2015_2022_pl$with_columns(expr_list)


#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
invisible("Get the dataframe to R")
SISTRAT23_top_2015_2022_df <- SISTRAT23_top_2015_2022_pl$to_data_frame()
```

<br>

#### Correct dates of TOP and C1

We started standardizing dates


```{r dates}
#| echo: true
#| error: true
#| warning: true
#| message: true
#| results: "hold"
#
SISTRAT23_c1_2010_2022_df2<-
SISTRAT23_c1_2010_2022_df2 %>% 
  dplyr::mutate(birth_date= stringr::str_sub(codigo_identificacion, nchar(codigo_identificacion)-7,nchar(codigo_identificacion))) %>% 
  dplyr::mutate(birth_date= readr::parse_date(birth_date, format="%d%m%Y")) %>% 
  dplyr::mutate(adm_date = str_replace_all(fecha_ingreso_a_tratamiento ,"/","-"),
  senda_adm_date = str_replace_all(fecha_ingreso_a_convenio_senda ,"/","-"),
  discharge_date= str_replace_all(fecha_egreso_de_tratamiento,"/","-"))%>% 
  dplyr::mutate(adm_date= readr::parse_date(adm_date, format="%d-%m-%Y")) %>%
  dplyr::mutate(senda_adm_date= readr::parse_date(senda_adm_date, format="%d-%m-%Y")) %>% 
  dplyr::mutate(discharge_date= readr::parse_date(discharge_date, format="%d-%m-%Y")) 


invisible("Problemas para rescatar datos")
problems_birth_date_c1 <- problems(SISTRAT23_c1_2010_2022_df2$birth_date)
problems_adm_date_c1 <- problems(SISTRAT23_c1_2010_2022_df2$adm_date)
problems_discharge_date_c1 <- problems(SISTRAT23_c1_2010_2022_df2$discharge_date)
  
  
SISTRAT23_top_2015_2022_df<-
SISTRAT23_top_2015_2022_df %>% 
  dplyr::mutate(birth_date = str_replace_all(fecha_nacimiento ,"/","-"),
  adm_date= str_replace_all(fechade_ingresoa_tratamiento,"/","-"),
  discharge_date= str_replace_all(fecha_egreso,"/","-"))%>% 
  dplyr::mutate(birth_date= readr::parse_date(birth_date, format="%d-%m-%Y")) %>%
  dplyr::mutate(adm_date= readr::parse_date(adm_date, format="%d-%m-%Y")) %>% 
  dplyr::mutate(discharge_date= readr::parse_date(discharge_date, format="%d-%m-%Y"))
```

::: center-table
```{r dates2}
#| echo: true
#| error: true
#| warning: true
#| message: true
#| results: "hold"
rbind.data.frame(
  cbind.data.frame(db="C1",name="Birth date", 
sum_dates(SISTRAT23_c1_2010_2022_df2$birth_date)),
  cbind.data.frame(db="C1",name="Admission date", 
sum_dates(SISTRAT23_c1_2010_2022_df2$adm_date)),
  cbind.data.frame(db="C1",name="Admission to SENDA date", sum_dates(SISTRAT23_c1_2010_2022_df2$senda_adm_date)),
  cbind.data.frame(db="C1",name="Discharge date", sum_dates(SISTRAT23_c1_2010_2022_df2$discharge_date)),
  cbind.data.frame(db="TOP",name="Application date", sum_dates(SISTRAT23_top_2015_2022_df$fecha_aplicacion_top)),
  cbind.data.frame(db="TOP",name="Birth date",
sum_dates(SISTRAT23_top_2015_2022_df$birth_date)),
cbind.data.frame(db="TOP",name="Admission date",
sum_dates(SISTRAT23_top_2015_2022_df$adm_date)),
cbind.data.frame(db="TOP",name="Date of discharge",
sum_dates(SISTRAT23_top_2015_2022_df$discharge_date))
) %>% 
  knitr::kable("markdown", caption="Coded dates")
```
:::

### Mortality

We took individuals that died from 2007 and took the birth date.

```{r mortality}
#| echo: true
#| error: true
#| warning: true
#| message: true
#| results: "hold"

dir_mort <- paste0(gsub("cons", "", 
                          paste0(getwd(),"/cons")
                          ), "data/20230825_original_data/deis/")

mortality<-
  read_delim(paste0(dir_mort, "2023-08-11 DatosDefuncionesEncrip.csv"),
    delim = ";", 
    na = c("", "NA", "null"),
    guess_max = min(1e5, Inf),
    escape_double = FALSE, 
    trim_ws = TRUE) %>% 
  janitor::clean_names() %>% 
  dplyr::filter(ano_def>2007) %>% 
  dplyr::mutate(ano_nac_deis= paste0(sprintf("%02.0f",ano1_nac),sprintf("%02.0f",ano2_nac))) %>% 
  dplyr::mutate(birth_date= readr::parse_date(paste0(dia_nac,"-",mes_nac,"-",ano_nac_deis), format="%d-%m-%Y")) 
problems_birth_date_deis_mort<- problems(mortality$birth_date)
```


### Hosp Nov 2023

We obtained the HASHes in the dataset that were avilable in SENDA data frames.

```{r import-hosp}
#| echo: true
#| error: true
#| warning: true
#| message: true
#| results: "hold"

dir_hosp <- paste0(gsub("cons", "", paste0(getwd(),"/cons")), "data/20231107_egres_hosp/")
HOSP <- read_delim(paste0(dir_hosp, "2023-11-07  DatosEgresosHosp_encrip.csv"),
    delim = "~", 
    na = c("", "NA", "null"),
    guess_max = min(1e5, Inf),
    escape_double = FALSE, 
    trim_ws = TRUE) %>% 
  janitor::clean_names()
problems_HOSP <- problems(HOSP)
HOSP$year<- lubridate::year(HOSP$fecha_egreso)

#format to polars
HOSP_pl <- as_polars_df(HOSP)

#seleccionamos los ingresos hospitalarios que correspondan a las observaciones de nuestro interés
HOSP_filter_pl <- HOSP_pl$join(
  SISTRAT23_c1_2010_2022_pl$select("hash_key")$unique(subset = "hash_key"),
  left_on = "run",
  right_on = "hash_key",
  how = "inner"  # Utilizamos inner join para seleccionar las filas con coincidencias
)
```


Then, we discarded the following HASHs: 1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464 & e8e014fa3a46c3583e25ba2b45629703a530799199d2cbc8cf5f21ede7fb389c because they were associated to inconclusive information and were not able to identify subjects accurately.

```{r import-hosp2}
#| echo: true
#| error: true
#| warning: true
#| message: true
#| results: "hold"

HOSP_filter_pl_filt <- HOSP_filter_pl$filter(
  !pl$col("run")$is_in(c(
    "1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464",
    "e8e014fa3a46c3583e25ba2b45629703a530799199d2cbc8cf5f21ede7fb389c"
  ))
)

HOSP_filter_df <- HOSP_filter_pl_filt$to_data_frame()
rm(HOSP)
rm(HOSP_pl)
```

To close the project, we erase polars objects.

```{r erase-polar-objs}
rm(list = ls()[grepl("_pl$", ls())])

```


<br>

```{=html}
<!---
 #https://github.com/kosukeimai/fastLink
 
#"aquellos registros que terminaron por ejemplo, con una sentencia absolutoria o en que no se pudo acreditar un hecho delictual". No tengo la bbdd para revisar si esto aplica a nosotros, pero prefiero dejarlo acá para que no se me olvide.
#  
  
#https://rpolars.github.io/r-polarssql/
#para descriptive (paso 1)
 --->
```
<br>

# Session info

```{r session-info}
#|echo: true
#|error: true
#|message: true
#|paged.print: true
message(paste0("R library: ", Sys.getenv("R_LIBS_USER")))
message(paste0("Date: ",withr::with_locale(new = c('LC_TIME' = 'C'), code =Sys.time())))
message(paste0("Editor context: ", path))
cat("quarto version: "); quarto::quarto_version()

sesion_info <- devtools::session_info()
dplyr::select(
  tibble::as_tibble(sesion_info$packages),
  c(package, loadedversion, source)
) %>% 
  DT::datatable(filter = 'top', colnames = c('Row number' =1,'Package' = 2, 'Version'= 3),
              caption = htmltools::tags$caption(
        style = 'caption-side: top; text-align: left;',
        '', htmltools::em('R packages')),
      options=list(
initComplete = htmlwidgets::JS(
        "function(settings, json) {",
        "$(this.api().tables().body()).css({
            'font-family': 'Helvetica Neue',
            'font-size': '70%', 
            'code-inline-font-size': '15%', 
            'white-space': 'nowrap',
            'line-height': '0.75em',
            'min-height': '0.5em'
            });",
        "}")))
```


```{r session-info-python}
#|echo: true
#|error: true
#|message: true
#|paged.print: true
#| class-output: center-table

reticulate::py_list_packages() %>% 
  DT::datatable(filter = 'top', colnames = c('Row number' =1,'Package' = 2, 'Version'= 3),
              caption = htmltools::tags$caption(
        style = 'caption-side: top; text-align: left;',
        '', htmltools::em('Python packages')),
      options=list(
initComplete = htmlwidgets::JS(
        "function(settings, json) {",
        "$(this.api().tables().body()).css({
            'font-family': 'Helvetica Neue',
            'font-size': '70%', 
            'code-inline-font-size': '15%', 
            'white-space': 'nowrap',
            'line-height': '0.75em',
            'min-height': '0.5em'
            });",
        "}"))) 
```

Save

```{r save}
wdpath<-
paste0(gsub("/cons","",gsub("cons","",paste0(getwd(),"/cons"))))

wdpath

envpath<- if(regmatches(wdpath, regexpr("[A-Za-z]+", wdpath))=="G"){"G:/Mi unidad/Alvacast/SISTRAT 2023/"}else{"E:/Mi unidad/Alvacast/SISTRAT 2023/"}

envpath

file.path(paste0(envpath,"data/20241015_out"))

# Save and check if path exists2
  save.image(paste0(envpath,"data/20241015_out/", paste0("1_ndp_", format(Sys.time(), "%Y_%m_%d"), ".Rdata")))
  cat("Saved in:",
      paste0(envpath,"data/20241015_out/", paste0("1_ndp_", format(Sys.time(), "%Y_%m_%d"), ".Rdata")))


cat("Copy renv lock into cons folder\n")

if (Sys.getenv("RSTUDIO_SESSION_TYPE") == "server" || file.exists("/.dockerenv")) {
  message("Running on RStudio Server or inside Docker. Folder copy skipped.")

} else {
    
  source_folder <- 
  destination_folder <- paste0(wdpath,"cons/renv")
  
  # Copy the folder recursively
    file.copy(paste0(wdpath,"renv.lock"), paste0(wdpath,"cons/renv.lock"), overwrite = TRUE)
  
  message("Renv lock copy performed.")
}

```
