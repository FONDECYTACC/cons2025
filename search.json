[
  {
    "objectID": "import_c1_top_data_adm_25.html#loading-packages-and-uniting-databases",
    "href": "import_c1_top_data_adm_25.html#loading-packages-and-uniting-databases",
    "title": "SENDAs Agreement 1 Update 2010-2022",
    "section": "Loading Packages and uniting databases",
    "text": "Loading Packages and uniting databases\nProceed to load the necessary packages.\n\n\n\nCode\nunlink(\"*_files\", recursive=T)\n\n\n#clean enviroment\nrm(list = ls()); gc()\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# --- Bootstrap reticulate con ruta relativa a getwd() ---\nsuppressPackageStartupMessages(library(reticulate))\n\n# Busca .mamba_root/envs/py311/python.exe desde getwd() hacia padres\nfind_python_rel &lt;- function(start = getwd(),\n                            rel = file.path(\".mamba_root\",\"envs\",\"py311\",\"python.exe\")) {\n  cur &lt;- normalizePath(start, winslash = \"/\", mustWork = FALSE)\n  repeat {\n    cand &lt;- normalizePath(file.path(cur, rel), winslash = \"/\", mustWork = FALSE)\n    if (file.exists(cand)) return(cand)\n    parent &lt;- dirname(cur)\n    if (identical(parent, cur)) return(NA_character_)  # llegó a la raíz\n    cur &lt;- parent\n  }\n}\n\npy &lt;- find_python_rel()\n\nif (is.na(py)) {\n  stop(\"No se encontró Python relativo a getwd() (buscando '.mamba_root/envs/py311/python.exe').\\n\",\n       \"Directorio actual: \", getwd())\n}\n\n# Forzar ese intérprete\nSys.unsetenv(c(\"RETICULATE_CONDAENV\",\"RETICULATE_PYTHON_FALLBACK\"))\nSys.setenv(RETICULATE_PYTHON = py)\n\nreticulate::use_python(py, required=T)\npy_config()  # verificación\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n#https://github.com/rstudio/renv/issues/544\n#renv falls back to copying rather than symlinking, which is evidently very slow in this configuration.\nrenv::settings$use.cache(FALSE)\n\n#check if rstools is installed\ntry(installr::install.Rtools(check_r_update=F))\n\n#change repository to CL\nlocal({\n  r &lt;- getOption(\"repos\")\n  r[\"CRAN\"] &lt;- \"https://cran.dcc.uchile.cl/\"\n  options(repos=r)\n})\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#PACKAGES#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nunlink(\"*_cache\", recursive=T)\n\ncat(\"RUst version\")\nsystem(\"rustc --version\")#[1] 127\n\n#Package to bring packages in development\nif(!require(devtools)){install.packages(\"devtools\")}\n\n#Package to install packages\nif (!require(\"pacman\")) install.packages(\"pacman\")\n#Package administration\nif(!require(renv)){install.packages(\"renv\")}\n#Package to manipulate time\nif(!require(clock)){install.packages(\"clock\")}\n#To manipulate data \nif(!require(tidyverse)){install.packages(\"tidyverse\")}\nif(!require(janitor)){install.packages(\"janitor\")}\n#For contingency tables\nif(!require(kableExtra)){install.packages(\"kableExtra\")}\n#For connections with python\nif(!require(reticulate)){install.packages(\"reticulate\")}\n#To manipulate big data\nif(!require(polars)){install.packages(\"polars\", repos = \"https://community.r-multiverse.org\")}\n#code completion\n#To bring big databases\nif(!require(nanoparquet)){install.packages(\"nanoparquet\")}\n\nif(!require(tidytable)){install.packages(\"tidytable\")}\n\n\n# pacman::p_load(\n#   altair, arrow, biostat3, car, caret, chilemapas, choroplethr, choroplethrAdmin1,\n#   choroplethrMaps, codebook, compareGroups, DiagrammeR, DiagrammeRsvg, DT, epiR, epitools,\n#   factoextra, FactoMineR, finalfit, flexsurv, fmsb, ggfortify, ggiraph, ggiraphExtra,\n#   ggpubr, ggrepel, glca, gridExtra, here, Hmisc, htmlwidgets, installr, janitor, kableExtra,\n#   lsmeans, magick, matrixStats, Metrics, muhaz, naniar, neuralnet, NeuralNetTools, pagedown,\n#   panelr, patchwork, pdp, plotly, plyr, plotly, posterdown, polycor, pROC, psych, radiant,\n#   rateratio.test, reshape, reshape2, reticulate, rio, ROCit, rnaturalearth, rsvg, sf, sjPlot,\n#   sqldf, Statamarkdown, survminer, survMisc, tableone, tidylog, tidyverse, treemapify, VIM,\n#   webshot, xaringanthemer, zoo, install=T\n# )\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#FUNCTIONS######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\ncopiar_nombres &lt;- function(x,row.names=FALSE,col.names=TRUE,dec=\",\",...) {\n  if(class(try(dplyr::ungroup(x)))[1]==\"tbl_df\"){\n    if(options()$OutDec==\".\"){\n      options(OutDec = dec)\n      write.table(format(data.frame(x)),\"clipboard\",sep=\"\\t\",row.names=FALSE,col.names=col.names,...)\n      options(OutDec = \".\")\n      return(x)\n    } else {\n      options(OutDec = \",\")\n      write.table(format(data.frame(x)),\"clipboard\",sep=\"\\t\",row.names=FALSE,col.names=col.names,...)\n      options(OutDec = \",\")\n      return(x)    \n    }\n  } else {\n    if(options()$OutDec==\".\"){\n      options(OutDec = dec)\n      write.table(format(x),\"clipboard\",sep=\"\\t\",row.names=FALSE,col.names=col.names,...)\n      options(OutDec = \".\")\n      return(x)\n    } else {\n      options(OutDec = \",\")\n      write.table(format(x),\"clipboard\",sep=\"\\t\",row.names=FALSE,col.names=col.names,...)\n      options(OutDec = \",\")\n      return(x)       \n    }\n  }\n}  \n\n#WINDOWS do not restrict memory size\nif(.Platform$OS.type == \"windows\") withAutoprint({\n  memory.size()\n  memory.size(TRUE)\n  memory.limit()\n})\nmemory.limit(size=56000)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#NAs are replaced with \"\" in knitr kable\noptions(knitr.kable.NA = '')\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#to format rows in bold\nformat_cells &lt;- function(df, rows ,cols, value = c(\"italics\", \"bold\", \"strikethrough\")){\n\n  # select the correct markup\n  # one * for italics, two ** for bold\n  map &lt;- setNames(c(\"*\", \"**\", \"~~\"), c(\"italics\", \"bold\", \"strikethrough\"))\n  markup &lt;- map[value]  \n\n  for (r in rows){\n    for(c in cols){\n\n      # Make sure values are not factors\n      df[[c]] &lt;- as.character( df[[c]])\n\n      # Update formatting\n      df[r, c] &lt;- ifelse(nchar(df[r, c])==0,\"\",paste0(markup, gsub(\" \", \"\", df[r, c]), markup))\n    }\n  }\n\n  return(df)\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#To produce line breaks in messages and warnings\nknitr::knit_hooks$set(\n   error = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-danger\" style=\"font-size: 0.5rem !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Error', '**Error**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   warning = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-warning\" style=\"font-size: 0.5rem !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Warning:', '**Warning**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   message = function(x, options) {\n     paste('&lt;div class=\"message\" style=\"font-size: 0.5rem !important;\"&gt;',\n           gsub('##', '\\n', x),\n           '&lt;/div&gt;', sep = '\\n')\n   }\n)\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#CONFIG #######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\noptions(scipen=2) #display numbers rather scientific number\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# NO MORE DEBUGS\noptions(error = NULL)        # si antes tenías options(error = recover) o browser)\noptions(browserNLdisabled = FALSE)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#ENCODING#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nconv_chars &lt;- data.frame(\n    ANSI = c(\"Á\", \"á\", \"É\", \"é\", \"Í\", \"í\", \"Ó\", \"ó\", \"Ú\", \"ú\", \"Ñ\", \"ñ\", \"¿\", \"ó\"),\n    UTF_8 = c(\"Ã\", \"Ã¡\", \"Ã‰\", \"Ã©\", \"Ã\", \"Ã­\", \"Ã“\", \"Ã³\", \"Ãš\", \"Ãº\", \"Ã‘\", \"Ã±\", \"Â¿\", \"Ã²\"),\n    JAVASCRIPT = c(\"u00c1\", \"u00e1\", \"u00c9\", \"u00e9\", \"u00cd\", \"u00ed\", \"u00d3\", \"u00f3\", \"u00da\", \"u00fa\", \"u00d1\", \"u00f1\", \"u00bf\", \"0xF2\"),\n    HTML = c(\"&#193;\", \"&#225;\", \"&#201;\", \"&#233;\", \"&#205;\", \"&#237;\", \"&#211;\", \"&#243;\", \"&#218;\", \"&#250;\", \"&#209;\", \"&#241;\", \"&#191;\", \"\")\n)\n\nconvert_chars &lt;- function(x) {\n    x &lt;- gsub(\"ÃƒÂ³\", \"ó\", x)  # ó\n    x &lt;- gsub(\"ÃƒÂ¡\", \"á\", x)  # á\n    x &lt;- gsub(\"ÃƒÂ©\", \"é\", x)  # é\n    x &lt;- gsub(\"ÃƒÂº\", \"ú\", x)  # ú\n    x &lt;- gsub(\"ÃƒÂ±\", \"ñ\", x)  # ñ\n    x &lt;- gsub(\"Ãƒâ€˜\", \"Ñ\", x) # Ñ (mayúscula)\n    x &lt;- gsub(\"ÃƒÂ\", \"Á\", x)   # Á\n    x &lt;- gsub(\"Ã‚Âº\", \"º\", x)  # º\n    x &lt;- gsub(\"Ã‚Â°\", \"°\", x)  # °\n    x &lt;- gsub(\"Ã‚Âª\", \"ª\", x)  # ª\n    x &lt;- gsub(\"Ã‚Â¡\", \"¡\", x)  # ¡\n    x &lt;- gsub(\"Ã‚Â¿\", \"¿\", x)  # ¿\n    x &lt;- gsub(\"ÃƒÂ­\", \"í\", x)  # í\n    x &lt;- gsub(\"Ãƒâ€œ\", \"Ó\", x)  # Ó\n    x &lt;- gsub(\"Ãƒâ€š\", \"Ê\", x)  # Ê\n    x &lt;- gsub(\"Ãƒâ€\", \"É\", x)  # É\n    x &lt;- gsub(\"ÃƒÂ¼\", \"ü\", x)  # ü\n    x &lt;- gsub(\"ÃƒÂ¯\", \"ï\", x)  # ï\n    x &lt;- gsub(\"ÃƒÂ¶\", \"ö\", x)  # ö\n    x &lt;- gsub(\"Ã‚Â«\", \"«\", x)  # «\n    x &lt;- gsub(\"Ã‚Â»\", \"»\", x)  # »\n    x &lt;- gsub(\"Ãƒâ€¡\", \"Ç\", x)  # Ç\n    x &lt;- gsub(\"ÃƒÂ§\", \"ç\", x)  # ç\n    x &lt;- gsub(\"Ã‚Â\", \"\", x)    # Otros casos residuales\n    x &lt;- gsub(\"Ãƒ\", \"\", x)     # Otros casos residuales\n    return(x)\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nsum_dates &lt;- function(x){\n  \n  cbind.data.frame(\nmin= as.Date(min(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\"),\np001= as.Date(quantile(unclass(as.Date(x)), .001, na.rm=T), origin = \"1970-01-01\"),\np005= as.Date(quantile(unclass(as.Date(x)), .005, na.rm=T), origin = \"1970-01-01\"),\np025= as.Date(quantile(unclass(as.Date(x)), .025, na.rm=T), origin = \"1970-01-01\"),\np25= as.Date(quantile(unclass(as.Date(x)), .25, na.rm=T), origin = \"1970-01-01\"),\np50= as.Date(quantile(unclass(as.Date(x)), .5, na.rm=T), origin = \"1970-01-01\"),\np75= as.Date(quantile(unclass(as.Date(x)), .75, na.rm=T), origin = \"1970-01-01\"),\np975= as.Date(quantile(unclass(as.Date(x)), .975, na.rm=T), origin = \"1970-01-01\"),\np995= as.Date(quantile(unclass(as.Date(x)), .995, na.rm=T), origin = \"1970-01-01\"),\np999= as.Date(quantile(unclass(as.Date(x)), .999, na.rm=T), origin = \"1970-01-01\"),\nmax= as.Date(max(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\")\n  )\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# Define the function adapted for Polars\nsum_dates_polars &lt;- function(df, date_col) {\n  # Create the list of quantiles\n  quantiles &lt;- c(0.001, 0.005, 0.025, 0.25, 0.5, 0.75, 0.975, 0.995, 0.999)\n  # Create expressions to calculate min and max\n  expr_list &lt;- list(\n    pl$col(date_col)$min()$alias(\"min\"),\n    pl$col(date_col)$max()$alias(\"max\")\n  )\n  # Add expressions for quantiles\n  for (q in quantiles) {\n    expr_list &lt;- append(expr_list, pl$col(date_col)$quantile(q)$alias(paste0(\"p\", sub(\"\\\\.\", \"\", as.character(q)))))\n  }\n  # Apply the expressions and return a DataFrame with the results\n  df$select(expr_list)\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nlist_to_df &lt;- function(lst) {\n    # For each list element, create a data frame with the variable name and its values\n    df_list &lt;- lapply(names(lst), function(var) {\n        data.frame(variable = var, \n                   value = lst[[var]],\n                   stringsAsFactors = FALSE)\n    })\n    # Combine the individual data frames into one\n    result_df &lt;- do.call(rbind, df_list)\n    rownames(result_df) &lt;- NULL\n    return(result_df)\n}\n\n\n          used (Mb) gc trigger (Mb) max used (Mb)\nNcells  606441 32.4    1301404 69.6  1098905 58.7\nVcells 1166962  9.0    8388608 64.0  1876213 14.4\npython:         G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python.exe\nlibpython:      G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python311.dll\npythonhome:     G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311\nversion:        3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:           [NOT FOUND]\n\nNOTE: Python version was forced by RETICULATE_PYTHON\nError in contrib.url(repos, \"source\") : \n  trying to use CRAN without setting a mirror\nRUst version[1] 127\n&gt; memory.size()\n[1] Inf\n&gt; memory.size(TRUE)\n[1] Inf\n&gt; memory.limit()\n[1] Inf\n[1] Inf\n\n\n\n\n\nC1 Oct 2023\nLoad the C1 data 2023. We defined the directory G:/My Drive/Alvacast/SISTRAT 2023//data/20231018_original_data/; given that there are many misfits in the Latin or UTF-8 codifications in databases, we also define what is a missing value (i.e., ““,”NA, “null”), we defined a flexible approach to tell R how to define what value has a database (from 1e5th row to infinite), position the HASH KEY (individual masked ID) and TABLE (year of the database) columns in the first places. If a yearly database consists in more than one database and contains the characters “dup1”, then the databases will be formatted as objects that started with the “SISTRAT23dup1_” characters; if contains the characters “dup2”, then the characters will be “SISTRAT23dup2_”; the rest will start with the following characters: “SISTRAT23_”. From the folder of the databases, we excluded the files that contained the characters “TOP” and “erronea”. Then we grouped the databases from 2010 to 2013, 2019 and 2020 (single databases by year) into C1_dup1, then the first databases (dup1) of yearly databases from 2014 to 2019, 2021 and 2022 were grouped into C1_dup1, and the second databases of the same years were grouped into C1_dup2.\n\n\n\nCode\ninvisible(\"Para homologar nombres\")\niconv_xlsx&lt;-rio::import(\"_input/iconv.xlsx\")\n\nreplacements &lt;- setNames(as.character(iconv_xlsx[, 2]), iconv_xlsx[, 1])\n\n\n# Define the directories\ndir_c1_oct &lt;- paste0(gsub(\"cons\", \"\", \n                          paste0(getwd(),\"/cons\")\n                          ), \"data/20231018_original_data/\")\ndir_c1_oct_25 &lt;- paste0(gsub(\"cons\", \"\", \n                          paste0(getwd(),\"/cons\")\n                          ), \"data/20250529_original_data/\")\n\n#matches a string that contains _enc.\nSISTRAT23_c14&lt;-list.files(path=toString(dir_c1_oct), pattern=\"_enc\")\n#discard other agreements\nSISTRAT23_c14 &lt;- SISTRAT23_c14[!startsWith(SISTRAT23_c14, \"c\")]\n#matches a string that contains _enc.\nSISTRAT23_c14_25&lt;-list.files(path=toString(dir_c1_oct_25), pattern=\"_enc\")\n#discard other agreements\nSISTRAT23_c14_25 &lt;- SISTRAT23_c14_25[grepl(\"c1\", SISTRAT23_c14_25)]\n\n\npath_c1_25&lt;- \ncbind.data.frame(\n  path= c(paste0(dir_c1_oct, SISTRAT23_c14),paste0(dir_c1_oct_25, SISTRAT23_c14_25)))\npath_c1_25$name&lt;- \n   sub(\n    \".*[/\\\\\\\\]([0-9]{4}).*?_dup([12]?)(?:_.*)?\\\\.csv$\",\n    \"\\\\1\\\\2\",\n    path_c1_25$path,\n    perl = TRUE\n  )\nrename_legacy &lt;- function(df) {\n  # Define the rename mapping\n  rename_map &lt;- c(\n    codigo_identificacion          = \"codigo_identificaci_afn\",\n    regiondel_centro               = \"regi_afndel_centro\",\n    pa_a_s_nacimiento              = \"pa_afs_nacimiento\",\n    numerode_hijos                 = \"n_afomerode_hijos\",\n    numerode_hijos_ingreso_tratamie = \"n_afomerode_hijos_ingreso_tratami\",\n    setratadeunamujerembarazad     = \"a_setratadeunamujerembaraza\",\n    escolaridadultimoanocursado    = \"escolaridad_afoltimoa_afocursad\",\n    categor_a_a_ocupacional        = \"categor_afa_ocupacional\",\n    con_quien_vive                 = \"con_qui_afn_vive\",\n    otras_sustanciasno1            = \"otras_sustanciasn_a_o1\",\n    otras_sustanciasno2            = \"otras_sustanciasn_a_o2\",\n    otras_sustanciasno3            = \"otras_sustanciasn_a_o3\",\n    va_a_administracion_sustancia_pr = \"v_afa_administraci_afn_sustancia\",\n    diagnostico_trs_consumo_sustanc = \"diagn_afstico_trs_consumo_sustan\",\n    diagnostico_trs_psiquiatrico_ds = \"diagn_afstico_trs_psiqui_aftrico\",\n    diagnostico_trs_psiquiatrico_su = \"at\",\n    diagnostico_trs_psiquiatrico   = \"diagn_afstico_trs_psiqui_aftric\",\n    diagnostico_trs_psiquiatrico_ci = \"ay\",\n    diagnostico_trs_fa_sico        = \"diagn_afstico_trs_f_afsico\",\n    otros_problemasde_atencionde_s = \"otros_problemasde_atenci_afnde\",\n    tipo_centro_derivacion         = \"tipo_centro_derivaci_afn\",\n    evaluaciondel_proceso_terapeuti = \"evaluaci_afndel_proceso_terap_afu\",\n    evaluacional_egreso_respectoal = \"evaluaci_afnal_egreso_respectoa\",\n    evaluacional_egreso_respectoa  = \"bu\",\n    evaluacional_egreso_respecto_re = \"evaluaci_afnal_egreso_respecto_r\",\n    evaluacional_egreso_respecto_sa = \"evaluaci_afnal_egreso_respecto_s\",\n    evaluacional_egreso_respecto_tr = \"evaluaci_afnal_egreso_respecto_t\",\n    diagnostico_trastorno_psiquiatri = \"diagn_afstico_trastorno_psiqui_aft\",\n    orientacion_sexual             = \"orientaci_afn_sexual\",\n    opciondiscapacidad             = \"opci_afndiscapacidad\"\n  )\n  \n  # Filter to only existing columns\n  existing_cols &lt;- intersect(rename_map, names(df))\n  rename_existing &lt;- rename_map[rename_map %in% existing_cols]\n  \n  # Apply rename only for existing columns\n  if(length(rename_existing) &gt; 0) {\n    df &lt;- df|&gt; dplyr::rename(!!!setNames(rename_existing, names(rename_existing)))\n  }\n  \n  return(df)\n}\nfor (i in 1:nrow(path_c1_25)) {\n  #Define cada unidad con el nombre de la lista por posición\n  x&lt;-path_c1_25$name[i]\n\n  #Leer la base de datos\n  dataset&lt;- \n  readr::read_delim(path_c1_25$path[i],\n                    na = c(\"\", \"NA\",\"null\"),\n                    locale = locale(encoding = \"windows-1252\"),\n                    guess_max = min(1e5, Inf), \n                    trim_ws=T,\n                    skip=0)\n  \n  colnames(dataset) &lt;- sapply(names(dataset), convert_chars)\n\n  dataset|&gt;\n    #rename_with(., ~ gsub(\"'\", \"\", iconv(.x, from = \"UTF-8\", to='ASCII//TRANSLIT')))|&gt; \n    #Cambiar caracteres erróneos\n    rename_with(~ stringr::str_replace_all(.x, c(\"\\\\u009c\"=\"u\",\n                                                 \"\\\\u0097\"=\"o\",\n                                                 \"\\\\u0087\"=\"a\",\n                                                 \"\\\\u0092\"=\"i\",\n                                                 \"\\\\u0096\"=\"n\")))|&gt;\n    janitor::clean_names()|&gt; \n    as.data.frame()|&gt; \n    dplyr::rename(\"HASH_KEY\"=\"hashkey\")|&gt; \n    dplyr::select(HASH_KEY, everything())|&gt; \n    janitor::clean_names()|&gt; \n    rename_legacy()|&gt;\n    (\\(df) assign(paste0(\"OCTSISTRAT_c1_\", x), df, envir = .GlobalEnv))()\n}\n\n#Erase datasets\n#rm(list = ls()[grepl(\"OCTSISTRAT_c1_\", ls())])\n\n#MERGE DATABASES\nCONS_C1_2010_24_sub&lt;- ls()[grepl(\"OCTSISTRAT_c1_\",ls())]\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Check availability of variables in multiple datasets\")\n# Create an empty list to store column names\ncolumn_list &lt;- list()\n# Iterare in each database, extract column names and store it in the list\nfor (dataset_name in CONS_C1_2010_24_sub) {\n  # getDB\n  dataset &lt;- get(dataset_name)\n  # Obtain column names\n  cols &lt;- colnames(dataset)\n  # Store in list\n  column_list[[dataset_name]] &lt;- cols\n}\n# Get a unique vector of column names \nall_columns &lt;- unique(unlist(column_list))\n# Create a DB w/ columns as rows and DBs as columns\npresence_matrix &lt;- data.frame(Column_Name = all_columns)\n# Fill with X whether present in a DB\nfor (dataset_name in CONS_C1_2010_24_sub) {\n  presence_matrix[[dataset_name]] &lt;- ifelse(presence_matrix$Column_Name %in% column_list[[dataset_name]], \"X\", \"\")\n}\n#sort by original order\npresence_matrix$Column_Name &lt;- factor(presence_matrix$Column_Name, levels = all_columns)\n# Sort by column name\npresence_matrix &lt;- presence_matrix|&gt;\n  dplyr::arrange(Column_Name)\n\ncolnames(presence_matrix) &lt;- gsub(\"OCTSISTRAT_c1\", \"c1\", colnames(presence_matrix))\n\n\npresence_matrix|&gt;\n  knitr::kable(\"markdown\", caption = \"Presencia de columnas en cada base de datos\")\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Check availability of variables in multiple datasets\")\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Merge C1 dataset\")\n\nSISTRAT23_c1_2010_2024= data.table::rbindlist(mget(CONS_C1_2010_24_sub), idcol=\"TABLE\", fill=T)|&gt;\n  dplyr::mutate(TABLE = str_extract(TABLE, \"(?&lt;=c1_)\\\\d+\"))|&gt; #distinct(TABLE)\n  dplyr::mutate(TABLE_rec = sub(\"^(\\\\d{4}).*dup(\\\\d*)?.*\", \"\\\\1\\\\2\", TABLE))|&gt;\n  dplyr::select(TABLE, hash_key, everything())\n\nrm(list = ls()[grepl(\"OCTSISTRAT_c1_\", ls())])\n\n\n\nPresencia de columnas en cada base de datos\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn_Name\nc1_2010\nc1_2011\nc1_2012\nc1_2013\nc1_20141\nc1_20142\nc1_20151\nc1_20152\nc1_20161\nc1_20162\nc1_20171\nc1_20172\nc1_20181\nc1_20182\nc1_2019\nc1_20191\nc1_20192\nc1_2020\nc1_20211\nc1_20212\nc1_20221\nc1_20222\nc1_20231\nc1_20232\nc1_20241\nc1_20242\n\n\n\n\nhash_key\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncodigo_identificacion\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnombre_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipo_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nregiondel_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nserviciode_salud\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipode_programa\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipode_plan\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsenda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiasen_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nn_mesesen_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiasen_senda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nn_mesesen_senda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsexo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nedad\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnombre_usuario\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncomuna_residencia\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\norigende_ingreso\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\npa_a_s_nacimiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnacionalidad\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\netnia\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nestado_conyugal\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnumerode_hijos\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnumerode_hijos_ingreso_tratamie\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nparentescoconel_jefede_hogar\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnumerode_tratamientos_anteriore\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_ultimo_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsustanciade_inicio\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nedad_inicio_consumo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsetratadeunamujerembarazad\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nescolaridadultimoanocursado\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncondicion_ocupacional\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncategor_a_a_ocupacional\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nrubro_trabaja\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncon_quien_vive\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipodevivienda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntenenciadelavivienda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsustancia_principal\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\notras_sustanciasno1\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\notras_sustanciasno2\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\notras_sustanciasno3\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfrecuenciade_consumo_sustancia\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nedad_inicio_sustancia_principal\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nva_a_administracion_sustancia_pr\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_consumo_sustanc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_ds\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_su\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nav\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\naw\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nax\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_ci\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\naz\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nba\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbb\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbd\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_fa_sico\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\notros_problemasde_atencionde_s\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncompromiso_biopsicosocial\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnosticoglobaldenecesidade\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnosticodenecesidadesdein\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbj\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbk\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_ingresoa_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_ingresoa_convenio_senda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nusuariode_tribunales_tratamien\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nconsentimiento_informado\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_egresode_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nmotivode_egreso\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipo_centro_derivacion\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluaciondel_proceso_terapeuti\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacional_egreso_respectoal\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacional_egreso_respectoa\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacional_egreso_respecto_re\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nbw\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacional_egreso_respecto_sa\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nby\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacional_egreso_respecto_tr\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiagnostico_trastorno_psiquiatri\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncb\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncd\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nce\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntienemenoresdeedadacargo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nmotivodeegreso_alta_administra\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nconsorcio\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ni_dcentro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nhaestadoembarazadaegreso\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nidentidaddegenero\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ndiscapacidad\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\norientacion_sexual\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nopciondiscapacidad\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nservicios_basicos\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nlaboral_ingresos\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nperso_dormitorio_vivienda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nprecariedad_vivienda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nct\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\n\n\n\n\n\n\nClean C1 Oct 2023\nNow, we apply to every column and their contents, using rpolars.\n\n\n\nCode\nfix_encoding &lt;- function(x) {\n  if (is.character(x)) {\n    x &lt;- str_replace_all(x, \"ÃƒÂ³\", \"ó\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ¡\", \"á\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ©\", \"é\")\n    x &lt;- str_replace_all(x, \"ÃƒÂº\", \"ú\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ±\", \"ñ\")\n    x &lt;- str_replace_all(x, \"Ãƒâ€˜\", \"Ñ\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ\", \"Á\")\n    x &lt;- str_replace_all(x, \"Ã‚Âº\", \"º\")\n    x &lt;- str_replace_all(x, \"Ã‚Â°\", \"°\")\n    x &lt;- str_replace_all(x, \"Ã‚Âª\", \"ª\")\n    x &lt;- str_replace_all(x, \"Ã‚Â¡\", \"¡\")\n    x &lt;- str_replace_all(x, \"Ã‚Â¿\", \"¿\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ\", \"í\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ­\", \"í\")\n    x &lt;- str_replace_all(x, \"Ãƒâ€œ\", \"Ó\")\n    x &lt;- str_replace_all(x, \"Ãƒâ€š\", \"Ê\")\n    x &lt;- str_replace_all(x, \"Ãƒâ€\", \"É\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ¼\", \"ü\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ¯\", \"ï\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ¶\", \"ö\")\n    x &lt;- str_replace_all(x, \"Ã‚Â«\", \"«\")\n    x &lt;- str_replace_all(x, \"Ã‚Â»\", \"»\")\n    x &lt;- str_replace_all(x, \"Ãƒâ€¡\", \"Ç\")\n    x &lt;- str_replace_all(x, \"ÃƒÂ§\", \"ç\")\n    x &lt;- str_replace_all(x, \"Ã‚Â\", \"\")\n    x &lt;- str_replace_all(x, \"Ãƒ\", \"\")\n    x &lt;- str_replace_all(x, \"\\u00AD\", \"\")\n    x &lt;- str_replace_all(x, \"\\u00C2\\u00AD\", \"\")\n    x &lt;- str_replace_all(x, \"\\u00C2\", \"\")\n    x &lt;- str_replace_all(x, \"VIÁ'A\", \"VIÑA\")\n    x &lt;- str_replace_all(x, \"RELONCAVÁ\\u008d\", \"RELONCAVI\")\n    x &lt;- str_replace_all(x, \"MarÁa\", \"María\")\n    x &lt;- str_replace_all(x, \"Á'UBLE\", \"ÑUBLE\")\n    x &lt;- str_replace_all(x, \"VÁnculos\", \"Vínculos\")#x &lt;- str_replace_all(x, \"CONCEPCIÁ\"N\", \"CONCEPCIÓN\")\n    x &lt;- str_replace_all(x,'CONCEPCIÁ\\“N', \"CONCEPCIÓN\")    \n    x &lt;- str_replace_all(x, \"AYSÁ‰N\", \"AYSÉN\")\n    x &lt;- str_replace_all(x, \"MÁnimo\", \"Mínimo\")\n    x &lt;- str_replace_all(x, \"M\\\\?mo\", \"Mínimo\")\n    x &lt;- str_replace_all(x, \"ClÁnica\", \"Clínica\")\n    x &lt;- str_replace_all(x, \"Prisionizaci\\\\?\", \"Prisionalización\")\n    x &lt;- str_replace_all(x, \"Explotaci\\\\?omercial\", \"Explotación comercial\")\n    x &lt;- str_replace_all(x, \"PatologÁa\", \"Patología\")\n    x &lt;- str_replace_all(x, \"CardiopatÁas\", \"Cardiopatías\")\n    x &lt;- str_replace_all(x, \"especÁfico\", \"específico\")\n    x &lt;- str_replace_all(x, \"esquizotÁpico\", \"esquizotípico\")\n    x &lt;- str_replace_all(x, \"TricotilomanÁa\", \"Tricotilomanía\")\n    x &lt;- str_replace_all(x, \"hipomanÁaco\", \"hipomaníaco\")\n    x &lt;- str_replace_all(x, \"lÁmite\", \"límite\")\n    x &lt;- str_replace_all(x, \"manÁaco\", \"maníaco\")\n    x &lt;- str_replace_all(x, \"Á\\u0081nimo\", \"Ánimo\")\n    x &lt;- str_replace_all(x, \"CleptomanÁa\", \"Cleptomanía\")\n    x &lt;- str_replace_all(x, \"HipocondrÁa\", \"Hipocondría\")\n    x &lt;- str_replace_all(x, \"RAÁ\\u008dCES\", \"RAÍCES\")\n    x &lt;- str_replace_all(x, \"RAÁ\\\\u008dCES\", \"RAÍCES\")\n    x &lt;- str_replace_all(x, \"CuracavÁ\", \"Curacaví\")\n    x &lt;- str_replace_all(x, \"raÁces\", \"raíces\")\n    x &lt;- str_replace_all(x, \"TERAPÁ‰UTICA\", \"TERAPÉUTICA\")\n    x &lt;- str_replace_all(x, \"RaÁces\", \"Raíces\")\n    x &lt;- str_replace_all(x, \"\\\\?BLE\", \"ÑUBLE\")\n    x &lt;- str_replace_all(x, \"BÁo-BÁo\", \"Bío-Bío\")\n    x &lt;- str_replace_all(x, \"IBA\\\\?S\", \"IBAÑEZ\")\n    x &lt;- str_replace_all(x, \"ReloncavÁ\", \"Reloncaví\")\n    x &lt;- str_replace_all(x, \"ValparaÁso\", \"Valparaíso\")\n    x &lt;- str_replace_all(x, \"AraucanÁa \", \"Araucanía\")\n    x &lt;- str_replace_all(x, \"Á'uble\", \"Ñuble\")\n    x &lt;- str_replace_all(x, \"EspecÁfico\", \"Específico\")\n    x &lt;- str_replace_all(x, \"VI\\\\? DEL MAR\", \"VIÑA DEL MAR\")\n    x &lt;- str_replace_all(x, \"DO\\\\?HUE\", \"DOÑIHUE\")\n    x &lt;- str_replace_all(x, \"HUALA\\\\?\", \"HUALAÑÉ\")\n    x &lt;- str_replace_all(x, \"\\\\?qu\\\\?\", \"ÑIQUÉN\")\n    x &lt;- str_replace_all(x, \"CHA\\\\?RAL\", \"CHAÑARAL\")\n    x &lt;- str_replace_all(x, \"OLLAG\\\\?\", \"OLLAGÜE\")\n    x &lt;- str_replace_all(x, \"VICU\\\\?\", \"VICUÑA\")\n    x &lt;- str_replace_all(x, \"CA\\\\?TE\", \"CAÑETE\")\n    x &lt;- str_replace_all(x, \"\\\\?\\\\?A\", \"ÑUÑOA\")\n    x &lt;- str_replace_all(x, \"PolicÁa\", \"Policía\")\n    x &lt;- str_replace_all(x, \"GarantÁa\", \"Garantía\")\n    x &lt;- str_replace_all(x, \"fiscalÁa\", \"fiscalía\")\n    x &lt;- str_replace_all(x, \"HaitÁ\", \"Haití\")\n    x &lt;- str_replace_all(x, \"HungrÁa\", \"Hungría\")\n    x &lt;- str_replace_all(x, \"PaÁses Bajos\", \"Países Bajos\")\n    x &lt;- str_replace_all(x, \"Atacame\\\\?\", \"Atacameño\")\n    x &lt;- str_replace_all(x, \"Y\\\\?na\", \"Yámana\")\n    x &lt;- str_replace_all(x, \"Y\\\\?gan\", \"Yagán\")\n    x &lt;- str_replace_all(x, \"Hipn\\\\?os\", \"Hipnóticos\")\n    x &lt;- str_replace_all(x, \"Hero\\\\?\", \"Heroína\")\n    x &lt;- str_replace_all(x, \"code\\\\?\", \"codeína\")\n    x &lt;- str_replace_all(x, \"Analg\\\\?cos\", \"Analgésicos\")\n    x &lt;- str_replace_all(x, \"barbit\\\\?os\", \"barbitúricos\")\n    x &lt;- str_replace_all(x, \"Alucin\\\\?os\", \"Alucinógenos\")\n    x &lt;- str_replace_all(x, \"ãƒâ³n\", \"ón\")\n    x &lt;- str_replace_all(x, \"ãƒâ©n\", \"én\")\n    x &lt;- str_replace_all(x, \"ãƒâº\", \"ú\")\n    x &lt;- str_replace_all(x, \"ãƒâºa\", \"úa\")\n    x &lt;- str_replace_all(x, \"ãƒâos\", \"íos\")\n    x &lt;- str_replace_all(x, \"ãƒâuble\", \"Ñuble\")\n    x &lt;- str_replace_all(x, \"ãƒâ³n general\", \"ón general\")\n    x &lt;- str_replace_all(x, \"ãƒâ\", \"í\")\n    x &lt;- str_replace_all(x, \"ãƒâ³n casa\", \"ón casa\")\n    x &lt;- str_replace_all(x, \"ãƒârbara\", \"árbara\")\n    x &lt;- str_replace_all(x, \"nãƒâ\", \"ñ\")\n    x &lt;- str_replace_all(x, \"raãƒâces\", \"raíces\")\n    x &lt;- str_replace_all(x, \"bãƒâsico\", \"básico\")\n    x &lt;- str_replace_all(x, \"ãƒâ©utico\", \"éutico\")\n    x &lt;- str_replace_all(x, \"vãƒânculos\", \"vínculos\")\n    x &lt;- str_replace_all(x, \"marãƒâa\", \"maría\")\n    x &lt;- str_replace_all(x, \"inãƒâ©s\", \"inés\")\n    x &lt;- str_replace_all(x, \"raí\\\\u008dces\", \"raíces\")\n    x &lt;- str_replace_all(x, \"chiloí©\", \"chiloé\")\n    x &lt;- str_replace_all(x, \"terapí©utico\", \"terapéutico\")\n    x &lt;- str_replace_all(x, \"bísico\", \"básico\")\n    x &lt;- str_replace_all(x, \"peí±ablanca\", \"peñablanca\")\n    x &lt;- str_replace_all(x, \"iní©s\", \"inés\")\n  }\n  return(x)\n}\n\n#get the columns with characters\nchar_cols &lt;- names(which(sapply(SISTRAT23_c1_2010_2022, is.character)))\n\n# Apply the function to columns in character format\nSISTRAT23_c1_2010_2024 &lt;- SISTRAT23_c1_2010_2024 |&gt;\n  mutate(across(.cols = all_of(char_cols), .fns = fix_encoding))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column\")\n\n# Obtain unique values per column\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    SISTRAT23_c1_2010_2022 |&gt;\n      select(all_of(col_name)) |&gt;\n      distinct() |&gt;\n      pull()\n  }),\n  char_cols\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\nlibrary(tidytable)\n\n# Create a function to apply all replacements to a single column\napply_sequential_replacements &lt;- function(x) {\n  x &lt;- str_replace_all(x, \"\\u00AD\", \"\")\n  x &lt;- str_replace_all(x, \"\\u00C2\\u00AD\", \"\")\n  x &lt;- str_replace_all(x, \"\\u00C2\", \"\")\n  x &lt;- str_replace_all(x, \"RÁo Negro\", \"Río Negro\")\n  x &lt;- str_replace_all(x, \"BÁo-BÁo\", \"Bío-Bío\")\n  x &lt;- str_replace_all(x, \"PE\\\\?LOLEN\", \"PEÑALOLÉN\")\n  x &lt;- str_replace_all(x, \"PE\\\\?FLOR\", \"PEÑAFLOR\")\n  x &lt;- str_replace_all(x, \"SAN GREGORIO DE \\\\?QUEN\", \"SAN GREGORIO DE ÑIQUÉN\")\n  x &lt;- str_replace_all(x, \"\\\\?o nitroso\", \"óxido nitroso\")\n  x &lt;- str_replace_all(x, \"Coca\\\\?\", \"Cocaína\")\n  x &lt;- str_replace_all(x, \"Nunca estud¡\", \"Nunca estudió\")\n  x &lt;- str_replace_all(x, \"T\\\\?ica Comercial/Industrial/Normalista\", \"Técnica Comercial/Industrial/Normalista\")\n  x &lt;- str_replace_all(x, \"Profesional \\\\(4 o m\\\\?a\\\\? incompleta\", \"Profesional (4 o más incompleta)\")\n  x &lt;- str_replace_all(x, \"Profesional \\\\(4 o m\\\\?a\\\\? completa\", \"Profesional (4 o más completa)\")\n  x &lt;- str_replace_all(x, \"T\\\\?ica profesional˜\", \"Técnica profesional\")\n  x &lt;- str_replace_all(x, \"T\\\\?ico superior \\\\(1-3 a\\\\? completa\", \"Técnico superior (1-3 años completa)\")\n  x &lt;- str_replace_all(x, \"Educaci\\\\?\\\\?ca\", \"Educación básica\")\n  x &lt;- str_replace_all(x, \"T\\\\?ico superior \\\\(1-3 a\\\\? incompleta\", \"Técnico superior (1-3 años incompleta)\")\n  x &lt;- str_replace_all(x, \"cientÁficos\", \"científicos\")\n  x &lt;- str_replace_all(x, \"Ášnicamente\", \"Únicamente\")\n  x &lt;- str_replace_all(x, \"Hospeder\\\\?\", \"Hospedería\")\n  x &lt;- str_replace_all(x, \"Residencial, pensi\\\\?hostal\", \"Residencial, pensión, hostal\")\n  x &lt;- str_replace_all(x, \"Ocupaci\\\\?rregular\", \"Ocupación irregular\")\n  x &lt;- str_replace_all(x, \"CocaÁna\", \"Cocaína\")\n  x &lt;- str_replace_all(x, \"HeroÁna\", \"Heroína\")\n  x &lt;- str_replace_all(x, \"codeÁna\", \"codeína\")\n  x &lt;- str_replace_all(x, \"sintomÁ¡tico\", \"sintomático\")\n  x &lt;- str_replace_all(x, \"disfunciÁ³n\", \"disfunción\")\n  x &lt;- str_replace_all(x, \"lesiÁ³n\", \"lesión\")\n  x &lt;- str_replace_all(x, \"dÁas\", \"días\")\n  x &lt;- str_replace_all(x, \"orientaciÁ³n\", \"orientación\")\n  x &lt;- str_replace_all(x, \"especificaciÁ³n\", \"especificación\")\n  x &lt;- str_replace_all(x, \"\\\\tCODESAM\", \"CODESAM\")\n  x &lt;- str_replace_all(x, \"fÁsico\", \"físico\")\n  x &lt;- str_replace_all(x, \"PsÁquica\", \"Psíquica\")\n  x &lt;- str_replace_all(x, \"estÁ¡ndar\", \"estándar\")\n  return(x)\n}\n\n# Apply the function to each character column\nSISTRAT23_c1_2010_2024 &lt;- SISTRAT23_c1_2010_2024 |&gt;\n  as_tidytable() |&gt;  # Convert to tidytable if it isn't already\n  mutate(across(all_of(char_cols), apply_replacements))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\n# Obtain unique values per column\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    SISTRAT23_c1_2010_2024 |&gt;\n      select(all_of(col_name)) |&gt;\n      distinct() |&gt;\n      pull()\n  }),\n  char_cols\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Standardize values (to lower, correct tildes, etc.)\")\n\n# Function to standardize text\nstandardize_text &lt;- function(x) {\n  # Replace NA with empty string to avoid errors\n  x &lt;- ifelse(is.na(x), \"\", x)\n  \n  # Convert to lowercase\n  x &lt;- tolower(x)\n  \n  # Trim leading and trailing spaces\n  x &lt;- stringr::str_trim(x)\n  \n  # Replace multiple spaces with a single space\n  x &lt;- stringr::str_replace_all(x, \"\\\\s+\", \" \")\n  \n  # Remove periods at the end\n  x &lt;- stringr::str_replace_all(x, \"\\\\s*\\\\.\\\\s*$\", \"\")\n  \n  # Replace accented characters\n  accent_replacements &lt;- c(\n    \"á\" = \"a\", \"é\" = \"e\", \"í\" = \"i\", \"ó\" = \"o\", \"ú\" = \"u\",\n    \"Á\" = \"a\", \"É\" = \"e\", \"Í\" = \"i\", \"Ó\" = \"o\", \"Ú\" = \"u\",\n    \"ñ\" = \"n\", \"Ñ\" = \"n\"\n  )\n  \n  for (accent in names(accent_replacements)) {\n    x &lt;- gsub(accent, accent_replacements[accent], x, fixed = TRUE)\n  }\n  \n  return(x)\n}\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n# Apply to all character columns\nSISTRAT23_c1_2010_2024_df &lt;- SISTRAT23_c1_2010_2024|&gt;\n  mutate(across(all_of(char_cols), standardize_text))\n\n\n\n\n\n\nCode\n# data frame to polars DataFrame \n#dataset_pl &lt;- polars::pl$DataFrame(SISTRAT23_c1_2010_2022)\nSISTRAT23_c1_2010_2024_pl &lt;- as_polars_df(SISTRAT23_c1_2010_2024)\n\n#get the columns with characters\nchar_cols &lt;- names(which(sapply(SISTRAT23_c1_2010_2024, is.character)))\nchar_cols&lt;-\nsetdiff(char_cols, c(\"TABLE\", \"hash_key\", \"TABLE_rec\", \"codigo_identificacion\"))\n\n#apply replacements for every column wiht characters\nfor (col in char_cols) {\n  SISTRAT23_c1_2010_2024_pl &lt;- SISTRAT23_c1_2010_2024_pl$with_columns(\n    pl$col(col)$\n      str$replace(\"ÃƒÂ³\", \"ó\")$\n      str$replace(\"ÃƒÂ¡\", \"á\")$\n      str$replace(\"ÃƒÂ©\", \"é\")$\n      str$replace(\"ÃƒÂº\", \"ú\")$\n      str$replace(\"ÃƒÂ±\", \"ñ\")$\n      str$replace(\"Ãƒâ€˜\", \"Ñ\")$\n      str$replace(\"ÃƒÂ\", \"Á\")$\n      str$replace(\"ÃƒÂ¡\", \"á\")$\n      str$replace(\"ÃƒÂ©\", \"é\")$\n      str$replace(\"ÃƒÂº\", \"ú\")$\n      str$replace(\"ÃƒÂ±\", \"ñ\")$\n      str$replace(\"Ãƒâ€˜\", \"Ñ\")$\n      str$replace(\"ÃƒÂ\", \"Á\")$\n      str$replace(\"Ã‚Âº\", \"º\")$\n      str$replace(\"Ã‚Â°\", \"°\")$\n      str$replace(\"Ã‚Âª\", \"ª\")$\n      str$replace(\"Ã‚Â¡\", \"¡\")$\n      str$replace(\"Ã‚Â¿\", \"¿\")$\n      str$replace(\"ÃƒÂ\", \"í\")$\n      str$replace(\"ÃƒÂ­\", \"í\")$\n      str$replace(\"Ãƒâ€œ\", \"Ó\")$\n      str$replace(\"Ãƒâ€š\", \"Ê\")$\n      str$replace(\"Ãƒâ€\", \"É\")$\n      str$replace(\"ÃƒÂ¼\", \"ü\")$\n      str$replace(\"ÃƒÂ¯\", \"ï\")$\n      str$replace(\"ÃƒÂ¶\", \"ö\")$\n      str$replace(\"Ã‚Â«\", \"«\")$\n      str$replace(\"Ã‚Â»\", \"»\")$\n      str$replace(\"Ãƒâ€¡\", \"Ç\")$\n      str$replace(\"ÃƒÂ§\", \"ç\")$\n      str$replace(\"Ã‚Â\", \"\")$\n      str$replace(\"Ãƒ\", \"\")$\n      str$replace(\"\\u00AD\", \"\")$\n      str$replace(\"\\u00C2\\u00AD\", \"\")$\n      str$replace(\"\\u00C2\", \"\")$\n      str$replace(\"VIÁ‘A\", \"VIÑA\")$\n      str$replace(\"RELONCAVÁ\\u008d\", \"RELONCAVI\")$\n      str$replace(\"MarÁa\", \"María\")$\n      str$replace(\"Á‘UBLE\", \"ÑUBLE\")$\n      str$replace(\"VÁnculos\", \"Vínculos\")$\n      str$replace(\"CONCEPCIÁ“N\", \"CONCEPCIÓN\")$\n      str$replace(\"AYSÁ‰N\", \"AYSÉN\")$\n      str$replace(\"MÁnimo\", \"Mínimo\")$\n      str$replace(\"M\\\\?mo\", \"Mínimo\")$\n      str$replace(\"ClÁnica\", \"Clínica\")$\n      str$replace(\"Prisionizaci\\\\?\", \"Prisionalización\")$\n      str$replace(\"Explotaci\\\\?omercial\", \"Explotación comercial\")$\n      str$replace(\"PatologÁa\", \"Patología\")$\n      str$replace(\"CardiopatÁas\", \"Cardiopatías\")$\n      str$replace(\"especÁfico\", \"específico\")$\n      str$replace(\"esquizotÁpico\", \"esquizotípico\")$\n      str$replace(\"TricotilomanÁa\", \"Tricotilomanía\")$\n      str$replace(\"hipomanÁaco\", \"hipomaníaco\")$\n      str$replace(\"lÁmite\", \"límite\")$\n      str$replace(\"manÁaco\", \"maníaco\")$\n      str$replace(\"Á\\u0081nimo\", \"Ánimo\")$\n      str$replace(\"CleptomanÁa\", \"Cleptomanía\")$\n      str$replace(\"HipocondrÁa\", \"Hipocondría\")$\n      str$replace(\"RAÁ\\u008dCES\", \"RAÍCES\")$\n      str$replace(\"RAÁ\\\\u008dCES\", \"RAÍCES\")$\n      str$replace(\"CuracavÁ\", \"Curacaví\")$\n      str$replace(\"raÁces\", \"raíces\")$\n      str$replace(\"TERAPÁ‰UTICA\", \"TERAPÉUTICA\")$\n      str$replace(\"RaÁces\", \"Raíces\")$\n      str$replace(\"\\\\?BLE\", \"ÑUBLE\")$\n      str$replace(\"BÁo-BÁo\", \"Bío-Bío\")$\n      str$replace(\"IBA\\\\?S\", \"IBAÑEZ\")$\n      str$replace(\"ReloncavÁ\", \"Reloncaví\")$\n      str$replace(\"ValparaÁso\", \"Valparaíso\")$\n      str$replace(\"AraucanÁa \", \"Araucanía\")$\n      str$replace(\"Á‘uble\", \"Ñuble\")$\n      str$replace(\"EspecÁfico\", \"Específico\")$\n      str$replace(\"VI\\\\? DEL MAR\", \"VIÑA DEL MAR\")$\n      str$replace(\"DO\\\\?HUE\", \"DOÑIHUE\")$\n      str$replace(\"HUALA\\\\?\", \"HUALAÑÉ\")$\n      str$replace(\"\\\\?qu\\\\?\", \"ÑIQUÉN\")$\n      str$replace(\"CHA\\\\?RAL\", \"CHAÑARAL\")$\n      str$replace(\"OLLAG\\\\?\", \"OLLAGÜE\")$\n      str$replace(\"VICU\\\\?\", \"VICUÑA\")$\n      str$replace(\"CA\\\\?TE\", \"CAÑETE\")$\n      str$replace(\"\\\\?\\\\?A\", \"ÑUÑOA\")$\n      str$replace(\"PolicÁa\", \"Policía\")$\n      str$replace(\"GarantÁa\", \"Garantía\")$\n      str$replace(\"fiscalÁa\", \"fiscalía\")$\n      str$replace(\"HaitÁ\", \"Haití\")$\n      str$replace(\"HungrÁa\", \"Hungría\")$\n      str$replace(\"PaÁses Bajos\", \"Países Bajos\")$\n      str$replace(\"Atacame\\\\?\", \"Atacameño\")$\n      str$replace(\"Y\\\\?na\", \"Yámana\")$\n      str$replace(\"Y\\\\?gan\", \"Yagán\")$\n      str$replace(\"Hipn\\\\?os\", \"Hipnóticos\")$\n      str$replace(\"Hero\\\\?\", \"Heroína\")$\n      str$replace(\"code\\\\?\", \"codeína\")$\n      str$replace(\"Analg\\\\?cos\", \"Analgésicos\")$\n      str$replace(\"barbit\\\\?os\", \"barbitúricos\")$\n      str$replace(\"Alucin\\\\?os\", \"Alucinógenos\")$\n      str$replace(\"ãƒâ³n\", \"ón\")$\n      str$replace(\"ãƒâ©n\", \"én\")$\n      str$replace(\"ãƒâº\", \"ú\")$\n      str$replace(\"ãƒâºa\", \"úa\")$\n      str$replace(\"ãƒâos\", \"íos\")$\n      str$replace(\"ãƒâuble\", \"Ñuble\")$\n      str$replace(\"ãƒâ³n general\", \"ón general\")$\n      str$replace(\"ãƒâ\", \"í\")$\n      str$replace(\"ãƒâ³n casa\", \"ón casa\")$\n      str$replace(\"ãƒârbara\", \"árbara\")$\n      str$replace(\"nãƒâ\", \"ñ\")$\n      str$replace(\"raãƒâces\", \"raíces\")$\n      str$replace(\"bãƒâsico\", \"básico\")$\n      str$replace(\"ãƒâ©utico\", \"éutico\")$\n      str$replace(\"vãƒânculos\", \"vínculos\")$\n      str$replace(\"marãƒâa\", \"maría\")$\n      str$replace(\"inãƒâ©s\", \"inés\")$\n      str$replace(\"raí\\\\u008dces\", \"raíces\")$\n      str$replace(\"chiloí©\", \"chiloé\")$\n      str$replace(\"terapí©utico\", \"terapéutico\")$\n      str$replace(\"bísico\", \"básico\")$\n      str$replace(\"peí±ablanca\", \"peñablanca\")$\n      str$replace(\"iní©s\", \"inés\")$\n      alias(col)\n  )\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column\")\n\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- SISTRAT23_c1_2010_2024_pl$\n      select(pl$col(col_name)$unique())$  # select unique values\n      to_series()$                        # convert to a polars series\n      to_r()                              # Conver to a vector of R\n    return(unique_values)\n  }),\n  char_cols  # Asignamos los nombres de las columnas a la lista\n)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Crear una lista para almacenar las expresiones de reemplazo\nexpr_list &lt;- list()\n\nfor (col in char_cols) {\n  # Create the expression with every replacement for the actual column\n  expr &lt;- pl$col(col)$\n    str$replace(\"\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\", \"\")$\n    str$replace(\"RÁo Negro\", \"Río Negro\")$\n    str$replace(\"BÁo-BÁo\", \"Bío-Bío\")$\n    str$replace(\"PE\\\\?LOLEN\", \"PEÑALOLÉN\")$\n    str$replace(\"PE\\\\?FLOR\", \"PEÑAFLOR\")$\n    str$replace(\"SAN GREGORIO DE \\\\?QUEN\", \"SAN GREGORIO DE ÑIQUÉN\")$\n    str$replace(\"\\\\?o nitroso\", \"óxido nitroso\")$\n    str$replace(\"Coca\\\\?\", \"Cocaína\")$\n    str$replace(\"Nunca estud¡\", \"Nunca estudió\")$\n    str$replace(\"T\\\\?ica Comercial/Industrial/Normalista\", \"Técnica Comercial/Industrial/Normalista\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?a\\\\? incompleta\", \"Profesional (4 o más incompleta)\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?a\\\\? completa\", \"Profesional (4 o más completa)\")$\n    str$replace(\"T\\\\?ica profesional˜\", \"Técnica profesional\")$\n    str$replace(\"T\\\\?ico superior \\\\(1-3 a\\\\? completa\", \"Técnico superior (1-3 años completa)\")$\n    str$replace(\"Educaci\\\\?\\\\?ca\", \"Educación básica\")$\n    str$replace(\"T\\\\?ico superior \\\\(1-3 a\\\\? incompleta\", \"Técnico superior (1-3 años incompleta)\")$\n    str$replace(\"cientÁficos\", \"científicos\")$\n    str$replace(\"Ášnicamente\", \"Únicamente\")$\n    str$replace(\"Hospeder\\\\?\", \"Hospedería\")$\n    str$replace(\"Residencial, pensi\\\\?hostal\", \"Residencial, pensión, hostal\")$\n    str$replace(\"Ocupaci\\\\?rregular\", \"Ocupación irregular\")$\n    str$replace(\"CocaÁna\", \"Cocaína\")$\n    str$replace(\"HeroÁna\", \"Heroína\")$\n    str$replace(\"codeÁna\", \"codeína\")$\n    str$replace(\"sintomÁ¡tico\", \"sintomático\")$\n    str$replace(\"disfunciÁ³n\", \"disfunción\")$\n    str$replace(\"lesiÁ³n\", \"lesión\")$\n    str$replace(\"dÁas\", \"días\")$\n    str$replace(\"orientaciÁ³n\", \"orientación\")$\n    str$replace(\"especificaciÁ³n\", \"especificación\")$\n    str$replace(\"\\\\tCODESAM\", \"CODESAM\")$\n    str$replace(\"fÁsico\", \"físico\")$\n    str$replace(\"PsÁquica\", \"Psíquica\")$\n    str$replace(\"estÁ¡ndar\", \"estándar\")$\n    alias(col)  # Mantain the original name of the column\n  \n  # Add the expression to the list\n  expr_list[[length(expr_list) + 1]] &lt;- expr\n}\n\n# Apply all corrections at once\nSISTRAT23_c1_2010_2024_pl &lt;- SISTRAT23_c1_2010_2024_pl$with_columns(expr_list)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- SISTRAT23_c1_2010_2024_pl$\n      select(pl$col(col_name)$unique())$  # select unique values\n      to_series()$                        # convert to a polars series\n      to_r()                              # Conver to a vector of R\n    return(unique_values)\n  }),\n  char_cols  # assign column names to the list\n)\n\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Detectar columnas de texto automáticamente\nschema &lt;- SISTRAT23_c1_2010_2024_pl$schema\n#char_cols &lt;- names(schema)[sapply(schema, function(x) x == pl$String)]\n\nexpr_list &lt;- list()\n\nfor (col in char_cols) {\n  # Create the expression with every replacement for the actual column\n  expr &lt;- pl$col(col)$\n    # Remove encoding artifacts\n    str$replace(\"\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\", \"\")$\n    str$replace(\"Á\\u008d\", \"í\")$  # Handle RÁíOS -&gt; RÍOS\n    str$replace(\"Á‰\", \"É\")$       # Handle TERAPÁ‰UTICO -&gt; TERAPÉUTICO\n\n    # Specific place names\n    str$replace(\"RÁo Negro\", \"Río Negro\")$\n    str$replace(\"BÁo-BÁo\", \"Bío-Bío\")$\n    str$replace(\"SERVICIO DE SALUD LOS RÁ\\\\u008dOS\", \"SERVICIO DE SALUD LOS RÍOS\")$\n    str$replace(\"PE\\\\?LOLEN\", \"PEÑALOLÉN\")$\n    str$replace(\"PE\\\\?ALOLEN\", \"PEÑALOLÉN\")$\n    str$replace(\"PE\\\\?FLOR\", \"PEÑAFLOR\")$\n    str$replace(\"PE\\\\?AFLOR\", \"PEÑAFLOR\")$\n    str$replace(\"\\\\?U\\\\?OA\", \"ÑUÑOA\")$\n    str$replace(\"ñU\\\\?OA\", \"ÑUÑOA\")$\n    str$replace(\"VI\\\\?A DEL MAR\", \"VIÑA DEL MAR\")$\n    str$replace(\"DO\\\\?IHUE\", \"DOÑIHUE\")$\n    str$replace(\"CHA\\\\?ARAL\", \"CHAÑARAL\")$\n    str$replace(\"IBA\\\\?EZ\", \"IBAÑEZ\")$\n    str$replace(\"HUALAÑÉE\", \"HUALAÑÉ\")$\n    str$replace(\"SAN GREGORIO DE \\\\?QUEN\", \"SAN GREGORIO DE ÑIQUÉN\")$\n    str$replace(\"\\\\?iqu\\\\?n\", \"ÑIQUÉN\")$\n    str$replace(\"\\\\?IQUEN\", \"ÑIQUÉN\")$\n    str$replace(\"VICUÑAA\", \"VICUÑA\")$\n    # Education terms\n    str$replace(\"Nunca estudi\\\\?\", \"Nunca estudió\")$\n    str$replace(\"Nunca estud¡\", \"Nunca estudió\")$\n    str$replace(\"T\\\\?cnica\", \"Técnica\")$\n    str$replace(\"T\\\\?ica\", \"Técnica\")$\n    str$replace(\"Educaci\\\\?n\", \"Educación\")$\n    str$replace(\"b\\\\?sica\", \"básica\")$\n    str$replace(\"Educaci\\\\?\\\\?ca\", \"Educación básica\")$\n    str$replace(\"T\\\\?ica Comercial/Industrial/Normalista\", \"Técnica Comercial/Industrial/Normalista\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?s\\\\?\\\\) incompleta\", \"Profesional (4 o más) incompleta\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?s\\\\?\\\\) completa\", \"Profesional (4 o más) completa\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?a\\\\?\", \"Profesional (4 o más\")$\n    str$replace(\"T\\\\?ica profesional˜\", \"Técnica profesional\")$\n    str$replace(\"T\\\\?ico superior\", \"Técnico superior\")$\n    str$replace(\"a\\\\?os\", \"años\")$\n\n    # Substances and medical terms\n    str$replace(\"\\\\?xido nitroso\", \"óxido nitroso\")$\n    str$replace(\"\\\\?o nitroso\", \"óxido nitroso\")$\n    str$replace(\"Coca\\\\?na\", \"Cocaína\")$\n    str$replace(\"Coca\\\\?\", \"Cocaína\")$\n    str$replace(\"CocaÁna\", \"Cocaína\")$\n    str$replace(\"HeroÁna\", \"Heroína\")$\n    str$replace(\"codeÁna\", \"codeína\")$\n    str$replace(\"\\\\\\\"poppers\\\\\\\"\", \"poppers\")$\n    \n    # Occupation and housing\n    str$replace(\"Ocupaci\\\\?n\", \"Ocupación\")$\n    str$replace(\"Ocupaci\\\\?rregular\", \"Ocupación irregular\")$\n    str$replace(\"pensi\\\\?n\", \"pensión\")$\n    str$replace(\"Hospeder\\\\?a\", \"Hospedería\")$\n    str$replace(\"Residencial, pensi\\\\?hostal\", \"Residencial, pensión, hostal\")$\n    \n    # Medical and technical terms\n    str$replace(\"sintomÁ¡tico\", \"sintomático\")$\n    str$replace(\"disfunciÁ³n\", \"disfunción\")$\n    str$replace(\"lesiÁ³n\", \"lesión\")$\n    str$replace(\"orientaciÁ³n\", \"orientación\")$\n    str$replace(\"especificaciÁ³n\", \"especificación\")$\n    str$replace(\"fÁsico\", \"físico\")$\n    str$replace(\"PsÁquica\", \"Psíquica\")$\n    str$replace(\"estÁ¡ndar\", \"estándar\")$\n    str$replace(\"dÁas\", \"días\")$\n    str$replace(\"cientÁficos\", \"científicos\")$\n    str$replace(\"Ášnicamente\", \"Únicamente\")$\n    \n    # Other corrections  \n    str$replace(\"Logro M\\\\?nimo\", \"Logro Mínimo\")$\n    str$replace(\"Prisionalizaciónn\", \"Prisionalización\")$  # Fix double n\n    str$replace(\"\\\\tCODESAM\", \"CODESAM\")$  # Remove tab\n    str$replace(\"m\\\\?s\", \"más\")$\n    str$replace(\"dÁa\", \"día\")$\n    str$replace(\"GonzÁ¡lez\", \"González\")$\n    alias(col)  # Maintain the original name of the column\n  \n  # Add the expression to the list\n  expr_list[[length(expr_list) + 1]] &lt;- expr\n}\n\n# Apply all corrections at once\nSISTRAT23_c1_2010_2024_pl &lt;- SISTRAT23_c1_2010_2024_pl$with_columns(expr_list)\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list2b &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- SISTRAT23_c1_2010_2024_pl$\n      select(pl$col(col_name)$unique())$  # select unique values\n      to_series()$                        # convert to a polars series\n      to_r()                              # Conver to a vector of R\n    return(unique_values)\n  }),\n  char_cols  # assign column names to the list\n)\n\n# list_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; View()\n#list_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; View()\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Standardize values (to lower, correct tildes, etc.)\")\n\n# Create a list of expressions to apply the transformations\nexpr_list &lt;- list()\n\n# Mapping of accented characters to their non-accented equivalents\naccent_replacements &lt;- list(\n  \"á\" = \"a\",\n  \"é\" = \"e\",\n  \"í\" = \"i\",\n  \"ó\" = \"o\",\n  \"ú\" = \"u\",\n  \"Á\" = \"a\",\n  \"É\" = \"e\",\n  \"Í\" = \"i\",\n  \"Ó\" = \"o\",\n  \"Ú\" = \"u\",\n  \"ñ\" = \"n\",\n  \"Ñ\" = \"n\"\n)\n\nfor (col in char_cols) {\n  # Create the transformation expressions for each column\n  expr &lt;- pl$col(col)$\n    str$to_lowercase()$  # Similar to tolower\n    str$replace_all(\"^\\\\s+|\\\\s+$\", \"\")$  # Replace leading and trailing spaces (simulating str_trim)\n    str$replace_all(\"\\\\s+\", \" \")$  # Similar to str_replace_all(\"\\\\s+\", \" \")\n    str$replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")$  # Remove periods at the end (optional: remove spaces before the period)\n    str$replace_all(\"[“”]\", \"\")$ # Remove curly double quotes “ and ” entirely\n    str$replace_all(\"´\", \"'\")$ # Replace spacing acute accent (U+00B4, ´) with ASCII apostrophe (')\n    str$replace_all(\"[äÄ]\", \"a\")$ # Normalize precomposed diaeresis letters (e.g., ü -&gt; u, Ä -&gt; a)\n    str$replace_all(\"[ëË]\", \"e\")$\n    str$replace_all(\"[ïÏ]\", \"i\")$\n    str$replace_all(\"[öÖ]\", \"o\")$\n    str$replace_all(\"[üÜ]\", \"u\")$\n    str$replace_all(\"[ÿŸ]\", \"y\")$\n    # Remove standalone diaeresis marks if they appear alone\n    str$replace_all(\"\\u00A8\", \"\")$          # spacing diaeresis ¨\n    str$replace_all(\"\\u0308\", \"\")$          # combining diaeresis  ̈\n    str$replace_all(\"\\\\bollag\\\\u00FCe\\\\b\", \"ollague\")$ # Force specific toponym fix (redundant with ü-&gt;u, but explicit)\n    # Fix common mis-encodings: \"t\\?cnico\" -&gt; \"tecnico\", \"explotaci\\?n\" -&gt; \"explotacion\"\n    str$replace_all(\"t\\\\?cnico\", \"tecnico\")$\n    str$replace_all(\"explotaci\\\\?n\", \"explotacion\")$\n\n    # Geographic names: \"ays\\?n\" -&gt; \"aysen\", \"ca\\?ete\" -&gt; \"canete\", \"?uble\" -&gt; \"nuble\", \"iba\\?es\" -&gt; \"ibanez\"\n    str$replace_all(\"ays\\\\?n\", \"aysen\")$\n    str$replace_all(\"ca\\\\?ete\", \"canete\")$\n    str$replace_all(\"\\\\?uble\", \"nuble\")$\n    str$replace_all(\"iba\\\\?es\", \"ibanez\")$\n\n    # Hallucinogens: \"alucin\\?genos\" -&gt; \"alucinogenos\"\n    str$replace_all(\"alucin\\\\?genos\", \"alucinogenos\")$\n\n    # Medical terms typos\n    str$replace_all(\"miocardiopataa\", \"miocardiopatia\")$\n    # \"terapa‰utico\" may use U+2030 (‰) or even a stray '%' depending on source\n    str$replace_all(\"terapa\\\\u2030utico\", \"terapeutico\")$\n    str$replace_all(\"terapa%utico\", \"terapeutico\")$\n    str$replace_all(\"\\\\bsandrome\\\\b\", \"sindrome\")$\n\n    # Spacing typo: \"daa \" -&gt; \"dia \" (keep trailing space as requested)\n    str$replace_all(\"daa \", \"dia \")\n    \n  # Apply accented character replacements\n  for (accent in names(accent_replacements)) {\n    expr &lt;- expr$str$replace_all(accent, accent_replacements[[accent]])\n  }\n  \n  expr &lt;- expr$alias(col)  # Retain the original column name\n  \n  # Add the expression to the list\n  expr_list[[length(expr_list) + 1]] &lt;- expr\n}\n\n# Apply all transformations at once\nSISTRAT23_c1_2010_2024_pl &lt;- SISTRAT23_c1_2010_2024_pl$with_columns(expr_list)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Get the dataframe to R\")\nSISTRAT23_c1_2010_2024_df &lt;- SISTRAT23_c1_2010_2024_pl$to_data_frame()\n\ninvisible(\"2025-03-08: corrected TABLE to get only years of retrieval\")\nSISTRAT23_c1_2010_2024_df &lt;-\nSISTRAT23_c1_2010_2024_df |&gt; tidytable::mutate(TABLE_rec3= ifelse(nchar(TABLE_rec) &lt; 5,paste0(TABLE_rec, \"0\"), as.character(TABLE_rec))) |&gt; tidytable::mutate(TABLE= as.character(round(readr::parse_number(TABLE_rec3)/10,0))) |&gt; select(-TABLE_rec3)\n\n\n\n\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n# Clean col names\npatterns &lt;- c(\"_a3\", \"i_a_\", \"_a_\", \"_ao\", \"ac_\")\nreplacements &lt;- c(\"o\", \"ia\", \"i\", \"u\", \"e\")\n\nfor (i in seq_along(patterns)) {\n  colnames(SISTRAT23_c1_2010_2024_df) &lt;- sub(patterns[i], replacements[i], colnames(SISTRAT23_c1_2010_2024_df))\n}\n\n#nombre_centro with unique id_centro#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#exploration: \n#centers with same id, distinct name\nSISTRAT23_c1_2010_2024_df[,c(\"nombre_centro\",\"i_dcentro\")]|&gt; \n  dplyr::group_by(nombre_centro,i_dcentro)|&gt; \n  dplyr::summarise(n=dplyr::n())|&gt; \n  dplyr::group_by(i_dcentro)|&gt; \n  dplyr::filter(dplyr::n()&gt;1)|&gt; \n  dplyr::arrange(i_dcentro)|&gt; \n  knitr::kable(\"markdown\", caption=\"Centers with same ID, distinct name\")\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#2025-03-08: corrected values after contrasting with MAY DB\nSISTRAT23_c1_2010_2024_df$nombre_centro &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$nombre_centro,\n                                \"cosam conchala\"=\"cosam conchali\", \"cesfam bajos de san agustan (c. de tango)\"= \"cesfam bajos de san agustin (c. de tango)\", \"cesfam juan antonio raos\"=\"cesfam juan antonio rios\", \"pab funcionarios gendarmeraa\"=\"pab funcionarios gendarmeria\")\n\nSISTRAT23_c1_2010_2024_df$serviciode_salud &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$serviciode_salud,\"araucanianorte\"=\"araucania norte\", \"araucaniasur (temuco)\"=\"araucania sur (temuco)\")\nSISTRAT23_c1_2010_2024_df$az &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$az,\"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\"=\"sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\")\nSISTRAT23_c1_2010_2024_df$bb &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$bb,\"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\"=\"sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\")\nSISTRAT23_c1_2010_2024_df$bd &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$bd,\"sandrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\"=\"sindrome amnesico organico no inducido por alcohol u otras sustancias psicotropas\")\nSISTRAT23_c1_2010_2024_df$diagnostico_trs_fa_sico &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$diagnostico_trs_fa_sico, \"cardiopatias: miocardiopataa dilatada por oh, arritmias, hta\"=\"cardiopatias: miocardiopatia dilatada por oh, arritmias, hta\")\nSISTRAT23_c1_2010_2024_df$diagnostico_trs_fa_sico &lt;- gsub(\"miocardiopataa\",\"miocardiopatia\",SISTRAT23_c1_2010_2024_df$diagnostico_trs_fa_sico)\nSISTRAT23_c1_2010_2024_df$tipo_centro_derivacion &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$tipo_centro_derivacion,\"hospital (residencial ej. corta, mediana estadaa, unidad de desintoxicacion)\"=\"hospital (residencial ej. corta, mediana estadia, unidad de desintoxicacion)\")\nSISTRAT23_c1_2010_2024_df$consorcio &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$consorcio,\n  \"centro terapa‰utico de tratamiento maria veronica verdugo urrutia e.i.r.l\"=\"centro terapeutico de tratamiento maria veronica verdugo urrutia e.i.r.l\")\n\nSISTRAT23_c1_2010_2024_df$regiondel_centro &lt;- str_replace_all(SISTRAT23_c1_2010_2024_df$regiondel_centro, c(\n  \"de \\\\?uble\" = \"de nuble\",     # Ñuble mal codificado\n  \"iba\\\\?es\"   = \"ibanez\"        # Ibáñez mal codificado\n))\n# comuna_residencia\nif (\"comuna_residencia\" %in% names(SISTRAT23_c1_2010_2024_df)) {\n  SISTRAT23_c1_2010_2024_df$comuna_residencia &lt;- gsub(\"ca\\\\?ete\", \"canete\", SISTRAT23_c1_2010_2024_df$comuna_residencia)\n}\n\n# sustanciade_inicio\nif (\"sustanciade_inicio\" %in% names(SISTRAT23_c1_2010_2024_df)) {\n  SISTRAT23_c1_2010_2024_df$sustanciade_inicio &lt;- gsub(\"otros opioides analg\\\\?sicos\", \"otros opioides analgesicos\", SISTRAT23_c1_2010_2024_df$sustanciade_inicio)\n  SISTRAT23_c1_2010_2024_df$sustanciade_inicio &lt;- gsub(\"hipn\\\\?ticos\", \"hipnoticos\", SISTRAT23_c1_2010_2024_df$sustanciade_inicio)\n  SISTRAT23_c1_2010_2024_df$sustanciade_inicio &lt;- gsub(\"otros alucin\\\\?genos\", \"otros alucinogenos\", SISTRAT23_c1_2010_2024_df$sustanciade_inicio)\n}\n\n# escolaridadultimoanocursado\nif (\"escolaridadultimoanocursado\" %in% names(SISTRAT23_c1_2010_2024_df)) {\n  SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- gsub(\"t\\\\?cnico superior \\\\(1-3 anos\\\\) completa\", \"tecnico superior (1-3 anos) completa\", SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado)\n  SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- gsub(\"t\\\\?cnico superior \\\\(1-3 anos\\\\) incompleta\", \"tecnico superior (1-3 anos) incompleta\", SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado)\n}\n\n# otros_problemasde_atencionde_s\nif (\"otros_problemasde_atencionde_s\" %in% names(SISTRAT23_c1_2010_2024_df)) {\n  SISTRAT23_c1_2010_2024_df$otros_problemasde_atencionde_s &lt;- gsub(\"explotaci\\\\?n comercial sexual infantil\", \"explotacion comercial sexual infantil\", SISTRAT23_c1_2010_2024_df$otros_problemasde_atencionde_s)\n  SISTRAT23_c1_2010_2024_df$otros_problemasde_atencionde_s &lt;- gsub(\"explotaci\\\\?n comercial sexual\", \"explotacion comercial sexual\", SISTRAT23_c1_2010_2024_df$otros_problemasde_atencionde_s)\n}\n\n# consorcio\nif (\"consorcio\" %in% names(SISTRAT23_c1_2010_2024_df)) {\n  SISTRAT23_c1_2010_2024_df$consorcio &lt;- gsub(\"ays\\\\?n\", \"aysen\", SISTRAT23_c1_2010_2024_df$consorcio)\n}\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#before 2025\n#rename with unique level nombre_centro\nSISTRAT23_c1_2010_2024_df$nombre_centro_rec &lt;- recode(SISTRAT23_c1_2010_2024_df$nombre_centro,\n  \"cadem de chillan\" = \"cosam nuble (cadem de chillan)\",\n  \"centro de tratamiento adicciones esperanza, hospital santa cruzz\" = \"centro de tratamiento adicciones esperanza, hospital santa cruz\",\n  \"CESFAM Colon\" = \"CESFAM Colón\",\n  \"comunidad terapeutica orion san bernardo (orion vespertino) pai - mpai pg\" =\"comunidad terapeutica orion san bernardo (orion vespertino)\",\n  \"cta villa alemana (cta penablanca)\" = \"cta nancy araya ruiz hospital penablanca (ex cta villa alemana -cta penablanca)\",\n  \"sociedad de profesionales salud integral ltda\"=\"sociedad de profesionales salud integral ltda (mujeres)\")\n\n#estado conyugal#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\nSISTRAT23_c1_2010_2024_df$estado_conyugal &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$estado_conyugal,\n                                \"nocontesta\"=\"no contesta\")\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#2025-03-06: corrected errors in tr.compliance and primary sub use frequency \nSISTRAT23_c1_2010_2024_df$motivode_egreso &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$motivode_egreso,\n                                \"alta admnistrativa\"=\"alta administrativa\")\nSISTRAT23_c1_2010_2024_df$frecuenciade_consumo_sustancia &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$frecuenciade_consumo_sustancia,\n                                \"menos de 1 daa - semana\"=\"menos de 1 dia - semana\")\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#2025-08-12\nSISTRAT23_c1_2010_2024_df$sustanciade_inicio &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$sustanciade_inicio,\n                                \"heroinana\"=\"heroina\",\"cocainana\"=\"cocaina\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado,\n                                \"nunca estudi\"=\"nunca estudio\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado,\n                                \"no sabe o no se aplica\"=\"no sabe o no aplica\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado,\n                                \"profesional (4 o mas incompleta)\"=\"profesional (4 o mas anos) incompleta\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado,\n                                \"profesional (4 o mas completa)\"=\"profesional (4 o mas anos) completa\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;- dplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado, \"tecnico superior (1-3 anos completa)\"=\"tecnico superior (1-3 anos) completa\")\nSISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado &lt;-\ndplyr::recode(SISTRAT23_c1_2010_2024_df$escolaridadultimoanocursado, \"tecnico superior (1-3 anos incompleta)\"=\"tecnico superior (1-3 anos) incompleta\")\n\n\nSISTRAT23_c1_2010_2024_df$nombre_centro&lt;- \ngsub(\"cruzz\",\"cruz\",SISTRAT23_c1_2010_2024_df$nombre_centro)\nSISTRAT23_c1_2010_2024_df$nombre_centro_rec&lt;- \ngsub(\"cruzz\",\"cruz\",SISTRAT23_c1_2010_2024_df$nombre_centro_rec)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nunique_values_list_post_25 &lt;- setNames(\n    lapply(setdiff(names(SISTRAT23_c1_2010_2024_df),c(\"hash_key\")), function(col_name) {\n        SISTRAT23_c1_2010_2024_df |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(SISTRAT23_c1_2010_2024_df),c(\"hash_key\"))\n)\n\nif(list_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\nif(list_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\n\n\nCenters with same ID, distinct name\n\n\n\n\n\n\n\nnombre_centro\ni_dcentro\nn\n\n\n\n\ncadem de chillan\n106\n892\n\n\ncosam nuble (cadem de chillan)\n106\n344\n\n\ncetrad (ex hospital de tome, centro superarte)\n122\n172\n\n\nhospital de tome, centro superarte\n122\n887\n\n\ncta nancy araya ruiz hospital penablanca (ex cta villa alemana -cta penablanca)\n190\n264\n\n\ncta villa alemana (cta penablanca)\n190\n641\n\n\ncentro de tratamiento adicciones esperanza, hospital santa cruz\n221\n548\n\n\ncentro de tratamiento adicciones esperanza, hospital santa cruzz\n221\n51\n\n\ncomunidad terapeutica orion san bernardo (orion vespertino)\n263\n736\n\n\ncomunidad terapeutica orion san bernardo (orion vespertino) pai - mpai pg\n263\n569\n\n\ncesfam cerro alto\n368\n343\n\n\ncesfam constitucion\n368\n55\n\n\ncosam con con\n409\n392\n\n\npai florecer cesam concon (ex cosam con con)\n409\n73\n\n\nceif norte (ex ceif puente alto y puente alto ii)\n427\n272\n\n\ncentro de salud mental ceif puente alto\n427\n808\n\n\nct orion residencial varones\n524\n258\n\n\nct residencial orion varones (nogales)\n524\n76\n\n\nsociedad de profesionales salud integral ltda\n759\n47\n\n\nsociedad de profesionales salud integral ltda (mujeres)\n759\n273\n\n\nproyecto raices pai/pr pm\n802\n110\n\n\nproyecto raices pai/pr pm temuco\n802\n185\n\n\npai pr raices - valdivia (proyecto)\n827\n47\n\n\nproyecto raices - valdivia\n827\n24\n\n\n\n\n\n\n\n\n\n\nC1 May 2023\n\n\nCode\ninvisible(\"We tryied to join previous database with actual database to identify original HASHs to join with PO records\")\n\nwdpath&lt;-\npaste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\nenvpath&lt;- if(regmatches(wdpath, regexpr(\"[A-Za-z]+\", wdpath))==\"G\"){\"G:/Mi unidad/Alvacast/SISTRAT 2023/\"}else{\"E:/Mi unidad/Alvacast/SISTRAT 2023/\"}\n\ndir_c1_pre&lt;- paste0(gsub(\"cons\",\"\",wdpath),\"data/20230825_original_data/senda/Encriptado c1/Personas tratadas C1/\")\n\n#matches a string that starts with the number 2, followed by any number of characters, followed by a space, followed by the word \"txt\".\nMAYSISTRAT23_c1&lt;-list.files(path=toString(dir_c1_pre), pattern=\"202353\")\n\n#Import datasets from May 3, 2022\nfor (i in 1:length(MAYSISTRAT23_c1)) {\n  x&lt;-MAYSISTRAT23_c1[i]\n  readr::read_delim(paste0(dir_c1_pre, x),\n                    na = c(\"\", \"NA\",\"null\"),\n                    guess_max = min(1e5, Inf))|&gt; \n    janitor::clean_names()|&gt; \n    as.data.frame()|&gt; \n    dplyr::rename(\"HASH_KEY\"=\"rut\")|&gt; \n    dplyr::select(HASH_KEY, everything())|&gt; \n    (\\(df) assign(paste0(\"MAYSISTRAT23_c1_\",stringr::str_sub(x, 1, 4)), df, envir = .GlobalEnv))()\n}\n\n\nNew names: Rows: 9401 Columns: 99 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (79): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (9): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 14906 Columns: 99 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (79): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (9): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 17506 Columns: 99 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (79): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (9): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: • DIAGNOSTICO GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL -&gt; DIAGNOSTICO   GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL...60 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO...61 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO ...62 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL...63 • DIAGNOSTICO GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL -&gt; DIAGNOSTICO   GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL...80 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO...81 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO ...82 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL...83 • serviciosBasicos -&gt; serviciosBasicos...95 • serviciosBasicos -&gt; serviciosBasicos...99\n\n\nWarning: One or more parsing issues, call problems() on your data frame for details, e.g.: dat &lt;- vroom(…) problems(dat)\n\n\nRows: 17986 Columns: 99 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (86): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (2): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nCode\n#Obtain previous databases (November 13, 2019)\nMAYSISTRAT23_c1_pre_oct19&lt;-list.files(path=toString(dir_c1_pre), pattern=\"20191113\")\n\n#Import datasets\nfor (i in 1:length(MAYSISTRAT23_c1_pre_oct19)) {\n  x&lt;-MAYSISTRAT23_c1_pre_oct19[i]\n  #2019 have a special treatment because it has another registry\n  if(grepl(\"EneOct\",x)){\n  readr::read_delim(paste0(dir_c1_pre, x),\n                    na = c(\"\", \"NA\",\"null\"),\n                    guess_max = min(1e5, Inf),\n                    skip=0)|&gt; \n    janitor::clean_names()|&gt; \n    as.data.frame()|&gt; \n    dplyr::rename_with(~ \"HASH_KEY\", (dplyr::last_col()-1))|&gt;\n    dplyr::mutate(TABLE= rep(x,))|&gt; \n    dplyr::select(TABLE, HASH_KEY, everything())|&gt;\n    (\\(df) assign(paste0(\"MAYSISTRAT23_c1_pre_\",stringr::str_sub(x, 1, 4)), df, envir = .GlobalEnv))()\n    \n  } else {\n  readr::read_delim(paste0(dir_c1_pre, x),\n                    na = c(\"\", \"NA\",\"null\"),\n                    guess_max = min(1e5, Inf),\n                    skip=0)|&gt; \n    janitor::clean_names()|&gt; \n    as.data.frame()|&gt; \n    dplyr::rename_with(~ \"HASH_KEY\", (dplyr::last_col()-1))|&gt;\n    dplyr::mutate(TABLE= rep(x,))|&gt; \n    dplyr::select(TABLE, HASH_KEY, everything())|&gt;\n    (\\(df) assign(paste0(\"MAYSISTRAT23_c1_pre_\",stringr::str_sub(x, 1, 4)), df, envir = .GlobalEnv))()\n  }\n}\n\n\nNew names: Rows: 9763 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (57): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (8): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (27): Número de Hijos Ingreso Tratamiento Residencial, Parentesco con el… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 10837 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (69): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (12): Parentesco con el Jefe de Hogar, Rubro Trabaja, DIAGNOSTICO GLOBAL… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 11470 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (71): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (10): Parentesco con el Jefe de Hogar, DIAGNOSTICO GLOBAL DE NECESIDADES… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 15669 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (72): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (9): Parentesco con el Jefe de Hogar, DIAGNOSTICO GLOBAL DE NECESIDADES… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 17580 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (72): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (9): Parentesco con el Jefe de Hogar, DIAGNOSTICO GLOBAL DE NECESIDADES… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 20013 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (76): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (5): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 19959 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (77): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (4): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 20478 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (76): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (5): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 19910 Columns: 92 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “ chr (76): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (5): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. New names: Rows: 17467 Columns: 93 ── Column specification ──────────────────────────────────────────────────────── Delimiter:” chr (79): Codigo Identificación, Nombre Centro, Tipo Centro, Región del Cent… dbl (11): Dias en Tratamiento, N Meses en Tratamiento, Dias en SENDA, N Mese… lgl (3): Parentesco con el Jefe de Hogar, Diagnóstico Trastorno Psiquiátric… ℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. • DIAGNOSTICO GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL -&gt; DIAGNOSTICO   GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL...60 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO...61 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO ...62 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL...63 • DIAGNOSTICO GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL -&gt; DIAGNOSTICO   GLOBAL DE NECESIDADES DE INTEGRACION SOCIAL...80 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL HUMANO...81 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL FISICO ...82 • DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL -&gt; DIAGNOSTICO DE NECESIDADES DE INTEGRACIóN SOCIAL EN CAPITAL SOCIAL...83\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#MERGE DATABASES#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nCONS_C1_2019_22&lt;-data.table::rbindlist(mget(paste0(\"MAYSISTRAT23_c1_\",c(2019:2022))), idcol=\"TABLE\", fill=T)|&gt; \n dplyr::mutate(TABLE = sub(\".+(....)$\", \"\\\\1\", TABLE))\nCONS_C1_2010_19&lt;-plyr::rbind.fill(mget(paste0(\"MAYSISTRAT23_c1_pre_\",c(2010:2019))))|&gt; \n  data.table::data.table()|&gt; \n dplyr::mutate(TABLE = sub(\"^(\\\\d{4}).*\", \"\\\\1\", TABLE))\n\nOLDMAY_CONS_C1_2010_22&lt;- plyr::rbind.fill(CONS_C1_2010_19,CONS_C1_2019_22)\n\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\nlibrary(polars)\n\n# data frame to polars DataFrame \nOLDMAY_CONS_C1_2010_22_pl &lt;- as_polars_df(OLDMAY_CONS_C1_2010_22)\n\n#get the columns with characters\nchar_cols &lt;- names(which(sapply(OLDMAY_CONS_C1_2010_22, is.character)))\n\n#apply replacements for every column wiht characters\nfor (col in char_cols) {\n  OLDMAY_CONS_C1_2010_22_pl &lt;- OLDMAY_CONS_C1_2010_22_pl$with_columns(\n    pl$col(col)$\n      str$replace(\"ÃƒÂ³\", \"ó\")$\n      str$replace(\"ÃƒÂ¡\", \"á\")$\n      str$replace(\"ÃƒÂ©\", \"é\")$\n      str$replace(\"ÃƒÂº\", \"ú\")$\n      str$replace(\"ÃƒÂ±\", \"ñ\")$\n      str$replace(\"Ãƒâ€˜\", \"Ñ\")$\n      str$replace(\"ÃƒÂ\", \"Á\")$\n      str$replace(\"ÃƒÂ¡\", \"á\")$\n      str$replace(\"ÃƒÂ©\", \"é\")$\n      str$replace(\"ÃƒÂº\", \"ú\")$\n      str$replace(\"ÃƒÂ±\", \"ñ\")$\n      str$replace(\"Ãƒâ€˜\", \"Ñ\")$\n      str$replace(\"ÃƒÂ\", \"Á\")$\n      str$replace(\"Ã‚Âº\", \"º\")$\n      str$replace(\"Ã‚Â°\", \"°\")$\n      str$replace(\"Ã‚Âª\", \"ª\")$\n      str$replace(\"Ã‚Â¡\", \"¡\")$\n      str$replace(\"Ã‚Â¿\", \"¿\")$\n      str$replace(\"ÃƒÂ\", \"í\")$\n      str$replace(\"ÃƒÂ­\", \"í\")$\n      str$replace(\"Ãƒâ€œ\", \"Ó\")$\n      str$replace(\"Ãƒâ€š\", \"Ê\")$\n      str$replace(\"Ãƒâ€\", \"É\")$\n      str$replace(\"ÃƒÂ¼\", \"ü\")$\n      str$replace(\"ÃƒÂ¯\", \"ï\")$\n      str$replace(\"ÃƒÂ¶\", \"ö\")$\n      str$replace(\"Ã‚Â«\", \"«\")$\n      str$replace(\"Ã‚Â»\", \"»\")$\n      str$replace(\"Ãƒâ€¡\", \"Ç\")$\n      str$replace(\"ÃƒÂ§\", \"ç\")$\n      str$replace(\"Ã‚Â\", \"\")$\n      str$replace(\"Ãƒ\", \"\")$\n      str$replace(\"\\u00AD\", \"\")$\n      str$replace(\"\\u00C2\\u00AD\", \"\")$\n      str$replace(\"\\u00C2\", \"\")$\n      str$replace(\"VIÁ‘A\", \"VIÑA\")$\n      str$replace(\"RELONCAVÁ\\u008d\", \"RELONCAVI\")$\n      str$replace(\"MarÁa\", \"María\")$\n      str$replace(\"Á‘UBLE\", \"ÑUBLE\")$\n      str$replace(\"VÁnculos\", \"Vínculos\")$\n      str$replace(\"CONCEPCIÁ“N\", \"CONCEPCIÓN\")$\n      str$replace(\"AYSÁ‰N\", \"AYSÉN\")$\n      str$replace(\"MÁnimo\", \"Mínimo\")$\n      str$replace(\"M\\\\?mo\", \"Mínimo\")$\n      str$replace(\"ClÁnica\", \"Clínica\")$\n      str$replace(\"Prisionizaci\\\\?\", \"Prisionalización\")$\n      str$replace(\"Explotaci\\\\?omercial\", \"Explotación comercial\")$\n      str$replace(\"PatologÁa\", \"Patología\")$\n      str$replace(\"CardiopatÁas\", \"Cardiopatías\")$\n      str$replace(\"especÁfico\", \"específico\")$\n      str$replace(\"esquizotÁpico\", \"esquizotípico\")$\n      str$replace(\"TricotilomanÁa\", \"Tricotilomanía\")$\n      str$replace(\"hipomanÁaco\", \"hipomaníaco\")$\n      str$replace(\"lÁmite\", \"límite\")$\n      str$replace(\"manÁaco\", \"maníaco\")$\n      str$replace(\"Á\\u0081nimo\", \"Ánimo\")$\n      str$replace(\"CleptomanÁa\", \"Cleptomanía\")$\n      str$replace(\"HipocondrÁa\", \"Hipocondría\")$\n      str$replace(\"RAÁ\\u008dCES\", \"RAÍCES\")$\n      str$replace(\"RAÁ\\\\u008dCES\", \"RAÍCES\")$\n      str$replace(\"CuracavÁ\", \"Curacaví\")$\n      str$replace(\"raÁces\", \"raíces\")$\n      str$replace(\"TERAPÁ‰UTICA\", \"TERAPÉUTICA\")$\n      str$replace(\"RaÁces\", \"Raíces\")$\n      str$replace(\"\\\\?BLE\", \"ÑUBLE\")$\n      str$replace(\"BÁo-BÁo\", \"Bío-Bío\")$\n      str$replace(\"IBA\\\\?S\", \"IBAÑEZ\")$\n      str$replace(\"ReloncavÁ\", \"Reloncaví\")$\n      str$replace(\"ValparaÁso\", \"Valparaíso\")$\n      str$replace(\"AraucanÁa \", \"Araucanía\")$\n      str$replace(\"Á‘uble\", \"Ñuble\")$\n      str$replace(\"EspecÁfico\", \"Específico\")$\n      str$replace(\"VI\\\\? DEL MAR\", \"VIÑA DEL MAR\")$\n      str$replace(\"DO\\\\?HUE\", \"DOÑIHUE\")$\n      str$replace(\"HUALA\\\\?\", \"HUALAÑÉ\")$\n      str$replace(\"\\\\?qu\\\\?\", \"ÑIQUÉN\")$\n      str$replace(\"CHA\\\\?RAL\", \"CHAÑARAL\")$\n      str$replace(\"OLLAG\\\\?\", \"OLLAGÜE\")$\n      str$replace(\"VICU\\\\?\", \"VICUÑA\")$\n      str$replace(\"CA\\\\?TE\", \"CAÑETE\")$\n      str$replace(\"\\\\?\\\\?A\", \"ÑUÑOA\")$\n      str$replace(\"PolicÁa\", \"Policía\")$\n      str$replace(\"GarantÁa\", \"Garantía\")$\n      str$replace(\"fiscalÁa\", \"fiscalía\")$\n      str$replace(\"HaitÁ\", \"Haití\")$\n      str$replace(\"HungrÁa\", \"Hungría\")$\n      str$replace(\"PaÁses Bajos\", \"Países Bajos\")$\n      str$replace(\"Atacame\\\\?\", \"Atacameño\")$\n      str$replace(\"Y\\\\?na\", \"Yámana\")$\n      str$replace(\"Y\\\\?gan\", \"Yagán\")$\n      str$replace(\"Hipn\\\\?os\", \"Hipnóticos\")$\n      str$replace(\"Hero\\\\?\", \"Heroína\")$\n      str$replace(\"code\\\\?\", \"codeína\")$\n      str$replace(\"Analg\\\\?cos\", \"Analgésicos\")$\n      str$replace(\"barbit\\\\?os\", \"barbitúricos\")$\n      str$replace(\"Alucin\\\\?os\", \"Alucinógenos\")$\n      str$replace(\"ãƒâ³n\", \"ón\")$\n      str$replace(\"ãƒâ©n\", \"én\")$\n      str$replace(\"ãƒâº\", \"ú\")$\n      str$replace(\"ãƒâºa\", \"úa\")$\n      str$replace(\"ãƒâos\", \"íos\")$\n      str$replace(\"ãƒâuble\", \"Ñuble\")$\n      str$replace(\"ãƒâ³n general\", \"ón general\")$\n      str$replace(\"ãƒâ\", \"í\")$\n      str$replace(\"ãƒâ³n casa\", \"ón casa\")$\n      str$replace(\"ãƒârbara\", \"árbara\")$\n      str$replace(\"nãƒâ\", \"ñ\")$\n      str$replace(\"raãƒâces\", \"raíces\")$\n      str$replace(\"bãƒâsico\", \"básico\")$\n      str$replace(\"ãƒâ©utico\", \"éutico\")$\n      str$replace(\"vãƒânculos\", \"vínculos\")$\n      str$replace(\"marãƒâa\", \"maría\")$\n      str$replace(\"inãƒâ©s\", \"inés\")$\n      str$replace(\"raí\\\\u008dces\", \"raíces\")$\n      str$replace(\"chiloí©\", \"chiloé\")$\n      str$replace(\"terapí©utico\", \"terapéutico\")$\n      str$replace(\"bísico\", \"básico\")$\n      str$replace(\"peí±ablanca\", \"peñablanca\")$\n      str$replace(\"iní©s\", \"inés\")$\n      alias(col)\n  )\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column\")\n\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- OLDMAY_CONS_C1_2010_22_pl$\n      select(pl$col(col_name)$unique())$  # select unique values\n      to_series()$                        # convert to a polars series\n      to_r()                              # Conver to a vector of R\n    return(unique_values)\n  }),\n  char_cols  # Asignamos los nombres de las columnas a la lista\n)\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Crear una lista para almacenar las expresiones de reemplazo\nexpr_list &lt;- list()\n\nfor (col in char_cols) {\n  # Create the expression with every replacement for the actual column\n  expr &lt;- pl$col(col)$\n    str$replace(\"\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\\u00AD\", \"\")$\n    str$replace(\"\\u00C2\", \"\")$\n    str$replace(\"RÁo Negro\", \"Río Negro\")$\n    str$replace(\"BÁo-BÁo\", \"Bío-Bío\")$\n    str$replace(\"PE\\\\?LOLEN\", \"PEÑALOLÉN\")$\n    str$replace(\"PE\\\\?FLOR\", \"PEÑAFLOR\")$\n    str$replace(\"SAN GREGORIO DE \\\\?QUEN\", \"SAN GREGORIO DE ÑIQUÉN\")$\n    str$replace(\"\\\\?o nitroso\", \"óxido nitroso\")$\n    str$replace(\"Coca\\\\?\", \"Cocaína\")$\n    str$replace(\"Nunca estud¡\", \"Nunca estudió\")$\n    str$replace(\"T\\\\?ica Comercial/Industrial/Normalista\", \"Técnica Comercial/Industrial/Normalista\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?a\\\\? incompleta\", \"Profesional (4 o más incompleta)\")$\n    str$replace(\"Profesional \\\\(4 o m\\\\?a\\\\? completa\", \"Profesional (4 o más completa)\")$\n    str$replace(\"T\\\\?ica profesional˜\", \"Técnica profesional\")$\n    str$replace(\"T\\\\?ico superior \\\\(1-3 a\\\\? completa\", \"Técnico superior (1-3 años completa)\")$\n    str$replace(\"Educaci\\\\?\\\\?ca\", \"Educación básica\")$\n    str$replace(\"T\\\\?ico superior \\\\(1-3 a\\\\? incompleta\", \"Técnico superior (1-3 años incompleta)\")$\n    str$replace(\"cientÁficos\", \"científicos\")$\n    str$replace(\"Ášnicamente\", \"Únicamente\")$\n    str$replace(\"Hospeder\\\\?\", \"Hospedería\")$\n    str$replace(\"Residencial, pensi\\\\?hostal\", \"Residencial, pensión, hostal\")$\n    str$replace(\"Ocupaci\\\\?rregular\", \"Ocupación irregular\")$\n    str$replace(\"CocaÁna\", \"Cocaína\")$\n    str$replace(\"HeroÁna\", \"Heroína\")$\n    str$replace(\"codeÁna\", \"codeína\")$\n    str$replace(\"sintomÁ¡tico\", \"sintomático\")$\n    str$replace(\"disfunciÁ³n\", \"disfunción\")$\n    str$replace(\"lesiÁ³n\", \"lesión\")$\n    str$replace(\"dÁas\", \"días\")$\n    str$replace(\"orientaciÁ³n\", \"orientación\")$\n    str$replace(\"especificaciÁ³n\", \"especificación\")$\n    str$replace(\"\\\\tCODESAM\", \"CODESAM\")$\n    str$replace(\"fÁsico\", \"físico\")$\n    str$replace(\"PsÁquica\", \"Psíquica\")$\n    str$replace(\"estÁ¡ndar\", \"estándar\")$\n    alias(col)  # Mantain the original name of the column\n  \n  # Add the expression to the list\n  expr_list[[length(expr_list) + 1]] &lt;- expr\n}\n\n# Aplicar todas las correcciones a la vez\nOLDMAY_CONS_C1_2010_22_pl &lt;- OLDMAY_CONS_C1_2010_22_pl$with_columns(expr_list)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\n\nunique_values_list &lt;- setNames(\n  lapply(char_cols, function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- OLDMAY_CONS_C1_2010_22_pl$\n      select(pl$col(col_name)$unique())$  # select unique values\n      to_series()$                        # convert to a polars series\n      to_r()                              # Conver to a vector of R\n    return(unique_values)\n  }),\n  char_cols  # assign column names to the list\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Standardize values (to lower, correct tildes, etc.)\")\n\n# Create a list of expressions to apply the transformations\nexpr_list &lt;- list()\n\n# Mapping of accented characters to their non-accented equivalents\naccent_replacements &lt;- list(\n  \"á\" = \"a\",\n  \"é\" = \"e\",\n  \"í\" = \"i\",\n  \"ó\" = \"o\",\n  \"ú\" = \"u\",\n  \"Á\" = \"a\",\n  \"É\" = \"e\",\n  \"Í\" = \"i\",\n  \"Ó\" = \"o\",\n  \"Ú\" = \"u\",\n  \"ñ\" = \"n\",\n  \"Ñ\" = \"n\"\n)\n\nfor (col in char_cols) {\n  # Create the transformation expressions for each column\n  expr &lt;- pl$col(col)$\n    str$to_lowercase()$  # Similar to tolower\n    str$replace_all(\"^\\\\s+|\\\\s+$\", \"\")$  # Replace leading and trailing spaces (simulating str_trim)\n    str$replace_all(\"\\\\s+\", \" \")$  # Similar to str_replace_all(\"\\\\s+\", \" \")\n    str$replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove periods at the end (optional: remove spaces before the period)\n    \n  # Apply accented character replacements\n  for (accent in names(accent_replacements)) {\n    expr &lt;- expr$str$replace_all(accent, accent_replacements[[accent]])\n  }\n  \n  expr &lt;- expr$alias(col)  # Retain the original column name\n  \n  # Add the expression to the list\n  expr_list[[length(expr_list) + 1]] &lt;- expr\n}\n\n# Apply all transformations at once\nOLDMAY_CONS_C1_2010_22_pl &lt;- OLDMAY_CONS_C1_2010_22_pl$with_columns(expr_list)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Get the dataframe to R\")\nOLDMAY_CONS_C1_2010_22_df &lt;- OLDMAY_CONS_C1_2010_22_pl$to_data_frame()\n\ninvisible(\"Erased this variable\")\nOLDMAY_CONS_C1_2010_22_df$hash_rut_completo&lt;-NULL\n\n\n\n\nCode\n#2025-03-08: corrected values after contrasting with OCT DB\n#estado conyugal#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\nOLDMAY_CONS_C1_2010_22_df$estado_conyugal &lt;- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$estado_conyugal,\n                                \"nocontesta\"=\"no contesta\")\nOLDMAY_CONS_C1_2010_22_df$tenencia_de_la_vivienda &lt;- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$tenencia_de_la_vivienda,\n                                \"n/a\"=\"\")\nOLDMAY_CONS_C1_2010_22_df$motivo_de_egreso &lt;- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$motivo_de_egreso,\n                                \"alta admnistrativa\"=\"alta administrativa\")\n\ncolumn_names_df &lt;- data.frame(OCT = c(names(SISTRAT23_c1_2010_2024_df), rep(NA, max(0, length(names(OLDMAY_CONS_C1_2010_22_df)) - length(names(SISTRAT23_c1_2010_2024_df))))), \n                              MAY = c(names(OLDMAY_CONS_C1_2010_22_df), rep(NA, max(0, length(names(SISTRAT23_c1_2010_2024_df)) - length(names(OLDMAY_CONS_C1_2010_22_df))))))\n\ncolumn_names_df &lt;-\n  column_names_df |&gt; \n  dplyr::mutate(OCT= recode (OCT,\"orientacion_sexual\"=\"opciondiscapacidad\", \"opciondiscapacidad\"=\"orientacion_sexual\"))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##\n\ninvisible(\"Compare values of each database\")\n\nstrictly_char_cols_c1oct&lt;-\nsetdiff(names(which(sapply(SISTRAT23_c1_2010_2024_df, is.character))), c(\"hash_key\", \"codigo_identificacion\", \"fecha_ingresoa_tratamiento\", \"fecha_ingresoa_convenio_senda\", \"fecha_egresode_tratamiento\", \"nombre_centro_rec\"))\n\nunique_values_list_c1_vs_c1may&lt;- setNames(\n  lapply(strictly_char_cols_c1oct, function(col_name) {\n    SISTRAT23_c1_2010_2024_df |&gt;\n      select(all_of(col_name)) |&gt;\n      distinct() |&gt;\n      pull()\n  }),\n strictly_char_cols_c1oct\n)\n\nstrictly_char_cols_c1may&lt;-\nsetdiff(names(which(sapply(OLDMAY_CONS_C1_2010_22_df, is.character))), c(\"HASH_KEY\", \"codigo_identificacion\", \"fecha_ingreso_a_tratamiento\", \"fecha_ingreso_a_convenio_senda\", \"fecha_egreso_de_tratamiento\"))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#2025-08-12= REPLICATE THIS ANALYSIS ON MAY\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;- gsub(\"t\\\\?ica profesional\",\"tecnica profesional\", OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado)\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;- dplyr::recode(OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado, \"tecnico superior (1-3 anos completa)\"=\"tecnico superior (1-3 anos) completa\")\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;-\ndplyr::recode(OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado, \"tecnico superior (1-3 anos incompleta)\"=\"tecnico superior (1-3 anos) incompleta\")\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;-\ndplyr::recode(OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado, \"t?ica profesional\"=\"tecnica profesional\")\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;-\ndplyr::recode(OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado, \"no sabe o no se aplica\"=\"no sabe o no aplica\")\nOLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado &lt;- gsub(\"nunca estudi\\\\?\",\"nunca estudio\", OLDMAY_CONS_C1_2010_22_df$escolaridad_ultimo_ano_cursado)\n\nOLDMAY_CONS_C1_2010_22_df$nombre_centro&lt;- \ngsub(\"cruzz\",\"cruz\",OLDMAY_CONS_C1_2010_22_df$nombre_centro)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#before 2025\n#rename with unique level nombre_centro\nOLDMAY_CONS_C1_2010_22_df$nombre_centro &lt;- recode(OLDMAY_CONS_C1_2010_22_df$nombre_centro,\n  \"cadem de chillan\" = \"cosam nuble (cadem de chillan)\",\n  \"centro de tratamiento adicciones esperanza, hospital santa cruzz\" = \"centro de tratamiento adicciones esperanza, hospital santa cruz\",\n  \"CESFAM Colon\" = \"CESFAM Colón\",\n  \"comunidad terapeutica orion san bernardo (orion vespertino) pai - mpai pg\" =\"comunidad terapeutica orion san bernardo (orion vespertino)\",\n  \"cta villa alemana (cta penablanca)\" = \"cta nancy araya ruiz hospital penablanca (ex cta villa alemana -cta penablanca)\",\n  \"sociedad de profesionales salud integral ltda\"=\"sociedad de profesionales salud integral ltda (mujeres)\")\n\nOLDMAY_CONS_C1_2010_22_df$comuna_residencia &lt;- recode(OLDMAY_CONS_C1_2010_22_df$comuna_residencia,\n  \"o´higgins\" = \"o'higgins\",\n  \"ollagüe\" = \"ollague\")\nOLDMAY_CONS_C1_2010_22_df$consorcio &lt;- recode(OLDMAY_CONS_C1_2010_22_df$consorcio,\n  \"servicio de salud o´higgins\" = \"servicio de salud o'higgins\")\n\n  \nunique_values_list_c1may_vs_c1oct&lt;- setNames(\n  lapply(strictly_char_cols_c1may, function(col_name) {\n    OLDMAY_CONS_C1_2010_22_df |&gt;\n      select(all_of(col_name)) |&gt;\n      distinct() |&gt;\n      pull()\n  }),\n  strictly_char_cols_c1may\n)\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\nunique_values_list_c1may_vs_c1oct_post_25 &lt;- setNames(\n    lapply(setdiff(names(OLDMAY_CONS_C1_2010_22_df),c(\"hash_key\")), function(col_name) {\n        OLDMAY_CONS_C1_2010_22_df |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(OLDMAY_CONS_C1_2010_22_df),c(\"hash_key\"))\n)\nif(list_to_df(unique_values_list_c1may_vs_c1oct_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c1may_vs_c1oct_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\nif(list_to_df(unique_values_list_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c1may_vs_c1oct_post_25 ) |&gt; filter(variable!=\"codigo_identificacion\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n\ninvisible(\"Inspect differences between values of the different variables\")\n#str(unique_values_list_c1_vs_c1may)\n#str(unique_values_list_c1may_vs_c1oct)\ncomparison_values_may_vs_oct&lt;-\n  #recycles values of may  database\ncbind2(\nlist_to_df(unique_values_list_c1may_vs_c1oct) |&gt;\n  #to have an order similar to the original database\n  dplyr::mutate(variable= factor(variable, levels=strictly_char_cols_c1may)) |&gt;\n  arrange(variable, value) |&gt; rename(\"may_variable\"=\"variable\", \"may_value\"=\"value\"),\nlist_to_df(unique_values_list_c1_vs_c1may) |&gt;\n  #to remain with the ordered variables of gender identity\n  dplyr::mutate(variable= factor(variable, levels=column_names_df$OCT)) |&gt;\n  arrange(variable, value) |&gt; rename(\"oct_variable\"=\"variable\", \"oct_value\"=\"value\")\n)\n\n\nWarning in as.data.table.list(x, keep.rownames = keep.rownames, check.names = check.names, : El elemento 2 tiene 2012 filas pero el artículo más largo tiene 2101; Reciclado con resto.\n\n\nCode\n#comparison_values_may_vs_oct|&gt; filter(may_variable!=\"hash\") |&gt;  rio::export(\"clipboard\")\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##\n\n# # Convertir a data frame\n# oct_df &lt;- data.frame(OCT = column_names_df$OCT)\n# may_df &lt;- data.frame(MAY = column_names_df$MAY)\n\n# Encontrar correspondencias basadas en similitud de nombres\n# column_mapping &lt;- fuzzyjoin::stringdist_join(oct_df, may_df, by = c(\"OCT\"=\"MAY\"), method = \"jw\", max_dist = 0.2)|&gt;\n#   distinct(OCT, .keep_all = TRUE)  # Para mantener solo la mejor coincidencia para cada columna en OCT\n\n# Crear una lista de renombrado para dplyr::rename\nrename_list&lt;-c('HASH_KEY'='hash_key',\n'codigo_identificacion'='codigo_identificacion',\n'nombre_centro'='nombre_centro',\n'tipo_centro'='tipo_centro',\n'region_del_centro'='regiondel_centro',\n'servicio_de_salud'='serviciode_salud',\n'tipo_de_programa'='tipode_programa',\n'tipo_de_plan'='tipode_plan',\n'senda'='senda',\n'dias_en_tratamiento'='diasen_tratamiento',\n'n_meses_en_tratamiento'='n_mesesen_tratamiento',\n'dias_en_senda'='diasen_senda',\n'n_meses_en_senda'='n_mesesen_senda',\n'sexo'='sexo',\n'edad'='edad',\n'nombre_usuario'='nombre_usuario',\n'comuna_residencia'='comuna_residencia',\n'origen_de_ingreso'='origende_ingreso',\n'pais_nacimiento'='pais_nacimiento',\n'nacionalidad'='nacionalidad',\n'etnia'='etnia',\n'estado_conyugal'='estado_conyugal',\n'numero_de_hijos'='numerode_hijos',\n'numero_de_hijos_ingreso_tratamiento_residencial'='numerode_hijos_ingreso_tratamie',\n'parentesco_con_el_jefe_de_hogar'='parentescoconel_jefede_hogar',\n'numero_de_tratamientos_anteriores'='numerode_tratamientos_anteriore',\n'fecha_ultimo_tratamiento'='fecha_ultimo_tratamiento',\n'sustancia_de_inicio'='sustanciade_inicio',\n'edad_inicio_consumo'='edad_inicio_consumo',\n'se_trata_de_una_mujer_embarazada'='setratadeunamujerembarazad',\n'escolaridad_ultimo_ano_cursado'='escolaridadultimoanocursado',\n'condicion_ocupacional'='condicion_ocupacional',\n'categoria_ocupacional'='categoria_ocupacional',\n'rubro_trabaja'='rubro_trabaja',\n'con_quien_vive'='con_quien_vive',\n'tipo_de_vivienda'='tipodevivienda',\n'tenencia_de_la_vivienda'='tenenciadelavivienda',\n'sustancia_principal'='sustancia_principal',\n'otras_sustancias_no1'='otras_sustanciasno1',\n'otras_sustancias_no2'='otras_sustanciasno2',\n'otras_sustancias_no3'='otras_sustanciasno3',\n'frecuencia_de_consumo_sustancia_principal'='frecuenciade_consumo_sustancia',\n'edad_inicio_sustancia_principal'='edad_inicio_sustancia_principal',\n'via_administracion_sustancia_principal'='vaiadministracion_sustancia_pr',\n'diagnostico_trs_consumo_sustancia'='diagnostico_trs_consumo_sustanc',\n'diagnostico_trs_psiquiatrico_dsm_iv'='diagnostico_trs_psiquiatrico_ds',\n'diagnostico_trs_psiquiatrico_sub_dsm_iv'='diagnostico_trs_psiquiatrico_su',\n'x2_diagnostico_trs_psiquiatrico_dsm_iv'='diagnostico_trs_psiquiatrico',\n'x2_diagnostico_trs_psiquiatrico_sub_dsm_iv'='av',\n'x3_diagnostico_trs_psiquiatrico_dsm_iv'='aw',\n'x3_diagnostico_trs_psiquiatrico_sub_dsm_iv'='ax',\n'diagnostico_trs_psiquiatrico_cie_10'='diagnostico_trs_psiquiatrico_ci',\n'diagnostico_trs_psiquiatrico_sub_cie_10'='az',\n'x2_diagnostico_trs_psiquiatrico_cie_10'='ba',\n'x2_diagnostico_trs_psiquiatrico_sub_cie_10'='bb',\n'x3_diagnostico_trs_psiquiatrico_cie_10'='bc',\n'x3_diagnostico_trs_psiquiatrico_sub_cie_10'='bd',\n'diagnostico_trs_fisico'='diagnostico_trs_fa_sico',\n'otros_problemas_de_atencion_de_salud_mental'='otros_problemasde_atencionde_s',\n'compromiso_biopsicosocial'='compromiso_biopsicosocial',\n'diagnostico_global_de_necesidades_de_integracion_social_60'='diagnosticoglobaldenecesidade',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_61'='diagnosticodenecesidadesdein',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_62'='bj',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_63'='bk',\n'fecha_ingreso_a_tratamiento'='fecha_ingresoa_tratamiento',\n'fecha_ingreso_a_convenio_senda'='fecha_ingresoa_convenio_senda',\n'usuario_de_tribunales_tratamiento_drogas'='usuariode_tribunales_tratamien',\n'consentimiento_informado'='consentimiento_informado',\n'fecha_egreso_de_tratamiento'='fecha_egresode_tratamiento',\n'motivo_de_egreso'='motivode_egreso',\n'tipo_centro_derivacion'='tipo_centro_derivacion',\n'evaluacion_del_proceso_terapeutico'='evaluaciondel_proceso_terapeuti',\n'evaluacion_al_egreso_respecto_al_patron_de_consumo'='evaluacional_egreso_respectoal',\n'evaluacion_al_egreso_respecto_a_situacion_familiar'='evaluacional_egreso_respectoa',\n'evaluacion_al_egreso_respecto_relaciones_interpersonales'='evaluacional_egreso_respecto_re',\n'evaluacion_al_egreso_respecto_a_situacion_ocupacional'='bw',\n'evaluacion_al_egreso_respecto_salud_mental'='evaluacional_egreso_respecto_sa',\n'evaluacion_al_egreso_respecto_salud_fisica'='by',\n'evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social'='evaluacional_egreso_respecto_tr',\n'diagnostico_trastorno_psiquiatrico_cie_10_al_egreso'='diagnostico_trastorno_psiquiatri',\n'diagnostico_global_de_necesidades_de_integracion_social_80'='cb',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_81'='cc',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_82'='cd',\n'diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_83'='ce',\n'tiene_menores_de_edad_a_cargo'='tienemenoresdeedadacargo',\n'motivo_de_egreso_alta_administrativa'='motivodeegreso_alta_administra',\n'consorcio'='consorcio',\n'id_centro'='i_dcentro',\n'ha_estado_embarazada_egreso'='haestadoembarazadaegreso',\n'identidad_de_genero'='identidaddegenero',\n'discapacidad'='discapacidad',\n'opcion_discapacidad'='opciondiscapacidad',\n'orientacion_sexual'='orientacion_sexual',\n'servicios_basicos_95'='servicios_basicos',\n'laboral_ingresos'='laboral_ingresos',\n'perso_dormitorio_vivienda'='perso_dormitorio_vivienda',\n'precariedad_vivienda'='precariedad_vivienda',\n'servicios_basicos_99'='ct')\n\nSISTRAT23_c1_2010_2024_df2 &lt;- SISTRAT23_c1_2010_2024_df  |&gt; \n  dplyr::rename(!!!rename_list)\n\n\n\ninvisible(\"To get MAY vs OCT\")\ninvisible(\"Only based on the variables that are in both databases, excepting HASH KEY\")\nOLD_NEW_SISTRAT23_c1_2010_2024_df2&lt;-\ninner_join(mutate(SISTRAT23_c1_2010_2024_df2, codigo_identificacion= tolower(codigo_identificacion)), OLDMAY_CONS_C1_2010_22_df, by = \n             setdiff(intersect(names(SISTRAT23_c1_2010_2024_df2), names(OLDMAY_CONS_C1_2010_22_df)),c(\"HASH_KEY\",\"run\",\"hashkey\",\"hash_key\")))\n\nmessage(paste0(\"Entries with equal values from MAY (\",formatC(nrow(OLDMAY_CONS_C1_2010_22_df), big.mark=\",\"),\") and OCT database (\",formatC(nrow(SISTRAT23_c1_2010_2024_df2), big.mark=\",\"),\"): \",formatC(nrow(OLD_NEW_SISTRAT23_c1_2010_2024_df2), big.mark=\",\")))\n\n\nEntries with equal values from MAY (222,945) and OCT database (259,511): 210,650\n\n\nCode\nmessage(paste0(\"Percentage of coincidences between database restricted to October (Aug 2025) w/ same maximum admission date & original May 2023 database: \", scales::percent( nrow(OLD_NEW_SISTRAT23_c1_2010_2024_df2) / (tidytable::mutate(SISTRAT23_c1_2010_2024_df2, adm_date= clock::date_parse(fecha_ingreso_a_tratamiento, format=\"%d/%m/%Y\"))|&gt; tidytable::filter(adm_date&lt; (max(clock::date_parse(OLD_NEW_SISTRAT23_c1_2010_2024_df2$fecha_ingreso_a_tratamiento,  format=\"%d/%m/%Y\"), na.rm=T)))|&gt; nrow())) ))\n\n\nPercentage of coincidences between database restricted to October (Aug 2025) w/ same maximum admission date & original May 2023 database: 91%\n\n\nCode\nmessage(paste0(\"Percentage of HASH coincidences between database restricted to October (Aug 2025) w/ same maximum admission date & original May 2023 database: \", scales::percent((OLD_NEW_SISTRAT23_c1_2010_2024_df2 |&gt; distinct(HASH_KEY.x) |&gt; nrow())/ (tidytable::mutate(SISTRAT23_c1_2010_2024_df2, adm_date= as.Date(fecha_ingreso_a_tratamiento, tryFormats = c(\"%d/%m/%Y\",\"%Y-%m-%d\")))|&gt; tidytable::filter(adm_date&lt; (max(as.Date(OLD_NEW_SISTRAT23_c1_2010_2024_df2$fecha_ingreso_a_tratamiento, tryFormats = c(\"%d/%m/%Y\",\"%Y-%m-%d\")), na.rm=T)))|&gt; distinct(HASH_KEY)|&gt;  nrow())) ))\n\n\nPercentage of HASH coincidences between database restricted to October (Aug 2025) w/ same maximum admission date & original May 2023 database: 95%\n\n\nCode\nrm(list = ls()[grepl(\"MAYSISTRAT23\", ls())])\n\n\n\n\nCode\n# 0) Setup\nkey_vars &lt;- c(\n  \"codigo_identificacion\",\"senda\",\"sexo\",\"edad\",\"tipo_de_programa\",\"tipo_de_plan\",\n  \"comuna_residencia\",\"origen_de_ingreso\",\"sustancia_principal\",\n  \"frecuencia_de_consumo_sustancia_principal\",\n  \"diagnostico_trs_consumo_sustancia\",\"diagnostico_trs_fisico\",\n  \"compromiso_biopsicosocial\",\"fecha_ingreso_a_tratamiento\",\"id_centro\",\"motivo_de_egreso\"\n)\n\nkey_join &lt;- setdiff(\n  intersect(names(SISTRAT23_c1_2010_2024_df2), names(OLDMAY_CONS_C1_2010_22_df)),\n  c(\"HASH_KEY\",\"run\",\"hashkey\",\"hash_key\")\n)\n\n# 1) Focus rows: NOT in old_new hash list\nunmatched &lt;- SISTRAT23_c1_2010_2024_df2 |&gt;\n  tidytable::filter( !HASH_KEY %in% unique(OLD_NEW_SISTRAT23_c1_2010_2024_df2$HASH_KEY.x) )\n\n# 2) Keep ONLY rows with perfect uniqueness across the inner-join variables\nunmatched_unique &lt;- unmatched |&gt;\n    tidytable::add_count(tidyselect::all_of(key_join), name = \".n\") |&gt;\n    tidytable::filter(.n == 1) |&gt;\n    tidytable::select(-.n) |&gt;\n    tidytable::mutate(.src_id = tidytable::row_number())\n\n# 3) Prepare OLDMAY side (add id)\nOLDMAY_idx &lt;- OLDMAY_CONS_C1_2010_22_df |&gt;\n  tidytable::mutate(.old_id = tidytable::row_number())\n\n\n# add row ID and make lazy frames\nparse_date &lt;- function(x) as.Date(x, tryFormats = c(\"%d/%m/%Y\",\"%Y-%m-%d\"))\nmk_yq &lt;- function(d){\n  d$fech_ing_date &lt;- parse_date(d$fecha_ingreso_a_tratamiento)\n  yy &lt;- as.integer(format(d$fech_ing_date, \"%Y\"))\n  qq &lt;- ((as.integer(format(d$fech_ing_date, \"%m\")) - 1L) %/% 3L) + 1L\n  d$yq &lt;- sprintf(\"%d-Q%d\", yy, qq)\n  d\n}\nunmatched_unique &lt;- mk_yq(unmatched_unique)\nOLDMAY_idx      &lt;- mk_yq(OLDMAY_idx)\n\nunmatched_unique$src_id &lt;- seq_len(nrow(unmatched_unique))\nOLDMAY_idx$old_id      &lt;- seq_len(nrow(OLDMAY_idx))\n\n\n# STEP 1 — Get the list of quarters present in BOTH datasets and pre-allocate result holder\nyqs &lt;- intersect(unique(unmatched_unique$yq), unique(OLDMAY_idx$yq))\naccepted_all &lt;- vector(\"list\", length(yqs))\n\n# Define key variables and blocking variables\nkey_vars &lt;- c(\"codigo_identificacion\", \"nombre_usuario\", \"fecha_ingreso_a_tratamiento\")\nblock_vars &lt;- c(\"yq\", \"sexo\", \"id_centro\")\nvars_to_use &lt;- c(key_vars, \"edad\", \"comuna_residencia\", \"pais_nacimiento\", \n                \"nacionalidad\", \"etnia\", \"estado_conyugal\")\n\n# STEP 2 — Process one quarter at a time\nfor (k in seq_along(yqs)) {\n  yqi &lt;- yqs[k]\n  message(\"Processing quarter: \", yqi)\n  \n  # STEP 2.1 — Slice the source/target chunks for this quarter\n  src_chunk &lt;- unmatched_unique[yq == yqi]\n  tgt_chunk &lt;- OLDMAY_idx[yq == yqi]\n  \n  # Skip if either side has no rows for this quarter\n  if (nrow(src_chunk) == 0L || nrow(tgt_chunk) == 0L) {\n    message(\"Skipping quarter \", yqi, \" due to empty data\")\n    accepted_all[[k]] &lt;- NULL\n    next\n  }\n  \n  # Limit features to what actually exists in this chunk\n  vars_chunk &lt;- intersect(vars_to_use, intersect(names(src_chunk), names(tgt_chunk)))\n  if (length(vars_chunk) == 0L) {\n    message(\"Skipping quarter \", yqi, \" due to no common variables\")\n    accepted_all[[k]] &lt;- NULL\n    next\n  }\n  \n  block_use &lt;- intersect(block_vars, intersect(names(src_chunk), names(tgt_chunk)))\n  if (length(block_use) == 0L) {\n    message(\"Skipping quarter \", yqi, \" due to no blocking variables\")\n    accepted_all[[k]] &lt;- NULL\n    next\n  }\n  \n  # Exclude join keys from features to score\n  vars_feat &lt;- setdiff(vars_chunk, block_use)\n  if (length(vars_feat) == 0L) {\n    message(\"Skipping quarter \", yqi, \" due to no features after blocking\")\n    accepted_all[[k]] &lt;- NULL\n    next\n  }\n  \n  # STEP 2.2 — Convert to data.table for efficient processing\n  src_dt &lt;- data.table::as.data.table(src_chunk)\n  tgt_dt &lt;- data.table::as.data.table(tgt_chunk)\n  \n  # STEP 2.3 — Perform blocking join\n  data.table::setkeyv(src_dt, block_use)\n  data.table::setkeyv(tgt_dt, block_use)\n  \n  # Perform the join\n  cand_dt &lt;- tgt_dt[src_dt, nomatch = 0, allow.cartesian = TRUE]\n  \n  # Check if any candidate pairs were found\n  if (nrow(cand_dt) == 0L) {\n    message(\"No candidate pairs found for quarter \", yqi)\n    accepted_all[[k]] &lt;- NULL\n    next\n  }\n  \n  message(\"Found \", nrow(cand_dt), \" candidate pairs for quarter \", yqi)\n  \n  # STEP 3 — Calculate matching score in data.table\n  weights &lt;- ifelse(vars_feat %in% key_vars, 3, 1)\n  names(weights) &lt;- vars_feat\n  \n  # Initialize score components\n  cand_dt[, num := 0]\n  cand_dt[, den := 0]\n  \n  # Calculate score for each variable\n  for (v in vars_feat) {\n    w &lt;- weights[v]\n    v_tgt &lt;- paste0(\"i.\", v)  # Target variable from the right table\n    \n    # Create comparison condition\n    comp_cond &lt;- !is.na(cand_dt[[v]]) & !is.na(cand_dt[[v_tgt]])\n    eq_cond &lt;- comp_cond & tolower(cand_dt[[v]]) == tolower(cand_dt[[v_tgt]])\n    \n    # Update numerator and denominator\n    cand_dt[eq_cond, num := num + w]\n    cand_dt[comp_cond, den := den + w]\n  }\n  \n  # Calculate final score\n  cand_dt[, score := ifelse(den &gt; 0, num/den, 0)]\n  \n  # STEP 4 — Enforce 1:1 matching and keep only high-confidence links\n  thr_accept &lt;- 0.95\n  \n  # Find best match for each source record\n  best_src &lt;- cand_dt[order(src_id, -score), .SD[1], by = src_id]\n  \n  # Find best match for each target record\n  best_tgt &lt;- cand_dt[order(old_id, -score), .SD[1], by = old_id]\n  \n  # Find mutual best matches above threshold\n  acc_i &lt;- merge(\n    best_src[, .(src_id, old_id, score)],\n    best_tgt[, .(src_id, old_id)],\n    by = c(\"src_id\", \"old_id\")\n  )[score &gt;= thr_accept]\n  \n  message(\"Found \", nrow(acc_i), \" accepted matches for quarter \", yqi)\n  \n  # Append this quarter's accepted matches\n  accepted_all[[k]] &lt;- acc_i\n}\n\n\nProcessing quarter: 2009-Q3\n\n\nFound 210 candidate pairs for quarter 2009-Q3\n\n\nFound 34 accepted matches for quarter 2009-Q3\n\n\nProcessing quarter: 2009-Q4\n\n\nFound 709 candidate pairs for quarter 2009-Q4\n\n\nFound 61 accepted matches for quarter 2009-Q4\n\n\nProcessing quarter: 2008-Q4\n\n\nFound 27 candidate pairs for quarter 2008-Q4\n\n\nFound 12 accepted matches for quarter 2008-Q4\n\n\nProcessing quarter: 2009-Q2\n\n\nFound 110 candidate pairs for quarter 2009-Q2\n\n\nFound 24 accepted matches for quarter 2009-Q2\n\n\nProcessing quarter: 2010-Q1\n\n\nFound 1153 candidate pairs for quarter 2010-Q1\n\n\nFound 73 accepted matches for quarter 2010-Q1\n\n\nProcessing quarter: 2009-Q1\n\n\nFound 115 candidate pairs for quarter 2009-Q1\n\n\nFound 17 accepted matches for quarter 2009-Q1\n\n\nProcessing quarter: 2007-Q3\n\n\nFound 1 candidate pairs for quarter 2007-Q3\n\n\nFound 1 accepted matches for quarter 2007-Q3\n\n\nProcessing quarter: 2008-Q3\n\n\nFound 40 candidate pairs for quarter 2008-Q3\n\n\nFound 7 accepted matches for quarter 2008-Q3\n\n\nProcessing quarter: 2008-Q2\n\n\nFound 10 candidate pairs for quarter 2008-Q2\n\n\nFound 3 accepted matches for quarter 2008-Q2\n\n\nProcessing quarter: 2008-Q1\n\n\nFound 20 candidate pairs for quarter 2008-Q1\n\n\nFound 6 accepted matches for quarter 2008-Q1\n\n\nProcessing quarter: 2010-Q2\n\n\nFound 1217 candidate pairs for quarter 2010-Q2\n\n\nFound 73 accepted matches for quarter 2010-Q2\n\n\nProcessing quarter: 2010-Q3\n\n\nFound 1353 candidate pairs for quarter 2010-Q3\n\n\nFound 59 accepted matches for quarter 2010-Q3\n\n\nProcessing quarter: 2010-Q4\n\n\nFound 1653 candidate pairs for quarter 2010-Q4\n\n\nFound 54 accepted matches for quarter 2010-Q4\n\n\nProcessing quarter: 2011-Q1\n\n\nFound 2209 candidate pairs for quarter 2011-Q1\n\n\nFound 94 accepted matches for quarter 2011-Q1\n\n\nProcessing quarter: 2011-Q2\n\n\nFound 2102 candidate pairs for quarter 2011-Q2\n\n\nFound 92 accepted matches for quarter 2011-Q2\n\n\nProcessing quarter: 2011-Q3\n\n\nFound 1701 candidate pairs for quarter 2011-Q3\n\n\nFound 75 accepted matches for quarter 2011-Q3\n\n\nProcessing quarter: 2011-Q4\n\n\nFound 2787 candidate pairs for quarter 2011-Q4\n\n\nFound 86 accepted matches for quarter 2011-Q4\n\n\nProcessing quarter: 2012-Q1\n\n\nFound 1288 candidate pairs for quarter 2012-Q1\n\n\nFound 86 accepted matches for quarter 2012-Q1\n\n\nProcessing quarter: 2012-Q2\n\n\nFound 1279 candidate pairs for quarter 2012-Q2\n\n\nFound 73 accepted matches for quarter 2012-Q2\n\n\nProcessing quarter: 2012-Q3\n\n\nFound 3750 candidate pairs for quarter 2012-Q3\n\n\nFound 83 accepted matches for quarter 2012-Q3\n\n\nProcessing quarter: 2012-Q4\n\n\nFound 3183 candidate pairs for quarter 2012-Q4\n\n\nFound 86 accepted matches for quarter 2012-Q4\n\n\nProcessing quarter: 2013-Q1\n\n\nFound 2334 candidate pairs for quarter 2013-Q1\n\n\nFound 91 accepted matches for quarter 2013-Q1\n\n\nProcessing quarter: 2013-Q2\n\n\nFound 2453 candidate pairs for quarter 2013-Q2\n\n\nFound 121 accepted matches for quarter 2013-Q2\n\n\nProcessing quarter: 2013-Q3\n\n\nFound 4866 candidate pairs for quarter 2013-Q3\n\n\nFound 138 accepted matches for quarter 2013-Q3\n\n\nProcessing quarter: 2013-Q4\n\n\nFound 4548 candidate pairs for quarter 2013-Q4\n\n\nFound 113 accepted matches for quarter 2013-Q4\n\n\nProcessing quarter: 2014-Q1\n\n\nFound 2675 candidate pairs for quarter 2014-Q1\n\n\nFound 111 accepted matches for quarter 2014-Q1\n\n\nProcessing quarter: 2014-Q2\n\n\nFound 2996 candidate pairs for quarter 2014-Q2\n\n\nFound 114 accepted matches for quarter 2014-Q2\n\n\nProcessing quarter: 2014-Q3\n\n\nFound 2362 candidate pairs for quarter 2014-Q3\n\n\nFound 96 accepted matches for quarter 2014-Q3\n\n\nProcessing quarter: 2014-Q4\n\n\nFound 6790 candidate pairs for quarter 2014-Q4\n\n\nFound 125 accepted matches for quarter 2014-Q4\n\n\nProcessing quarter: 2015-Q1\n\n\nFound 2193 candidate pairs for quarter 2015-Q1\n\n\nFound 102 accepted matches for quarter 2015-Q1\n\n\nProcessing quarter: 2015-Q2\n\n\nFound 2840 candidate pairs for quarter 2015-Q2\n\n\nFound 112 accepted matches for quarter 2015-Q2\n\n\nProcessing quarter: 2015-Q3\n\n\nFound 4613 candidate pairs for quarter 2015-Q3\n\n\nFound 153 accepted matches for quarter 2015-Q3\n\n\nProcessing quarter: 2015-Q4\n\n\nFound 3872 candidate pairs for quarter 2015-Q4\n\n\nFound 90 accepted matches for quarter 2015-Q4\n\n\nProcessing quarter: 2016-Q1\n\n\nFound 2088 candidate pairs for quarter 2016-Q1\n\n\nFound 111 accepted matches for quarter 2016-Q1\n\n\nProcessing quarter: 2016-Q2\n\n\nFound 2595 candidate pairs for quarter 2016-Q2\n\n\nFound 100 accepted matches for quarter 2016-Q2\n\n\nProcessing quarter: 2016-Q3\n\n\nFound 2823 candidate pairs for quarter 2016-Q3\n\n\nFound 96 accepted matches for quarter 2016-Q3\n\n\nProcessing quarter: 2016-Q4\n\n\nFound 2785 candidate pairs for quarter 2016-Q4\n\n\nFound 86 accepted matches for quarter 2016-Q4\n\n\nProcessing quarter: 2017-Q1\n\n\nFound 1898 candidate pairs for quarter 2017-Q1\n\n\nFound 102 accepted matches for quarter 2017-Q1\n\n\nProcessing quarter: 2017-Q2\n\n\nFound 2156 candidate pairs for quarter 2017-Q2\n\n\nFound 95 accepted matches for quarter 2017-Q2\n\n\nProcessing quarter: 2017-Q3\n\n\nFound 2945 candidate pairs for quarter 2017-Q3\n\n\nFound 98 accepted matches for quarter 2017-Q3\n\n\nProcessing quarter: 2017-Q4\n\n\nFound 2448 candidate pairs for quarter 2017-Q4\n\n\nFound 70 accepted matches for quarter 2017-Q4\n\n\nProcessing quarter: 2018-Q1\n\n\nFound 1973 candidate pairs for quarter 2018-Q1\n\n\nFound 101 accepted matches for quarter 2018-Q1\n\n\nProcessing quarter: 2018-Q2\n\n\nFound 2549 candidate pairs for quarter 2018-Q2\n\n\nFound 97 accepted matches for quarter 2018-Q2\n\n\nProcessing quarter: 2018-Q3\n\n\nFound 2305 candidate pairs for quarter 2018-Q3\n\n\nFound 75 accepted matches for quarter 2018-Q3\n\n\nProcessing quarter: 2018-Q4\n\n\nFound 2448 candidate pairs for quarter 2018-Q4\n\n\nFound 82 accepted matches for quarter 2018-Q4\n\n\nProcessing quarter: 2019-Q1\n\n\nFound 1950 candidate pairs for quarter 2019-Q1\n\n\nFound 94 accepted matches for quarter 2019-Q1\n\n\nProcessing quarter: 2019-Q2\n\n\nFound 3731 candidate pairs for quarter 2019-Q2\n\n\nFound 118 accepted matches for quarter 2019-Q2\n\n\nProcessing quarter: 2019-Q3\n\n\nFound 3317 candidate pairs for quarter 2019-Q3\n\n\nFound 88 accepted matches for quarter 2019-Q3\n\n\nProcessing quarter: 2019-Q4\n\n\nFound 2691 candidate pairs for quarter 2019-Q4\n\n\nFound 61 accepted matches for quarter 2019-Q4\n\n\nProcessing quarter: 2020-Q1\n\n\nFound 959 candidate pairs for quarter 2020-Q1\n\n\nFound 47 accepted matches for quarter 2020-Q1\n\n\nProcessing quarter: 2020-Q2\n\n\nFound 428 candidate pairs for quarter 2020-Q2\n\n\nFound 21 accepted matches for quarter 2020-Q2\n\n\nProcessing quarter: 2020-Q3\n\n\nFound 786 candidate pairs for quarter 2020-Q3\n\n\nFound 43 accepted matches for quarter 2020-Q3\n\n\nProcessing quarter: 2020-Q4\n\n\nFound 976 candidate pairs for quarter 2020-Q4\n\n\nFound 39 accepted matches for quarter 2020-Q4\n\n\nProcessing quarter: 2021-Q1\n\n\nFound 1731 candidate pairs for quarter 2021-Q1\n\n\nFound 65 accepted matches for quarter 2021-Q1\n\n\nProcessing quarter: 2021-Q2\n\n\nFound 597 candidate pairs for quarter 2021-Q2\n\n\nFound 42 accepted matches for quarter 2021-Q2\n\n\nProcessing quarter: 2021-Q3\n\n\nFound 1171 candidate pairs for quarter 2021-Q3\n\n\nFound 45 accepted matches for quarter 2021-Q3\n\n\nProcessing quarter: 2021-Q4\n\n\nFound 1350 candidate pairs for quarter 2021-Q4\n\n\nFound 66 accepted matches for quarter 2021-Q4\n\n\nProcessing quarter: 2022-Q1\n\n\nFound 3154 candidate pairs for quarter 2022-Q1\n\n\nFound 272 accepted matches for quarter 2022-Q1\n\n\nProcessing quarter: 2022-Q2\n\n\nFound 3442 candidate pairs for quarter 2022-Q2\n\n\nFound 262 accepted matches for quarter 2022-Q2\n\n\nProcessing quarter: 2022-Q3\n\n\nFound 4266 candidate pairs for quarter 2022-Q3\n\n\nFound 285 accepted matches for quarter 2022-Q3\n\n\nProcessing quarter: 2022-Q4\n\n\nFound 4697 candidate pairs for quarter 2022-Q4\n\n\nFound 201 accepted matches for quarter 2022-Q4\n\n\nCode\n# STEP 5 — Stack all accepted matches from all quarters\naccepted &lt;- data.table::rbindlist(accepted_all, use.names = TRUE, fill = TRUE)\n\n\nmatched_data &lt;- merge(\n  unmatched_unique[accepted, on = \"src_id\"],\n  OLDMAY_idx[accepted, on = \"old_id\"],\n  by = c(\"src_id\", \"old_id\"),\n  suffixes = c(\"_source\", \"_target\")\n)\n\n# View key columns for comparison\nkey_cols &lt;- c(\"src_id\", \"old_id\", #\"score\",\n              \"HASH_KEY_source\", \"HASH_KEY_target\",\n              \"codigo_identificacion_source\", \"codigo_identificacion_target\",\n              \"nombre_usuario_source\", \"nombre_usuario_target\",\n              \"fecha_ingreso_a_tratamiento_source\", \"fecha_ingreso_a_tratamiento_target\")\n\n#View(matched_data[, ..key_cols])\n\n# OLD_NEW_SISTRAT23_c1_2010_2024_df2&lt;-\n# inner_join(mutate(SISTRAT23_c1_2010_2024_df2, codigo_identificacion= tolower(codigo_identificacion)), OLDMAY_CONS_C1_2010_22_df, by = \n#              setdiff(intersect(names(SISTRAT23_c1_2010_2024_df2), names(OLDMAY_CONS_C1_2010_22_df)),c(\"HASH_KEY\",\"run\",\"hashkey\",\"hash_key\")))\nOLD_NEW_SISTRAT23_c1_2010_2024_df2_alt&lt;-\ninner_join(SISTRAT23_c1_2010_2024_df2, matched_data[, c(\"HASH_KEY_source\",\"HASH_KEY_target\",\"codigo_identificacion_source\",\"TABLE_source\", \"fecha_ingreso_a_tratamiento_source\")], by = c(\"HASH_KEY\"=\"HASH_KEY_source\", \"codigo_identificacion\"=\"codigo_identificacion_source\",\"TABLE\"=\"TABLE_source\", \"fecha_ingreso_a_tratamiento\"=\"fecha_ingreso_a_tratamiento_source\"), multiple=\"first\"\n             )#fecha_ingreso_a_tratamiento\n\nmessage(paste0(\"Recovering \", formatC(nrow(OLD_NEW_SISTRAT23_c1_2010_2024_df2_alt), big.mark=\",\"),\" observations as a result of HASH identification through probabilistic matching &gt;0.95 coincidence.\"))\n\n\nRecovering 5,545 observations as a result of HASH identification through probabilistic matching &gt;0.95 coincidence.\n\n\nWe compared values and column names with C1 october database and it is stored in /_out/values_c1_may_vs_oct.xlsx\".\nWe obtained an additional amount of HASHs by probabilistic pairing, which are stored in OLD_NEW_SISTRAT23_c1_2010_2024_df2_alt.\nWe suspect that 1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464 is the encryption of invalid RUNs, so we deleted these observations.\n\n\nCode\nSISTRAT23_c1_2010_2024_df2&lt;-\ntidytable::filter(SISTRAT23_c1_2010_2024_df2, !HASH_KEY== \"1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464\") \n\n\n\nC1 Oct 2023, completed discharge information\nAs of August 8, 2025, we restored missing discharge dates from the 2018 and 2019 datasets, which had been omitted due to administrative truncation during treatment retrieval. Because replacement was required, admission, discharge and other dates were corrected in this phase.\n\n\nCode\nbase_consolidada_C1 &lt;- readxl::read_excel(paste0(gsub(\"cons\",\"data\",getwd()),\"/20250529_original_data/base_consolidada_C1.xlsx\"))|&gt; mutate(adm_date_rec= as.Date(adm_date_rec)) #|&gt;   \nclean_text_ascii &lt;- function(x) {\n  x |&gt;\n    str_trim() |&gt;\n    str_squish() |&gt;\n    str_replace_all(\"\\u00A0\", \" \") |&gt;                 # espacios no separables\n    str_replace_all(\"[\\r\\n\\t]+\", \" \") |&gt;\n    str_to_lower() |&gt;\n    # tildes y ñ -&gt; ASCII\n    stringi::stri_trans_general(\"Latin-ASCII\")\n}\nbase_consolidada_C1 &lt;- base_consolidada_C1|&gt;\n  mutate(across(where(is.character), clean_text_ascii))\n\n#2025-08-12\nbase_consolidada_C1$evaluacion_proceso_terapeutico&lt;- \ngsub(\"m\\\\?mo\",\"minimo\",base_consolidada_C1$evaluacion_proceso_terapeutico)\n\nSISTRAT23_c1_2010_2024_df2&lt;-\nSISTRAT23_c1_2010_2024_df2|&gt; \n  dplyr::mutate(birth_date= stringr::str_sub(codigo_identificacion, nchar(codigo_identificacion)-7,nchar(codigo_identificacion)))|&gt; \n  dplyr::mutate(birth_date= readr::parse_date(birth_date, format=\"%d%m%Y\"))|&gt; \n  dplyr::mutate(adm_date = str_replace_all(fecha_ingreso_a_tratamiento ,\"/\",\"-\"),\n  senda_adm_date = str_replace_all(fecha_ingreso_a_convenio_senda ,\"/\",\"-\"),\n  discharge_date= str_replace_all(fecha_egreso_de_tratamiento,\"/\",\"-\"))|&gt; \n  dplyr::mutate(adm_date= readr::parse_date(adm_date, format=\"%d-%m-%Y\"))|&gt;\n  dplyr::mutate(senda_adm_date= readr::parse_date(senda_adm_date, format=\"%d-%m-%Y\"))|&gt; \n  dplyr::mutate(discharge_date= readr::parse_date(discharge_date, format=\"%d-%m-%Y\"))|&gt; \n  left_join(base_consolidada_C1, c(\"HASH_KEY\"=\"hash_key\", \"adm_date\"=\"adm_date_rec\"))|&gt;\n  mutate(discharge_date_na=ifelse(is.na(discharge_date),1,0))|&gt; #18057 \n  mutate(discharge_date= as.Date(ifelse(!is.na(fecha_egreso),as.character(fecha_egreso), as.character(discharge_date))))|&gt; \n  mutate(discharge_date_na=ifelse(is.na(discharge_date),1,0))|&gt; #janitor::tabyl(discharge_date_na) #17472 #585\n  mutate(motivo_de_egreso= ifelse(!is.na(motivo_de_egreso.y), motivo_de_egreso.y, motivo_de_egreso.x))|&gt;\n  mutate(tipo_centro_derivacion= ifelse(!is.na(tipo_centro_derivacion.y), tipo_centro_derivacion.y, tipo_centro_derivacion.x))|&gt;\n    mutate(evaluacion_del_proceso_terapeutico= ifelse(!is.na(evaluacion_proceso_terapeutico),evaluacion_proceso_terapeutico, evaluacion_del_proceso_terapeutico))|&gt;\n    mutate(evaluacion_al_egreso_respecto_al_patron_de_consumo= ifelse(!is.na(evaluacion_egreso_patron_de_cons),evaluacion_egreso_patron_de_cons, evaluacion_al_egreso_respecto_al_patron_de_consumo))|&gt;\n    mutate(evaluacion_al_egreso_respecto_a_situacion_familiar= ifelse(!is.na(evaluacion_egreso_situacion_fami),evaluacion_egreso_situacion_fami, evaluacion_al_egreso_respecto_a_situacion_familiar))|&gt;\n    mutate(evaluacion_al_egreso_respecto_relaciones_interpersonales= ifelse(!is.na(evaluacion_egreso_relaciones_int),evaluacion_egreso_relaciones_int, evaluacion_al_egreso_respecto_relaciones_interpersonales))|&gt;\n    mutate(evaluacion_al_egreso_respecto_a_situacion_ocupacional= ifelse(!is.na(evaluacion_egreso_situacion_ocup),evaluacion_egreso_situacion_ocup, evaluacion_al_egreso_respecto_a_situacion_ocupacional))|&gt;\n    mutate(evaluacion_al_egreso_respecto_salud_mental= ifelse(!is.na(evaluacion_egreso_salud_mental),evaluacion_egreso_salud_mental, evaluacion_al_egreso_respecto_salud_mental))|&gt;\n    mutate(evaluacion_al_egreso_respecto_salud_fisica= ifelse(!is.na(evaluacion_egreso_salud_fisica),evaluacion_egreso_salud_fisica, evaluacion_al_egreso_respecto_salud_fisica))|&gt;  \n    mutate(evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social= ifelse(!is.na(evaluacion_egreso_trasgresion_no),evaluacion_egreso_trasgresion_no, evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social))|&gt;\n  select(-any_of(c(\"motivo_de_egreso.y\", \"tipo_centro_derivacion.y\", \"evaluacion_proceso_terapeutico\", \"evaluacion_egreso_patron_de_cons\", \"evaluacion_egreso_situacion_fami\", \"evaluacion_egreso_relaciones_int\", \"evaluacion_egreso_situacion_ocup\", \"evaluacion_egreso_salud_mental\", \"evaluacion_egreso_salud_fisica\", \"evaluacion_egreso_trasgresion_no\", \"codigo_identificacion.y\", \"concatenado_hash_y_fecha_de_admi\", \"concatenado_id_senda_y_fecha_de_\", \"CodigoIdentificación\", \"FechaIngresoaTratamiento\", \"fecha_egreso\", \"discharge_date_na\"))) |&gt; \n  rename(\"codigo_identificacion\"=\"codigo_identificacion.x\")\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: birth_date = readr::parse_date(birth_date, format = \"%d%m%Y\"). Caused by warning: ! 4 parsing failures. row col expected actual 25085 – date like %d%m%Y 2/2/1946 248631 – valid date 00000000 248633 – valid date 00000000 249390 – valid date 00000000\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: adm_date = readr::parse_date(adm_date, format = \"%d-%m-%Y\"). Caused by warning: ! 1 parsing failure. row col expected actual 14504 – date like %d-%m-%Y 10-01-11\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: senda_adm_date = readr::parse_date(senda_adm_date, format =   \"%d-%m-%Y\"). Caused by warning: ! 1 parsing failure. row col expected actual 232111 – date like %d-%m-%Y nan-nan-na\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: discharge_date = readr::parse_date(discharge_date, format =   \"%d-%m-%Y\"). Caused by warning: ! 79 parsing failures. row col expected actual 194 – date like %d-%m-%Y 15\n1294 – date like %d-%m-%Y 30-12-09 1650 – date like %d-%m-%Y 20-01-10 1859 – date like %d-%m-%Y 23-03-09 1934 – date like %d-%m-%Y 13-05-09 …. … ……………… …….. See problems(…) for more details.\n\n\nCode\ninvisible(\"We should be very careful of column names. From this we will select adequately the duplicate values\")\n\ninvisible(\"Problemas para rescatar datos\")\nproblems_birth_date_c1 &lt;- problems(SISTRAT23_c1_2010_2024_df2$birth_date)\nproblems_adm_date_c1 &lt;- problems(SISTRAT23_c1_2010_2024_df2$adm_date)\nproblems_discharge_date_c1 &lt;- problems(SISTRAT23_c1_2010_2024_df2$discharge_date)\n\n\n\n\nCode\nupdated_info_discharge_C1 &lt;- readxl::read_excel(paste0(gsub(\"cons\",\"data\",getwd()),\"/20250529_original_data/20250925_disch_date.xlsx\"))|&gt; mutate(disch_date_rec_updated= as.Date(as.character(`Fecha Egreso de Tratamiento`)), birth_date_updated=  as.Date(as.character(`Fecha de Nacimiento`))) |&gt; filter(obs==\"egreso\") |&gt;\n   mutate(across(\n    .cols = where(is.character) & !matches(\"^Codigo Identificación$\"),\n    .fns = clean_text_ascii\n  ))\n\ncat(\"correct word in category\\n\")\nSISTRAT23_c1_2010_2024_df2$tipo_de_vivienda &lt;- \ngsub(\"hospederiaa\",\"hospederia\", SISTRAT23_c1_2010_2024_df2$tipo_de_vivienda)\n\ncat(\"correct brith date for a particular case without an ID\\n\")\nSISTRAT23_c1_2010_2024_df2[which(SISTRAT23_c1_2010_2024_df2$codigo_identificacion==\"DAES200000000\"), \"birth_date\"] &lt;- as.Date(\"1994-05-13\")\n\ncat(\"correct SENDA ID based on brith date\\n\")\n# Supongamos que el nuevo birth date viene así\nnew_birth_date &lt;- \"19940513\"\n# Localize row\nix &lt;- which(SISTRAT23_c1_2010_2024_df2$codigo_identificacion == \"DAES200000000\")\nnewid&lt;- \n  paste0(substr(SISTRAT23_c1_2010_2024_df2$codigo_identificacion[ix], 1, nchar(SISTRAT23_c1_2010_2024_df2$codigo_identificacion[ix]) - 8),new_birth_date)\nnewid\n# Replace last 8 characters\nSISTRAT23_c1_2010_2024_df2$codigo_identificacion[ix] &lt;-newid\n\n\nSISTRAT23_c1_2010_2024_df2&lt;-\nSISTRAT23_c1_2010_2024_df2|&gt;\n  left_join(updated_info_discharge_C1[, c(\"Codigo Identificación\", \"Motivo de Egreso\", \"Evaluación del Proceso Terapéutico\", \"disch_date_rec_updated\")], by=c(\"codigo_identificacion\"=\"Codigo Identificación\"), multiple=\"first\")|&gt;\n  tidytable::mutate(\n    .needs_fill = is.na(discharge_date) & !is.na(disch_date_rec_updated),\n    discharge_date = if_else(.needs_fill, disch_date_rec_updated, discharge_date),\n    evaluacion_del_proceso_terapeutico = if_else(\n      .needs_fill & is.na(evaluacion_del_proceso_terapeutico),\n      `Evaluación del Proceso Terapéutico`,\n      evaluacion_del_proceso_terapeutico\n    ),\n    motivo_de_egreso = if_else(\n      .needs_fill & is.na(motivo_de_egreso),\n      `Motivo de Egreso`,\n      motivo_de_egreso\n    )\n  )|&gt;\n  tidytable::select(-.needs_fill)|&gt;\n  tidytable::select(-tidytable::any_of(c(\"Motivo de Egreso\", \"Evaluación del Proceso Terapéutico\", \"disch_date_rec_updated\")))\n\n\ncorrect word in category\ncorrect brith date for a particular case without an ID\ncorrect SENDA ID based on brith date\n[1] \"DAES219940513\"\n\n\n\n\n\n\nTOP Oct 2023\nLoad the TOP data\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#LOAD DATABASES_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# Define the directories\npath &lt;- dirname(paste0(getwd(),\"/cons\"))\ndir_top &lt;- paste0(gsub(\"cons\", \"\", path), \"data/20231018_original_data/TOP/\")\n\ndir_c1_oct_25 &lt;- paste0(gsub(\"cons\", \"\", \n                             paste0(getwd(),\"/cons\")\n), \"data/20250529_original_data/\")\n\nTOP_25&lt;-list.files(path=toString(dir_c1_oct_25), pattern=\"top\")\nTOP_25&lt;- TOP_25[grepl(\"top\", TOP_25)]\nTOP_15_22&lt;-list.files(path=toString(dir_top, pattern=\"enc\"))\nTOP_15_22&lt;- TOP_15_22[grepl(\"enc\", TOP_15_22)]\n\npath_top_25&lt;- \n    cbind.data.frame(\n        path= c(paste0(dir_top, TOP_15_22),paste0(dir_c1_oct_25, TOP_25)))\npath_top_25$name&lt;- \n    sub(\n        \".*[/\\\\\\\\]([0-9]{4}).*?_dup([12]?)(?:_.*)?\\\\.csv$\",\n        \"\\\\1\\\\2\",\n        path_top_25$path,\n        perl = TRUE\n    )\npath_top_25&lt;- \npath_top_25 |&gt; \n  mutate(name= ifelse(grepl(\"2024\",path),\"2024\",name))\n\n# Create a function to process each file\nfor (i in 1:nrow(path_top_25)) {\n  xn&lt;- path_top_25$name[i]\n  # Read and process the file\n  readr::read_delim(path_top_25$path[i],\n                    na = c(\"\", \"NA\", \"null\"),\n                    guess_max = min(1e5, Inf),\n                    skip = 0)|&gt; \n    janitor::clean_names()|&gt;\n    (\\(df) {\n      # Get the name of the last column\n      last_col_name &lt;- names(df)[ncol(df)]\n      # Rename the last column to HASH_KEY\n      dplyr::rename(df, HASH_KEY = !!rlang::sym(last_col_name))\n    })() |&gt;\n    dplyr::mutate(TABLE = xn)|&gt;\n    dplyr::select(TABLE, HASH_KEY, everything())|&gt;\n    (\\(df) assign(paste0(\"df_top_\", stringr::str_extract(xn,\"\\\\d+\")), df, envir = .GlobalEnv))()\n}\n\n\nRows: 8980 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 6652 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 10539 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 10576 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 9304 Columns: 43 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (22): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 5965 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nWarning: One or more parsing issues, call problems() on your data frame for details, e.g.: dat &lt;- vroom(…) problems(dat)\n\n\nRows: 16383 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nWarning: One or more parsing issues, call problems() on your data frame for details, e.g.: dat &lt;- vroom(…) problems(dat)\n\n\nRows: 8473 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 13052 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16383 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 12112 Columns: 46 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (25): ID, NombreApliacadordelTOP, TOP, EtapadelTratamiento, FechaNacimi… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC… date (1): FechaAplicaciÃ³nTOP\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 16478 Columns: 47 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (27): ID, FechaAplicaciÃ³nTOP, NombreApliacadordelTOP, TOP, EtapadelTrat… dbl (20): Edad, TotalOH, DÃ³sisOH, TotalTHC, DÃ³sisTHC, TotalPBC, DÃ³sisPBC,…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nCode\n#Remove objects that contain \"_top_\"\n#rm(list= ls()[grep(\"_top_\", ls())])\n\n#MERGE DATABASES\nCONS_TOP_2015_24_sub&lt;-  ls()[grep(\"df_top_\", ls())]\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Check availability of variables in multiple datasets\")\n# Create an empty list to store column names\ncolumn_list &lt;- list()\n# Iterare in each database, extract column names and store it in the list\nfor (dataset_name in CONS_TOP_2015_24_sub) {\n  # getDB\n  dataset &lt;- get(dataset_name)\n  # Obtain column names\n  cols &lt;- colnames(dataset)\n  # Store in list\n  column_list[[dataset_name]] &lt;- cols\n}\n# Get a unique vector of column names \nall_columns &lt;- unique(unlist(column_list))\n# Create a DB w/ columns as rows and DBs as columns\npresence_matrix_top &lt;- data.frame(Column_Name = all_columns)\n# Fill with X whether present in a DB\nfor (dataset_name in CONS_TOP_2015_24_sub) {\n  presence_matrix_top[[dataset_name]] &lt;- ifelse(presence_matrix_top$Column_Name %in% column_list[[dataset_name]], \"X\", \"\")\n}\n#sort by original order\npresence_matrix_top$Column_Name &lt;- factor(presence_matrix_top$Column_Name, levels = all_columns)\n# Sort by column name\npresence_matrix_top &lt;- presence_matrix_top|&gt;\n  dplyr::arrange(Column_Name)\n\ncolnames(presence_matrix_top) &lt;- gsub(\"_top_\",\"top\",gsub(\"dup[1-2]_top_\", \"top\",gsub(\"OCTSISTRAT23\", \"\", colnames(presence_matrix_top))))\n\n\nWe explored the database values because we suspected that the tables were unbalanced.\n\n\nCode\nunique_values_list_df_top_15_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_2015),c(\"HASH_KEY\")), function(col_name) {\n        df_top_2015 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_2015),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_161_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20161),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20161 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20161),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_162_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20162),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20162 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20162),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_171_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20171),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20171 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20171),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_172_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20172),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20172 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20172),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_181_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20181),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20181 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20181),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_182_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20182),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20182 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20182),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_19_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_2019),c(\"HASH_KEY\")), function(col_name) {\n        df_top_2019 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_2019),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_191_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20191),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20191 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20191),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_192_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20192),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20192 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20192),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_201_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20201),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20201 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20201),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_202_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20202),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20202 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20202),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_211_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20211),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20211 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20211),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_212_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20212),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20212 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20212),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_221_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20221),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20221 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20221),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_222_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_20222),c(\"HASH_KEY\")), function(col_name) {\n        df_top_20222 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_20222),c(\"HASH_KEY\"))\n)\nunique_values_list_df_top_24_25 &lt;- setNames(\n    lapply(setdiff(names(df_top_2024),c(\"HASH_KEY\")), function(col_name) {\n        df_top_2024 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(df_top_2024),c(\"HASH_KEY\"))\n)\n\ncat(\"Invalid values in TOP 2022-2024\\n\")\n\n\nInvalid values in TOP 2022-2024\n\n\nCode\nlist_to_df(unique_values_list_df_top_24_25 )|&gt; filter(variable==\"id\") |&gt; mutate(value_char=nchar(value)) |&gt; filter(value_char&gt;13) |&gt; nrow()\n\n\n[1] 71\n\n\nCode\ndf_top_2024|&gt; filter(grepl(\"1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464\",HASH_KEY)) |&gt; rio::export(\"bd_2022_2024_descuadrado.xlsx\")\n\n\n\n\n\nCode\npresence_matrix_top|&gt;\n  knitr::kable(\"markdown\", caption = \"Presencia de columnas en cada base de datos (TOP)\")\n\n\n\nPresencia de columnas en cada base de datos (TOP)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn_Name\ndftop2015\ndftop20161\ndftop20162\ndftop20171\ndftop20172\ndftop20181\ndftop20182\ndftop2019\ndftop20191\ndftop20192\ndftop20201\ndftop20202\ndftop20211\ndftop20212\ndftop20221\ndftop20222\ndftop2024\n\n\n\n\nTABLE\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nHASH_KEY\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nid\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_aplicaci_a3n_top\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnombre_apliacadordel_top\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntop\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\netapadel_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_nacimiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nedad\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsexo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfechade_ingresoa_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nplande_tratamiento\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nnombredel_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntipo_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsustancia_principal1\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsustancia_principal2\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsustancia_principal3\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_oh\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_oh\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_thc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_thc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_pbc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_pbc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_coc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_coc\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_bzd\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_bzd\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_otra\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nda3sis_otra\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nhurto\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nrobo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nventa_drogas\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nri_a_a\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_vif\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\notro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_transgresi_a3n\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsalud_psicol_a3gica\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_trabajo\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ntotal_educaci_a3n\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nsalud_fa_sica\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nlugar_vivir\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nvivienda\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\ncalidad_vida\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nregi_a3n_centro\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\nX\n\n\nfecha_egreso\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\n\n\nmotivo_egreso\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\n\n\nevaluacion_proceso_terapeutico\n\n\n\n\n\n\n\nX\n\n\nX\nX\nX\nX\nX\nX\nX\n\n\ncomentario\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\n\n\nCode\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Consolidate TOP\")\n\nSISTRAT23_top_2015_2024&lt;-subset(plyr::rbind.fill(mget(CONS_TOP_2015_24_sub)),\n  HASH_KEY != \"1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464\")|&gt; \n  data.table::data.table()|&gt; \n  dplyr::mutate(TABLE_rec = sub(\"^(\\\\d{4}).*dup(\\\\d*)?.*\", \"\\\\1\\\\2\", TABLE))|&gt; \n  dplyr::mutate(TABLE = sub(\"^(\\\\d{4}).*\", \"\\\\1\", TABLE))\n\nfor (i in seq_along(patterns)) {\n  colnames(SISTRAT23_top_2015_2024) &lt;- sub(patterns[i], replacements[i], colnames(SISTRAT23_top_2015_2024))\n}\n\nstrictly_char_cols_top&lt;- setdiff(names(SISTRAT23_top_2015_2024), c(\"id\", \"nombre_apliacadordel_top\", \"fecha_aplicacion_top\", \"fechade_ingresoa_tratamiento\", \"fecha_nacimiento\", \"edad\", \"fecha_egreso\", \"HASH_KEY\"))\n\nunique_values_list_top&lt;- setNames(\n  lapply(strictly_char_cols_top, function(col_name) {\n    SISTRAT23_top_2015_2024 |&gt;\n      select(all_of(col_name)) |&gt;\n      distinct() |&gt;\n      pull()\n  }),\n strictly_char_cols_top\n)\n#To export it and analyse each unique value\nunique_values_list_top_df &lt;- list_to_df(unique_values_list_top) |&gt; \n  filter(!variable %in% c(\"id\"))# rio::export(\"clipboard\")\n\ninvisible(\"corregir nombres erroneos de la base\")\nSISTRAT23_top_2015_2024&lt;-\nSISTRAT23_top_2015_2024|&gt;\n  rename_with(~gsub(\"da3sis\", \"dosis\", .x), contains(\"da3sis\"))|&gt;\n  rename_with(~gsub(\"fa_sica\", \"fisica\", .x), contains(\"fa_sica\"))|&gt; \n  rename_with(~gsub(\"riaa\", \"rina\", .x), contains(\"riaa\"))\n\nrm(list = ls()[grepl(\"df_top_\", ls())])\n\n\n\n\n\n\nClean TOP Oct 2023\nNow, we apply to every column and their contents, using rpolars. As of 2025, some national IDs were slipped in the database in the etapadel_tratamiento variable.\n\n\nCode\n# Egreso   Inicio Tratamiento Seguimiento 12 meses Seguimiento 15 meses  Seguimiento 3 meses  Seguimiento 6 meses  Seguimiento 9 meses\n\n# data frame to polars DataFrame \n#dataset_pl &lt;- polars::pl$DataFrame(SISTRAT23_c1_2010_2022)\nSISTRAT23_top_2015_2024_pl &lt;- as_polars_df(SISTRAT23_top_2015_2024)\n\nSISTRAT23_top_2015_2024_pl &lt;- SISTRAT23_top_2015_2024_pl$with_columns(\n  pl$when(pl$col(\"etapadel_tratamiento\")$str$starts_with(r\"(\\d)\"))\n    $then(pl$lit(NA_character_))\n    $otherwise(pl$col(\"etapadel_tratamiento\"))\n    $alias(\"etapadel_tratamiento\")\n)\n\nSISTRAT23_top_2015_2024_pl &lt;- SISTRAT23_top_2015_2024_pl$with_columns(\n  etapadel_tratamiento = pl$when(pl$col(\"etapadel_tratamiento\")$str$contains(\"^\\\\d\"))\n    $then(pl$lit(NA_character_))\n    $otherwise(pl$col(\"etapadel_tratamiento\"))\n)\n\n\n#get the columns with characters\nchar_cols_top &lt;- names(which(sapply(SISTRAT23_top_2015_2024, is.character)))\nchar_cols_top_filter &lt;- setdiff(\n  char_cols_top,\n  c(\"TABLE\",\"HASH_KEY\",\"TABLE_rec\",\"fecha_aplicacion_top\",\"fecha_nacimiento\",\"id\")\n)\nchar_cols_top_filter &lt;- unique(intersect(char_cols_top_filter, SISTRAT23_top_2015_2024_pl$columns))\n\n\n# Apply replacements for every column with characters\nexpr_list &lt;- list()\nfor (col in char_cols_top_filter) {\n  expr &lt;- pl$col(col)$\n    str$to_lowercase()$\n    # whitespace sanity\n    str$replace_all(\"^\\\\s+|\\\\s+$\", \"\")$\n    str$replace_all(\"\\\\s+\", \" \")$\n    # bytes basura frecuentes\n    str$replace_all(\"\\\\u00C2\\\\u00AD|\\\\u00AD|\\\\u00C2\", \"\")$\n    # tus correcciones puntuales (usa replace_all siempre)\n    str$replace_all(\"Mejillones\\\\t\", \"Mejillones\")$\n    str$replace_all(\"Batuco\\\\t\", \"Batuco\")$\n    str$replace_all(\"poblaciÃ³n\", \"población\")$\n    str$replace_all(\"ViÃ±a\", \"Viña\")$\n    str$replace_all(\"ReloncavÃ\", \"Reloncaví\")$\n    str$replace_all(\"ChiloÃ©\", \"Chiloé\")$\n    str$replace_all(\"ConchalÃ\", \"Conchalí\")$\n    str$replace_all(\"RamÃ³n\", \"Ramón\")$\n    str$replace_all(\"MarÃa\", \"María\")$\n    str$replace_all(\"InÃ©s\", \"Inés\")$\n    str$replace_all(\"LÃ³pez\", \"López\")$\n    str$replace_all(\"PÃ©rez\", \"Pérez\")$\n    str$replace_all(\"NuÃ±ez\", \"Nuñez\")$\n    str$replace_all(\"FarfÃ¡n\", \"Farfán\")$\n    str$replace_all(\"CalderÃ³n\", \"Calderón\")$\n    str$replace_all(\"AndrÃ©s\", \"Andrés\")$\n    str$replace_all(\"JofrÃ©\", \"Jofré\")$\n    str$replace_all(\"CofrÃ©\", \"Cofré\")$\n    str$replace_all(\"RAÃ\\u008dCES\", \"RAÍCES\")$\n    str$replace_all(\"TERAPÃ\\u0089UTICA\", \"TERAPÉUTICA\")$\n    str$replace_all(\"RÃos\", \"Ríos\")$\n    # arreglos ‘rotos’ frecuentes por doble-decoding\n    str$replace_all(\"Ã¡|ã¡\", \"á\")$\n    str$replace_all(\"Ã©|ã©|ã\", \"é\")$\n    str$replace_all(\"Ã­|ã­|Ã¬|ì\", \"í\")$\n    str$replace_all(\"Ã³|ã³|Ã|ã“\", \"ó\")$\n    str$replace_all(\"Ãº|ãº|Ã¹|ù|Ãš\", \"ú\")$\n    str$replace_all(\"Ã±|ã±\", \"ñ\")$\n    # topónimos/otros\n    str$replace_all(\"\\\\bays\\\\?n\\\\b\", \"aysén\")$      # si quieres quedar con tilde\n    str$replace_all(\"\\\\bca\\\\?ete\\\\b\", \"cañete\")$\n    str$replace_all(\"\\\\?uble\", \"ñuble\")$\n    str$replace_all(\"\\\\bollag\\\\u00FCe\\\\b\", \"ollagüe\")$\n    str$replace_all(\"[“”]\", \"\")$\n    str$replace_all(\"\\\\u00B4\", \"'\")    # ´ --&gt; '\n  expr_list[[length(expr_list) + 1]] &lt;- expr$alias(col)  # &lt;-- alias correcto\n}\nSISTRAT23_top_2015_2024_pl &lt;- SISTRAT23_top_2015_2024_pl$with_columns(expr_list)\n      \n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column\")\n\n\nunique_values_list_top &lt;- setNames(\n  lapply(char_cols_top_filter, function(col_name) {\n    tryCatch({\n      col_name_lower &lt;- tolower(col_name)\n      SISTRAT23_top_2015_2024_pl$select(\n        pl$col(col_name_lower)$unique()\n      )$to_series()$to_r()\n    }, error = function(e) {\n      warning(paste(\"Error processing column:\", col_name, \"-\", e$message))\n      return(NULL)\n    })\n  }),\n  char_cols_top_filter\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Apply replacements for every column with characters\nexpr_list &lt;- list()\nfor (col in char_cols_top_filter) {\n  expr &lt;- pl$col(col)$\n      str$replace(\"heroãna\", \"heroina\")$\n      str$replace(\"dãa\", \"dia\")$\n      str$replace(\"situaciã³n\", \"situacion\")$\n      str$replace(\"informaciãn\", \"informacion\")$\n      str$replace(\"sesiã³n\", \"sesion\")$\n      str$replace(\"disposiciã³n\", \"disposicion\")$\n      str$replace(\"terapã©utico\", \"terapeutico\")$\n      str$replace(\"acadã©micas\", \"academicas\")$\n      str$replace(\"continãºa\", \"continua\")$\n      str$replace(\"presentaciã³n\", \"presentacion\")$\n      str$replace(\"acciã³n\", \"accion\")$\n      str$replace(\"estrã©s\", \"estres\")$\n      str$replace(\"ãºltima\", \"ultima\")$\n      str$replace(\"sesiã³n\", \"sesion\")$\n      str$replace(\"aplicaciã³n\", \"aplicacion\")$\n      str$replace(\"mã©dica\", \"médica\")$\n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ã\", \"n\")$  \n      str$replace(\"ã\", \"n\")$\n      str$replace(\"ãa\", \"ia\")$\n      str$replace(\"ã\", \"a\")$\n      str$replace(\"ã¡\", \"a\")$\n      str$replace(\"ã¡\", \"a\")$\n      str$replace(\"zããiga\", \"zuniga\")$\n      str$replace(\"ã³\", \"o\")$\n      str$replace(\"ã±\", \"n\")$\n      str$replace(\"ã\", \"a\")$\n      str$replace(\"ã\", \"i\")$\n      str$replace(\"ã©\", \"e\")$\n      str$replace(\"ã\", \"e\")$\n      str$replace(\"ãº\", \"u\")$\n      str$replace(\"ã¨\", \"e\")$\n      str$replace(\"ã³\", \"o\")$\n      str$replace(\"ã³\", \"o\")$\n      str$replace(\"ã³\", \"o\")$\n      ## Mis-encodings (UTF-8 leídos como Latin-1)\n      str$replace_all(\"Ã¡|ã¡\", \"a\")$\n      str$replace_all(\"Ã©|ã©\", \"e\")$\n      str$replace_all(\"Ã­|ã­|Ã¬|ì\", \"i\")$\n      str$replace_all(\"Ã³|ã³|Ã|ã“\", \"o\")$\n      str$replace_all(\"Ãº|ãº|Ã¹|ù|Ãš\", \"u\")$\n      str$replace_all(\"Ã±|ã±\", \"n\")$\n  \n      ## Bigram fixes frecuentes\n      str$replace_all(\"ãn\", \"in\")$   # agustãn -&gt; agustin, marãn -&gt; marin\n      str$replace_all(\"ãa\", \"ia\")$   # llambãas -&gt; llambias\n      str$replace_all(\"ãq\", \"iq\")$   # henrãquez -&gt; henriquez\n      str$replace_all(\"ãg\", \"ig\")$   # rodrãguez -&gt; rodriguez\n  \n      ## Topónimos / lugares\n      str$replace_all(\"\\\\bays\\\\?n\\\\b\", \"aysen\")$\n      str$replace_all(\"\\\\bca\\\\?ete\\\\b\", \"canete\")$\n      str$replace_all(\"\\\\?uble\", \"nuble\")$\n      str$replace_all(\"\\\\bollag\\\\u00FCe\\\\b\", \"ollague\")$\n  \n      ## Términos de dominio / typos\n      str$replace_all(\"t\\\\?cnico\", \"tecnico\")$\n      str$replace_all(\"explotaci\\\\?n\", \"explotacion\")$\n      str$replace_all(\"alucin\\\\?genos\", \"alucinogenos\")$\n      str$replace_all(\"terap\\\\u00A9utico|terap\\\\u2030utico|terapa%utico\", \"terapeutico\")$\n      str$replace_all(\"\\\\bmiocardiopataa\\\\b\", \"miocardiopatia\")$\n      str$replace_all(\"\\\\bsandrome\\\\b\", \"sindrome\")$\n      str$replace_all(\"daa \", \"dia \")$\n  \n      ## Apellidos comunes rotos (varias formas)\n      str$replace_all(\"gonzã¡lez\", \"gonzalez\")$\n      str$replace_all(\"romã¡n\", \"roman\")$\n      str$replace_all(\"cã¡rdenas\", \"cardenas\")$\n      str$replace_all(\"muã±oz|muãoz\", \"munoz\")$\n      str$replace_all(\"herriqu\\\\?z\", \"herriquez\")$\n      str$replace_all(\"henr\\\\w*quez\", \"henriquez\")$\n      str$replace_all(\"bugueã±o\", \"bugueno\")$\n      str$replace_all(\"piqu\\\\?+\", \"pique\")$\n      str$replace_all(\"cã³rdova\", \"cordova\")$\n      str$replace_all(\"sepã¹lveda\", \"sepulveda\")$\n      str$replace_all(\"verã³nica\", \"veronica\")$\n      str$replace_all(\"gã¡lvez\", \"galvez\")$\n      str$replace_all(\"cort\\\\?s\", \"cortes\")$\n      str$replace_all(\"g\\\\?mez|gãmez|gã³mez\", \"gomez\")$\n      str$replace_all(\"baham\\\\S*ndez\", \"bahamondez\")$\n      str$replace_all(\"rodr\\\\S*guez\", \"rodriguez\")$\n      str$replace_all(\"mar\\\\S*n\", \"marin\")$\n      str$replace_all(\"v\\\\?tor\", \"victor\")$\n      str$replace_all(\"mari\\u008da\", \"maria\")$\n      str$replace_all(\"raices\", \"raices\")$\n      str$replace_all(\"rai\\u008dces\", \"raices\")$\n    \n\n      ## Limpieza de símbolos raros y apóstrofes sueltos\n      str$replace_all(\"[“”]\", \"\")$\n      str$replace_all(\"\\\\u00B4\", \"'\")$\n      str$replace_all(\"[&lt;&gt;]\", \"\")$\n      str$replace_all(\"^'\", \"\")$\n      str$replace_all(\" '\", \" \")    \n  expr_list[[length(expr_list) + 1]] &lt;- expr$alias(col)\n}\n\n# Apply all at once\nSISTRAT23_top_2015_2024_pl &lt;- SISTRAT23_top_2015_2024_pl$with_columns(expr_list)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Standardize values (to lower, correct tildes, etc.)\")\n\n# Expressions to apply\nexpr_list &lt;- vector(\"list\", length(char_cols_top_filter))\n\n# Accent map -&gt; ASCII\naccent_replacements &lt;- list(\n  \"á\"=\"a\",\"é\"=\"e\",\"í\"=\"i\",\"ó\"=\"o\",\"ú\"=\"u\",\n  \"Á\"=\"a\",\"É\"=\"e\",\"Í\"=\"i\",\"Ó\"=\"o\",\"Ú\"=\"u\",\n  \"ñ\"=\"n\",\"Ñ\"=\"n\"\n)\n\nfor (i in seq_along(char_cols_top_filter)) {\n  col &lt;- char_cols_top_filter[[i]]\n  expr &lt;- pl$col(col)  # &lt;-- initialize expr\n\n  for (accent in names(accent_replacements)) {\n    expr &lt;- expr$str$replace_all(accent, accent_replacements[[accent]])\n  }\n\n  expr_list[[i]] &lt;- expr$alias(col)  # keep column name\n}\n\n# Apply all transformations at once\nSISTRAT23_top_2015_2024_pl &lt;- SISTRAT23_top_2015_2024_pl$with_columns(expr_list)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\nunique_values_list_top2 &lt;- setNames(\n  lapply(char_cols_top_filter, function(col_name) {\n    tryCatch({\n      col_name_lower &lt;- tolower(col_name)\n      SISTRAT23_top_2015_2024_pl$select(\n        pl$col(col_name_lower)$unique()\n      )$to_series()$to_r()\n    }, error = function(e) {\n      warning(paste(\"Error processing column:\", col_name, \"-\", e$message))\n      return(NULL)\n    })\n  }),\n  char_cols_top_filter\n)\n\nunique_values_list_top2_df&lt;-\nlist_to_df(unique_values_list_top2) |&gt; filter(!grepl(\"nombre\",variable))\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ninvisible(\"Get the dataframe to R\")\nSISTRAT23_top_2015_2024_df &lt;- SISTRAT23_top_2015_2024_pl$to_data_frame()\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nunique_values_list_post_top_25 &lt;- setNames(\n    lapply(setdiff(names(SISTRAT23_top_2015_2024_df),c(\"HASH_KEY\")), function(col_name) {\n        SISTRAT23_top_2015_2024_df |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(SISTRAT23_top_2015_2024_df),c(\"HASH_KEY\"))\n)\n\nif(list_to_df(unique_values_list_post_top_25 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_post_top_25 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\nif(list_to_df(unique_values_list_post_top_25 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_post_top_25 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n#Aviso: Values with sign '?'= 2\n#Aviso: Values with signs '´ “ '= 202\n\n\n\n\nCorrect dates of TOP\nWe started standardizing dates\n\n\nCode\nSISTRAT23_top_2015_2024_df&lt;-\nSISTRAT23_top_2015_2024_df|&gt; \n  dplyr::mutate(birth_date = str_replace_all(fecha_nacimiento ,\"/\",\"-\"),\n  adm_date= str_replace_all(fechade_ingresoa_tratamiento,\"/\",\"-\"),\n  discharge_date= str_replace_all(fecha_egreso,\"/\",\"-\"))|&gt; \n  dplyr::mutate(birth_date= readr::parse_date(birth_date, format=\"%d-%m-%Y\"))|&gt;\n  dplyr::mutate(adm_date= readr::parse_date(adm_date, format=\"%d-%m-%Y\"))|&gt; \n  dplyr::mutate(discharge_date= readr::parse_date(discharge_date, format=\"%d-%m-%Y\"))\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: discharge_date = readr::parse_date(discharge_date, format =   \"%d-%m-%Y\"). Caused by warning: ! 1 parsing failure. row col expected actual 204408 – date like %d-%m-%Y nan-nan-nan\n\n\n\n\n\nCode\nrbind.data.frame(\n  cbind.data.frame(db=\"C1\",name=\"Birth date\", \nsum_dates(SISTRAT23_c1_2010_2024_df2$birth_date)),\n  cbind.data.frame(db=\"C1\",name=\"Admission date\", \nsum_dates(SISTRAT23_c1_2010_2024_df2$adm_date)),\n  cbind.data.frame(db=\"C1\",name=\"Admission to SENDA date\", sum_dates(SISTRAT23_c1_2010_2024_df2$senda_adm_date)),\n  cbind.data.frame(db=\"C1\",name=\"Discharge date\", sum_dates(SISTRAT23_c1_2010_2024_df2$discharge_date)),\n  cbind.data.frame(db=\"TOP\",name=\"Application date\", sum_dates(SISTRAT23_top_2015_2024_df$fecha_aplicacion_top)),\n  cbind.data.frame(db=\"TOP\",name=\"Birth date\",\nsum_dates(SISTRAT23_top_2015_2024_df$birth_date)),\ncbind.data.frame(db=\"TOP\",name=\"Admission date\",\nsum_dates(SISTRAT23_top_2015_2024_df$adm_date)),\ncbind.data.frame(db=\"TOP\",name=\"Date of discharge\",\nsum_dates(SISTRAT23_top_2015_2024_df$discharge_date))\n)|&gt; \n  knitr::kable(\"markdown\", caption=\"Coded dates\")\n\n\n\nCoded dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndb\nname\nmin\np001\np005\np025\np25\np50\np75\np975\np995\np999\nmax\n\n\n\n\n0.1%\nC1\nBirth date\n1907-05-16\n1940-07-13\n1947-04-04\n1955-09-28\n1972-09-04\n1981-08-17\n1988-10-24\n1999-09-07\n2003-12-31\n2014-12-06\n2015-12-16\n\n\n0.1%1\nC1\nAdmission date\n2000-01-01\n2008-07-18\n2009-06-08\n2010-04-27\n2014-08-04\n2017-10-18\n2020-11-25\n2024-05-27\n2024-11-06\n2024-12-10\n2024-12-20\n\n\n0.1%2\nC1\nAdmission to SENDA date\n2000-01-01\n2008-11-25\n2009-08-04\n2010-05-28\n2014-09-01\n2017-11-07\n2020-12-15\n2024-06-03\n2024-11-11\n2024-12-11\n2025-04-08\n\n\n0.1%3\nC1\nDischarge date\n2009-02-09\n2010-01-29\n2010-03-31\n2010-12-28\n2015-02-26\n2018-02-28\n2021-08-13\n2024-11-04\n2025-03-19\n2025-05-01\n2025-05-28\n\n\n0.1%4\nTOP\nApplication date\n2022-01-01\n2022-01-03\n2022-01-03\n2022-01-10\n2022-02-28\n2022-05-16\n2022-09-20\n2023-10-26\n2024-06-29\n2024-10-29\n2024-12-19\n\n\n0.1%5\nTOP\nBirth date\n1917-07-15\n1941-11-01\n1947-09-03\n1955-05-23\n1971-11-24\n1981-04-14\n1988-11-26\n1999-03-04\n2002-02-02\n2015-02-25\n2015-12-16\n\n\n0.1%6\nTOP\nAdmission date\n2015-05-01\n2015-05-04\n2015-05-14\n2015-07-07\n2017-05-12\n2019-04-02\n2021-02-01\n2022-07-04\n2022-11-02\n2022-12-13\n2023-04-20\n\n\n0.1%7\nTOP\nDate of discharge\n2016-07-07\n2019-10-01\n2019-11-07\n2020-01-30\n2021-04-15\n2022-02-01\n2022-09-02\n2023-06-19\n2024-05-27\n2024-11-13\n2025-05-22\n\n\n\n\n\n\n\n\n\nMortality\nWe took individuals that died from 2007 and took the birth date.\n\n\nCode\ndir_mort &lt;- paste0(gsub(\"cons\", \"\", \n                          paste0(getwd(),\"/cons\")\n                          ), \"data/20230825_original_data/deis/\")\n\nmortality&lt;-\n  read_delim(paste0(dir_mort, \"2023-08-11 DatosDefuncionesEncrip.csv\"),\n    delim = \";\", \n    na = c(\"\", \"NA\", \"null\"),\n    guess_max = min(1e5, Inf),\n    escape_double = FALSE, \n    trim_ws = TRUE)|&gt; \n  janitor::clean_names()|&gt; \n  dplyr::filter(ano_def&gt;2007)|&gt; \n  dplyr::mutate(ano_nac_deis= paste0(sprintf(\"%02.0f\",ano1_nac),sprintf(\"%02.0f\",ano2_nac)))|&gt; \n  dplyr::mutate(birth_date= readr::parse_date(paste0(dia_nac,\"-\",mes_nac,\"-\",ano_nac_deis), format=\"%d-%m-%Y\")) \n\n\nRows: 2785627 Columns: 26 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (4): HASHKEY, OCUPACION, DIAG1, DIAG2 dbl (22): DIA_NAC, MES_NAC, ANO1_NAC, ANO2_NAC, SEXO, EST_CIVIL, EDAD_TIPO, …\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nWarning: There was 1 warning in dplyr::mutate(). ℹ In argument: birth_date = readr::parse_date(...). Caused by warning: ! 489 parsing failures. row col expected actual 7854 – date like %d-%m-%Y NA-NA-9999 7857 – date like %d-%m-%Y NA-NA-9999 7858 – date like %d-%m-%Y NA-NA-9999 7860 – date like %d-%m-%Y NA-NA-9999 7861 – date like %d-%m-%Y NA-NA-9999 …. … ……………… ………. See problems(…) for more details.\n\n\nCode\nproblems_birth_date_deis_mort&lt;- problems(mortality$birth_date)\n\n\n\n\nHosp Nov 2023\nWe obtained the HASHes in the dataset that were avilable in SENDA data frames.\n\n\nCode\ndir_hosp &lt;- paste0(gsub(\"cons\", \"\", paste0(getwd(),\"/cons\")), \"data/20231107_egres_hosp/\")\nHOSP &lt;- read_delim(paste0(dir_hosp, \"2023-11-07  DatosEgresosHosp_encrip.csv\"),\n    delim = \"~\", \n    na = c(\"\", \"NA\", \"null\"),\n    guess_max = min(1e5, Inf),\n    escape_double = FALSE, \n    trim_ws = TRUE)|&gt; \n  janitor::clean_names()\n\n\nWarning: One or more parsing issues, call problems() on your data frame for details, e.g.: dat &lt;- vroom(…) problems(dat)\n\n\nRows: 29146157 Columns: 25 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “~” chr (14): RUN, NOMBRE_ESTAB, T_DIAG1, DIAG1, GLOSA_DIAG1, T_DIAG2, DIAG2, G… dbl (9): ESTAB_HOMO, DIAS_ESTAD, SEXO, TIPO_EDAD, EDAD_ANOS, PROCEDENCI, I… date (2): FECHA_INGRESO, FECHA_EGRESO\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nCode\nproblems_HOSP &lt;- problems(HOSP)\nHOSP$year&lt;- lubridate::year(HOSP$fecha_egreso)\n\n#format to polars\nHOSP_pl &lt;- as_polars_df(HOSP)\n\n#seleccionamos los ingresos hospitalarios que correspondan a las observaciones de nuestro interés\nHOSP_filter_pl &lt;- HOSP_pl$join(\n  SISTRAT23_c1_2010_2024_pl$select(\"hash_key\")$unique(subset = \"hash_key\"),\n  left_on = \"run\",\n  right_on = \"hash_key\",\n  how = \"inner\"  # Utilizamos inner join para seleccionar las filas con coincidencias\n)\n\n\nThen, we discarded the following HASHs: 1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464 & e8e014fa3a46c3583e25ba2b45629703a530799199d2cbc8cf5f21ede7fb389c because they were associated to inconclusive information and were not able to identify subjects accurately.\n\n\nCode\nHOSP_filter_pl_filt &lt;- HOSP_filter_pl$filter(\n  !pl$col(\"run\")$is_in(c(\n    \"1bad6b8cf97131fceab8543e81f7757195fbb1d36b376ee994ad1cf17699c464\",\n    \"e8e014fa3a46c3583e25ba2b45629703a530799199d2cbc8cf5f21ede7fb389c\"\n  ))\n)\n\nHOSP_filter_df &lt;- HOSP_filter_pl_filt$to_data_frame()\nrm(HOSP)\nrm(HOSP_pl)\n\n\nTo close the project, we erase polars objects.\n\n\nCode\nrm(list = ls()[grepl(\"_pl$\", ls())])"
  },
  {
    "objectID": "import_c2_c6_data_adm_25.html#loading-packages-and-uniting-databases",
    "href": "import_c2_c6_data_adm_25.html#loading-packages-and-uniting-databases",
    "title": "SENDAs Agreement 1 Update 2010-2022",
    "section": "Loading Packages and uniting databases",
    "text": "Loading Packages and uniting databases\nProceed to load the necessary packages.\n\n\n\nCode\nunlink(\"*_files\", recursive=T)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# --- Bootstrap reticulate con ruta relativa a getwd() ---\nsuppressPackageStartupMessages(library(reticulate))\n\n# Busca .mamba_root/envs/py311/python.exe desde getwd() hacia padres\nfind_python_rel &lt;- function(start = getwd(),\n                            rel = file.path(\".mamba_root\",\"envs\",\"py311\",\"python.exe\")) {\n  cur &lt;- normalizePath(start, winslash = \"/\", mustWork = FALSE)\n  repeat {\n    cand &lt;- normalizePath(file.path(cur, rel), winslash = \"/\", mustWork = FALSE)\n    if (file.exists(cand)) return(cand)\n    parent &lt;- dirname(cur)\n    if (identical(parent, cur)) return(NA_character_)  # llegó a la raíz\n    cur &lt;- parent\n  }\n}\n\npy &lt;- find_python_rel()\n\nif (is.na(py)) {\n  stop(\"No se encontró Python relativo a getwd() (buscando '.mamba_root/envs/py311/python.exe').\\n\",\n       \"Directorio actual: \", getwd())\n}\n\n# Forzar ese intérprete\nSys.unsetenv(c(\"RETICULATE_CONDAENV\",\"RETICULATE_PYTHON_FALLBACK\"))\nSys.setenv(RETICULATE_PYTHON = py)\nuse_python(py, required = TRUE)\n\npy_config()  # verificación\n\n\npython:         G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python.exe\nlibpython:      G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python311.dll\npythonhome:     G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311\nversion:        3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:           [NOT FOUND]\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#https://github.com/rstudio/renv/issues/544\n#renv falls back to copying rather than symlinking, which is evidently very slow in this configuration.\nrenv::settings$use.cache(FALSE)\n\n#check if rstools is installed\ntry(installr::install.Rtools(check_r_update=F))\n\n\nInstalling package into ‘G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32’ (as ‘lib’ is unspecified)\n\n\nError in contrib.url(repos, \"source\") : \n  trying to use CRAN without setting a mirror\n\n\nCode\n#change repository to CL\nlocal({\n  r &lt;- getOption(\"repos\")\n  r[\"CRAN\"] &lt;- \"https://cran.dcc.uchile.cl/\"\n  options(repos=r)\n})\n\nif(!require(pacman)){install.packages(\"pacman\");require(pacman)}\n\n\nCargando paquete requerido: pacman\n\n\nCode\npacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes\n\n\nNo 00LOCK detected in: G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32 No 00LOCK detected in: C:/Program Files/R/R-4.4.1/library\n\n\nCode\nif(Sys.info()[\"sysname\"]==\"Windows\"){\nif (getRversion() != \"4.4.1\") { stop(\"Requires R version 4.4.1; Actual: \", getRversion()) }\n}\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#PACKAGES#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n#Package to bring packages in development\nif(!require(devtools)){install.packages(\"devtools\")}\n\n\nCargando paquete requerido: devtools\n\n\nCargando paquete requerido: usethis\n\n\nCode\n#Package administration\nif(!require(renv)){install.packages(\"renv\")}\n\n\nCargando paquete requerido: renv\n\n\nAdjuntando el paquete: ‘renv’\n\n\nThe following object is masked from ‘package:devtools’:\ninstall\n\n\nThe following object is masked from ‘package:reticulate’:\nuse_python\n\n\nThe following objects are masked from ‘package:stats’:\nembed, update\n\n\nThe following objects are masked from ‘package:utils’:\nhistory, upgrade\n\n\nThe following objects are masked from ‘package:base’:\nautoload, load, remove, use\n\n\nCode\n#To manipulate data \nif(!require(tidyverse)){install.packages(\"tidyverse\")}\n\n\nCargando paquete requerido: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ✔ dplyr 1.1.4 ✔ readr 2.1.5 ✔ forcats 1.0.0 ✔ stringr 1.5.1 ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ✔ purrr 1.0.4\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() ✖ purrr::modify() masks renv::modify() ℹ Use the conflicted package (http://conflicted.r-lib.org/) to force all conflicts to become errors\n\n\nCode\nif(!require(janitor)){install.packages(\"janitor\")}\n\n\nCargando paquete requerido: janitor\nAdjuntando el paquete: ‘janitor’\nThe following objects are masked from ‘package:stats’:\nchisq.test, fisher.test\n\n\nCode\nif(!require(plyr)){install.packages(\"plyr\")}\n\n\nCargando paquete requerido: plyr\nYou have loaded plyr after dplyr - this is likely to cause problems. If you need functions from both plyr and dplyr, please load plyr first, then dplyr: library(plyr); library(dplyr) ——————————————————————————\nAdjuntando el paquete: ‘plyr’\nThe following objects are masked from ‘package:dplyr’:\narrange, count, desc, failwith, id, mutate, rename, summarise,\nsummarize\nThe following object is masked from ‘package:purrr’:\ncompact\n\n\nCode\n#For contingency tables\nif(!require(kableExtra)){install.packages(\"kableExtra\")}\n\n\nCargando paquete requerido: kableExtra\nAdjuntando el paquete: ‘kableExtra’\nThe following object is masked from ‘package:dplyr’:\ngroup_rows\n\n\nCode\n#For connections with python\nif(!require(reticulate)){install.packages(\"reticulate\")}\n#To manipulate big data\nif(!require(polars)){install.packages(\"polars\", repos = \"https://community.r-multiverse.org\")}\n\n\nCargando paquete requerido: polars\n\n\nWarning: package ‘polars’ was built under R version 4.4.3\n\n\nCode\n#To bring big databases\nif(!require(nanoparquet)){install.packages(\"nanoparquet\")}\n\n\nCargando paquete requerido: nanoparquet\n\n\nCode\n#interface for rstudio in R\nif(!require(rstudioapi)){install.packages(\"rstudioapi\")}\n\n\nCargando paquete requerido: rstudioapi\n\n\nCode\n#time handling\nif(!require(clock)){install.packages(\"clock\")}\n\n\nCargando paquete requerido: clock\nAdjuntando el paquete: ‘clock’\nThe following object is masked from ‘package:lubridate’:\nas_date\n\n\nCode\n#combine plots\nif(!require(ggpubr)){install.packages(\"ggpubr\")}\n\n\nCargando paquete requerido: ggpubr\nAdjuntando el paquete: ‘ggpubr’\nThe following object is masked from ‘package:plyr’:\nmutate\n\n\nCode\n#parallelized iterative processing\nif(!require(furrr)){install.packages(\"furrr\")}\n\n\nCargando paquete requerido: furrr Cargando paquete requerido: future\nAdjuntando el paquete: ‘future’\nThe following object is masked from ‘package:renv’:\nrun\n\n\nCode\n#work like a tibble with a data.table database\nif(!require(tidytable)){install.packages(\"tidytable\")}\n\n\nCargando paquete requerido: tidytable Warning: tidytable was loaded after dplyr. This can lead to most dplyr functions being overwritten by tidytable functions. Warning: tidytable was loaded after tidyr. This can lead to most tidyr functions being overwritten by tidytable functions.\nAdjuntando el paquete: ‘tidytable’\nThe following objects are masked from ‘package:ggpubr’:\ngroup_by, mutate\nThe following objects are masked from ‘package:plyr’:\narrange, count, desc, mutate, rename, summarise, summarize\nThe following objects are masked from ‘package:dplyr’:\nacross, add_count, add_tally, anti_join, arrange, between,\nbind_cols, bind_rows, c_across, case_match, case_when, coalesce,\nconsecutive_id, count, cross_join, cume_dist, cur_column, cur_data,\ncur_group_id, cur_group_rows, dense_rank, desc, distinct, filter,\nfirst, full_join, group_by, group_cols, group_split, group_vars,\nif_all, if_any, if_else, inner_join, is_grouped_df, lag, last,\nlead, left_join, min_rank, mutate, n, n_distinct, na_if, nest_by,\nnest_join, nth, percent_rank, pick, pull, recode, reframe,\nrelocate, rename, rename_with, right_join, row_number, rowwise,\nselect, semi_join, slice, slice_head, slice_max, slice_min,\nslice_sample, slice_tail, summarise, summarize, tally, top_n,\ntransmute, tribble, ungroup\nThe following objects are masked from ‘package:purrr’:\nmap, map_chr, map_dbl, map_df, map_dfc, map_dfr, map_int, map_lgl,\nmap_vec, map2, map2_chr, map2_dbl, map2_df, map2_dfc, map2_dfr,\nmap2_int, map2_lgl, map2_vec, pmap, pmap_chr, pmap_dbl, pmap_df,\npmap_dfc, pmap_dfr, pmap_int, pmap_lgl, pmap_vec, walk\nThe following objects are masked from ‘package:tidyr’:\ncomplete, crossing, drop_na, expand, expand_grid, extract, fill,\nnest, nesting, pivot_longer, pivot_wider, replace_na, separate,\nseparate_longer_delim, separate_rows, separate_wider_delim,\nseparate_wider_regex, tribble, uncount, unite, unnest,\nunnest_longer, unnest_wider\nThe following objects are masked from ‘package:tibble’:\nenframe, tribble\nThe following objects are masked from ‘package:stats’:\ndt, filter, lag\nThe following object is masked from ‘package:base’:\n%in%\n\n\nCode\n# pacman::p_load(\n#   altair, arrow, biostat3, car, caret, chilemapas, choroplethr, choroplethrAdmin1,\n#   choroplethrMaps, codebook, compareGroups, DiagrammeR, DiagrammeRsvg, DT, epiR, epitools,\n#   factoextra, FactoMineR, finalfit, flexsurv, fmsb, ggfortify, ggiraph, ggiraphExtra,\n#   ggpubr, ggrepel, glca, gridExtra, here, Hmisc, htmlwidgets, installr, janitor, kableExtra,\n#   lsmeans, magick, matrixStats, Metrics, muhaz, naniar, neuralnet, NeuralNetTools, pagedown,\n#   panelr, patchwork, pdp, plotly, plyr, plotly, posterdown, polycor, pROC, psych, radiant,\n#   rateratio.test, reshape, reshape2, reticulate, rio, ROCit, rnaturalearth, rsvg, sf, sjPlot,\n#   sqldf, Statamarkdown, survminer, survMisc, tableone, tidylog, tidyverse, treemapify, VIM,\n#   webshot, xaringanthemer, zoo, install=T\n# )\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#FUNCTIONS######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n#replace columns\nrename_if_present_to_main &lt;- function(df, rename_map, main_names) {\n  # keep only pairs where source exists and target is in the main schema\n  src_in_df   &lt;- rename_map %in% names(df)\n  tgt_in_main &lt;- names(rename_map) %in% main_names\n  present &lt;- rename_map[src_in_df & tgt_in_main]\n  if (length(present)) {\n    df &lt;- df %&gt;% rename(!!!setNames(unname(present), names(present)))\n  }\n  df\n}\nreplace_columns_if_any &lt;- function(df, x, y) {\n    if (x %in% names(df)) {\n        names(df)[names(df) == x] &lt;- y\n    }\n    return(df)\n}\n\n\n#WINDOWS do not restrict memory size\nif(.Platform$OS.type == \"windows\") withAutoprint({\n  memory.size()\n  memory.size(TRUE)\n  memory.limit()\n})\n\n\n&gt; memory.size()\n\n\nWarning: ‘memory.size()’ is no longer supported\n\n\n[1] Inf\n&gt; memory.size(TRUE)\n\n\nWarning: ‘memory.size()’ is no longer supported\n\n\n[1] Inf\n&gt; memory.limit()\n\n\nWarning: ‘memory.limit()’ is no longer supported\n\n\n[1] Inf\n\n\nCode\nmemory.limit(size=56000)\n\n\nWarning: ‘memory.limit()’ is no longer supported\n\n\n[1] Inf\n\n\nCode\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# NO MORE DEBUGS\noptions(error = NULL)        # si antes tenías options(error = recover) o browser)\noptions(browserNLdisabled = FALSE)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#NAs are replaced with \"\" in knitr kable\noptions(knitr.kable.NA = '')\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#to format rows in bold\nformat_cells &lt;- function(df, rows ,cols, value = c(\"italics\", \"bold\", \"strikethrough\")){\n\n  # select the correct markup\n  # one * for italics, two ** for bold\n  map &lt;- setNames(c(\"*\", \"**\", \"~~\"), c(\"italics\", \"bold\", \"strikethrough\"))\n  markup &lt;- map[value]  \n\n  for (r in rows){\n    for(c in cols){\n\n      # Make sure values are not factors\n      df[[c]] &lt;- as.character( df[[c]])\n\n      # Update formatting\n      df[r, c] &lt;- ifelse(nchar(df[r, c])==0,\"\",paste0(markup, gsub(\" \", \"\", df[r, c]), markup))\n    }\n  }\n\n  return(df)\n}\n#To produce line breaks in messages and warnings\nknitr::knit_hooks$set(\n   error = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-danger\" style=\"font-size: 0.7rem !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Error', '**Error**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   warning = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-warning\" style=\"font-size: 0.7rem !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Warning:', '**Warning**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   message = function(x, options) {\n     paste('&lt;div class=\"message\" style=\"font-size: 0.7rem !important;\"&gt;',\n           gsub('##', '\\n', x),\n           '&lt;/div&gt;', sep = '\\n')\n   }\n)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#CONFIG #######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\noptions(scipen=2) #display numbers rather scientific number\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#ENCODING#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nconv_chars &lt;- data.frame(\n    ANSI = c(\"Á\", \"á\", \"É\", \"é\", \"Í\", \"í\", \"Ó\", \"ó\", \"Ú\", \"ú\", \"Ñ\", \"ñ\", \"¿\", \"ó\"),\n    UTF_8 = c(\"Ã\", \"Ã¡\", \"Ã‰\", \"Ã©\", \"Ã\", \"Ã­\", \"Ã“\", \"Ã³\", \"Ãš\", \"Ãº\", \"Ã‘\", \"Ã±\", \"Â¿\", \"Ã²\"),\n    JAVASCRIPT = c(\"u00c1\", \"u00e1\", \"u00c9\", \"u00e9\", \"u00cd\", \"u00ed\", \"u00d3\", \"u00f3\", \"u00da\", \"u00fa\", \"u00d1\", \"u00f1\", \"u00bf\", \"0xF2\"),\n    HTML = c(\"&#193;\", \"&#225;\", \"&#201;\", \"&#233;\", \"&#205;\", \"&#237;\", \"&#211;\", \"&#243;\", \"&#218;\", \"&#250;\", \"&#209;\", \"&#241;\", \"&#191;\", \"\")\n)\n\nconvert_chars &lt;- function(x) {\n    x &lt;- gsub(\"ÃƒÂ³\", \"ó\", x)  # ó\n    x &lt;- gsub(\"ÃƒÂ¡\", \"á\", x)  # á\n    x &lt;- gsub(\"ÃƒÂ©\", \"é\", x)  # é\n    x &lt;- gsub(\"ÃƒÂº\", \"ú\", x)  # ú\n    x &lt;- gsub(\"ÃƒÂ±\", \"ñ\", x)  # ñ\n    x &lt;- gsub(\"Ãƒâ€˜\", \"Ñ\", x) # Ñ (mayúscula)\n    x &lt;- gsub(\"ÃƒÂ\", \"Á\", x)   # Á\n    x &lt;- gsub(\"Ã‚Âº\", \"º\", x)  # º\n    x &lt;- gsub(\"Ã‚Â°\", \"°\", x)  # °\n    x &lt;- gsub(\"Ã‚Âª\", \"ª\", x)  # ª\n    x &lt;- gsub(\"Ã‚Â¡\", \"¡\", x)  # ¡\n    x &lt;- gsub(\"Ã‚Â¿\", \"¿\", x)  # ¿\n    x &lt;- gsub(\"ÃƒÂ­\", \"í\", x)  # í\n    x &lt;- gsub(\"Ãƒâ€œ\", \"Ó\", x)  # Ó\n    x &lt;- gsub(\"Ãƒâ€š\", \"Ê\", x)  # Ê\n    x &lt;- gsub(\"Ãƒâ€\", \"É\", x)  # É\n    x &lt;- gsub(\"ÃƒÂ¼\", \"ü\", x)  # ü\n    x &lt;- gsub(\"ÃƒÂ¯\", \"ï\", x)  # ï\n    x &lt;- gsub(\"ÃƒÂ¶\", \"ö\", x)  # ö\n    x &lt;- gsub(\"Ã‚Â«\", \"«\", x)  # «\n    x &lt;- gsub(\"Ã‚Â»\", \"»\", x)  # »\n    x &lt;- gsub(\"Ãƒâ€¡\", \"Ç\", x)  # Ç\n    x &lt;- gsub(\"ÃƒÂ§\", \"ç\", x)  # ç\n    x &lt;- gsub(\"Ã‚Â\", \"\", x)    # Otros casos residuales\n    x &lt;- gsub(\"Ãƒ\", \"\", x)     # Otros casos residuales\n    return(x)\n}\n\nsum_dates &lt;- function(x){\n  \n  cbind.data.frame(\nmin= as.Date(min(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\"),\np001= as.Date(quantile(unclass(as.Date(x)), .001, na.rm=T), origin = \"1970-01-01\"),\np005= as.Date(quantile(unclass(as.Date(x)), .005, na.rm=T), origin = \"1970-01-01\"),\np025= as.Date(quantile(unclass(as.Date(x)), .025, na.rm=T), origin = \"1970-01-01\"),\np25= as.Date(quantile(unclass(as.Date(x)), .25, na.rm=T), origin = \"1970-01-01\"),\np50= as.Date(quantile(unclass(as.Date(x)), .5, na.rm=T), origin = \"1970-01-01\"),\np75= as.Date(quantile(unclass(as.Date(x)), .75, na.rm=T), origin = \"1970-01-01\"),\np975= as.Date(quantile(unclass(as.Date(x)), .975, na.rm=T), origin = \"1970-01-01\"),\np995= as.Date(quantile(unclass(as.Date(x)), .995, na.rm=T), origin = \"1970-01-01\"),\np999= as.Date(quantile(unclass(as.Date(x)), .999, na.rm=T), origin = \"1970-01-01\"),\nmax= as.Date(max(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\")\n  )\n}\n\n# Define the function adapted for Polars\nsum_dates_polars &lt;- function(df, date_col) {\n  # Create the list of quantiles\n  quantiles &lt;- c(0.001, 0.005, 0.025, 0.25, 0.5, 0.75, 0.975, 0.995, 0.999)\n  # Create expressions to calculate min and max\n  expr_list &lt;- list(\n    pl$col(date_col)$min()$alias(\"min\"),\n    pl$col(date_col)$max()$alias(\"max\")\n  )\n  # Add expressions for quantiles\n  for (q in quantiles) {\n    expr_list &lt;- append(expr_list, pl$col(date_col)$quantile(q)$alias(paste0(\"p\", sub(\"\\\\.\", \"\", as.character(q)))))\n  }\n  # Apply the expressions and return a DataFrame with the results\n  df$select(expr_list)\n}\n\n\n\n\n\nC2-C6\nSENDA has the following treatment programs:\n\nGeneral Adult Program (covered in Agreement 1 or C1)\nSpecific Women’s Program (covered in Agreement 1 or C1)\nStreet Program\nGeneral Children and Adolescents Program\nProbation Program\nAdolescent Offenders Program\nAdult Offenders Program\n\n(Source: https://www.senda.gob.cl/wp-content/uploads/2022/05/Cuenta-Publica-SENDA-2022.pdf)\n\n\nCode\n#E:\\Mi unidad\\Alvacast\\SISTRAT 2023\\data\\20231018_original_data\n# Define the directories\ndir_c2_c6_oct &lt;- paste0(gsub(\"cons\", \"\", \n                             paste0(getwd(),\"cons\")\n), \"data/20231018_original_data/\")\n#matches a string that starts with c\nSISTRAT23_c26&lt;-list.files(path=toString(dir_c2_c6_oct), pattern=\"^c\")\n\ndir_c1_oct &lt;- paste0(gsub(\"cons\", \"\", \n                          paste0(getwd(),\"/cons\")\n                          ), \"data/20231018_original_data/\")\n\n# Function to simplify pattern matching\nmatches_pattern &lt;- function(x, patterns) {\n  any(sapply(patterns, function(p) grepl(p, x)))\n}\n\n# Create a function to process each file\nprocess_file &lt;- function(dir, x) {\n  # Determine the HASH_KEY index based on file name\n  prefix &lt;- ifelse(matches_pattern(x, \"dup1\"), \"SISTRAT23dup1_\", \n                   ifelse(matches_pattern(x, \"dup2\"), \"SISTRAT23dup2_\", \"SISTRAT23_\"))\n  \n  # Read and process the file\n  dataset&lt;-readr::read_delim(paste0(dir, x),\n                             na = c(\"\", \"NA\", \"null\"),\n                             locale = locale(encoding = \"windows-1252\"),\n                             guess_max = min(1e5, Inf),\n                             skip = 0)\n  colnames(dataset) &lt;- sapply(names(dataset), convert_chars)\n  \n  dataset %&gt;% \n    janitor::clean_names() %&gt;%\n    dplyr::rename(\n      HASH_KEY = !!names(.[(ncol(.))])) %&gt;%\n    dplyr::mutate(TABLE = rep(x)) %&gt;%\n    dplyr::select(TABLE, HASH_KEY, everything()) %&gt;%\n    assign(paste0(prefix, stringr::str_sub(x, 1, 4)), ., envir = .GlobalEnv)\n}\n\n#Read data and format\npurrr::walk(SISTRAT23_c26, ~process_file(toString(dir_c2_c6_oct), .x))\n\n\nRows: 16383 Columns: 88 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (74): CodigoIdentificaciÃƒÂƒn, NombreCentro, RegiÃƒÂƒnCentro, ComunaUsua… dbl (11): Edad, NÃƒÂƒÃ‚Âºmerodehijos, AÃƒÂƒosDeserciÃƒÂƒnEscolar, EdadInicio… lgl (3): OrientaciÃƒÂƒnSexual, OpciÃƒÂƒndiscapacidad, escolaridad_opc\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 17471 Columns: 88 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (76): CodigoIdentificaciÃƒÂƒn, NombreCentro, RegiÃƒÂƒnCentro, ComunaUsua… dbl (12): Edad, NÃƒÂƒÃ‚Âºmerodehijos, AÃƒÂƒosDeserciÃƒÂƒnEscolar, EdadInicio…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 2055 Columns: 71 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (61): CodigoIdentificaciÃƒÂ³n, NombreCentro, TipoCentro, RegiÃƒÂ³ndelCen… dbl (9): DiasenTratamiento, NMesesenTratamiento, Edad, TiempoenCalleAÃƒÂ±o,… lgl (1): OrientaciÃƒÂ³nSexual\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 2273 Columns: 75 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (63): CODIGOIDENTIFICACION, NOMBRECENTRO, TIPOCENTRO, REGIONDELCENTRO, C… dbl (11): NUMERODEHIJOS, NUMEROTRATAMIENTOSANTERIORES, EDADDEINICIOSUSTANCIA… lgl (1): OrientaciÃƒÂ³nSexual\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 8015 Columns: 89 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (77): CodigoIdentificaciÃƒÂƒn, NombreCentro, TipodeCentro, NombreConsorc… dbl (11): DiasenTratamiento, NMesesTratamiento, Edad, NÃƒÂƒÃ‚Âºmerodehijos, … lgl (1): EnTribunalesdeFamilia1\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 1563 Columns: 81 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (66): CODIGOIDENTIFICACION, NombreUsuario, NOMBREDELCENTRO, TIPOCENTRO, … dbl (11): DiasenTratamiento, NMesesenTratamiento, NUMERODEHIJOS, NUMEROTRATA… lgl (4): DURACIONDELACONDENADÃƒÂAS, TIEMPOCUMPLIMIENTODECONDENAA, TIEMPOCU…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nCode\n# Process C2-C6 data\nCONS_C2 &lt;- plyr::rbind.fill(SISTRAT23dup1_c2_o, SISTRAT23dup2_c2_o) %&gt;% \n  data.table::data.table() %&gt;% \n  dplyr::mutate(TABLE = substr(TABLE, start=1, stop=2))\n\nCONS_C3 &lt;- SISTRAT23_c3_o %&gt;% dplyr::mutate(TABLE = substr(TABLE, start=1, stop=2))\nCONS_C4 &lt;- SISTRAT23_c4_o %&gt;% dplyr::mutate(TABLE = substr(TABLE, start=1, stop=2))\nCONS_C5 &lt;- SISTRAT23_c5_o %&gt;% dplyr::mutate(TABLE = substr(TABLE, start=1, stop=2))\nCONS_C6 &lt;- SISTRAT23_c6_o %&gt;% dplyr::mutate(TABLE = substr(TABLE, start=1, stop=2))\n\n\nReplicate the analysis for 2023-2024 databases and merged them. We have the doubt of what column bf means.\n\n\nCode\ndir_c2_c6_oct_25 &lt;- paste0(gsub(\"cons\", \"\", \n                          paste0(getwd(),\"/cons\")\n                          ), \"data/20250529_original_data/\")\n\n#matches a string that contains _enc.\nSISTRAT23_c26_25&lt;-list.files(dir_c2_c6_oct_25, pattern = \"c[2-6]\")\n\n\n# Create a function to process each file\nprocess_file23_c26 &lt;- function(dir, x) {\n  # Determine the HASH_KEY index based on file name\n  # Read and process the file\n  dataset&lt;-readr::read_delim(paste0(dir_c2_c6_oct_25, x),\n                             na = c(\"\", \"NA\", \"null\"),\n                             locale = locale(encoding = \"windows-1252\"),\n                             guess_max = min(1e5, Inf),\n                             skip = 0)\n  colnames(dataset) &lt;- sapply(names(dataset), convert_chars)\n  \n  dataset %&gt;% \n    janitor::clean_names() %&gt;%\n    dplyr::rename(\n      HASH_KEY = !!names(.[(ncol(.))])) %&gt;%\n    dplyr::mutate(TABLE = 2023) %&gt;%\n    dplyr::select(TABLE, HASH_KEY, everything()) %&gt;%\n    assign(paste0(\"df_2022_24_\", stringr::str_sub(x, 11,12)), ., envir = .GlobalEnv)\n}\n\n#Apply function\npurrr::walk(SISTRAT23_c26_25, ~process_file23_c26(toString(dir_c2_c6_oct), .x))\n\n\nRows: 10325 Columns: 87 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (76): CodigoIdentificaciÃƒÂ³n, NombreCentro, RegiÃƒÂ³nCentro, ComunaUsua… dbl (11): Edad, NÃƒÂºmerodehijos, AÃƒÂ±osDeserciÃƒÂ³nEscolar, EdadInicioSust…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 1022 Columns: 71 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (61): CodigoIdentificaciÃƒÂ³n, NombreCentro, TipoCentro, RegiÃƒÂ³ndelCen… dbl (9): DiasenTratamiento, NMesesenTratamiento, Edad, TiempoenCalleAÃƒÂ±o,… lgl (1): OrientaciÃƒÂ³nSexual\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 891 Columns: 75 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (63): CODIGOIDENTIFICACION, NOMBRECENTRO, TIPOCENTRO, REGIONDELCENTRO, C… dbl (11): NUMERODEHIJOS, NUMEROTRATAMIENTOSANTERIORES, EDADDEINICIOSUSTANCIA… lgl (1): OrientaciÃƒÂ³nSexual\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 4425 Columns: 89 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (78): CodigoIdentificaciÃƒÂƒn, NombreCentro, TipodeCentro, NombreConsorc… dbl (11): DiasenTratamiento, NMesesTratamiento, Edad, NÃƒÂƒÃ‚Âºmerodehijos, …\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message. Rows: 975 Columns: 81 ── Column specification ──────────────────────────────────────────────────────── Delimiter: “;” chr (66): CODIGOIDENTIFICACION, NombreUsuario, NOMBREDELCENTRO, TIPOCENTRO, … dbl (11): DiasenTratamiento, NMesesenTratamiento, NUMERODEHIJOS, NUMEROTRATA… lgl (4): DURACIONDELACONDENADÃƒÂAS, TIEMPOCUMPLIMIENTODECONDENAA, TIEMPOCU…\nℹ Use spec() to retrieve the full column specification for this data. ℹ Specify the column types or set show_col_types = FALSE to quiet this message.\n\n\nCode\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ncat(\"Normalize variable names\")\n\nrename_if_present &lt;- function(df, rename_map) {\n  present &lt;- rename_map[rename_map %in% names(df)]\n  if (length(present)) {\n    df &lt;- df %&gt;% rename(!!!setNames(unname(present), names(present)))\n  }\n  df\n}\n\n# c2 — needs renaming\nrename_map_c2 &lt;- c(\n  \"codigo_identificaci_afn\"     = \"codigo_identificacion\",\n  \"regi_afn_centro\"             = \"region_centro\",\n  \"n_afomerodehijos\"            = \"numerodehijos\",\n  \"a_afos_deserci_afn_escolar\"  = \"anos_desercion_escolar\",\n  \"via_administraci_afn\"        = \"via_administracion\",\n  \"a_setratadeunamujerembaraza\" = \"setratadeunamujerembarazad\",\n  \"orientaci_afn_sexual\"        = \"orientaci_a2n_sexual\",\n  \"opci_afndiscapacidad\"        = \"opciondiscapacidad\"\n)\n\ndf_2022_24_c2 &lt;- rename_if_present(df_2022_24_c2, rename_map_c2)\n\n# c3–c6 — maps intentionally empty (names already match)\ndf_2022_24_c3 &lt;- rename_if_present(df_2022_24_c3, c())\ndf_2022_24_c4 &lt;- rename_if_present(df_2022_24_c4, c())\ndf_2022_24_c5 &lt;- rename_if_present(df_2022_24_c5, c())\ndf_2022_24_c6 &lt;- rename_if_present(df_2022_24_c6, c())\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n#Merge 2024 with 2025\nCONS_C2_25 &lt;- plyr::rbind.fill(CONS_C2, df_2022_24_c2) %&gt;% \n  data.table::data.table()\nCONS_C3_25 &lt;- plyr::rbind.fill(CONS_C3, df_2022_24_c3) %&gt;% \n  data.table::data.table()\nCONS_C4_25 &lt;- plyr::rbind.fill(CONS_C4, df_2022_24_c4) %&gt;% \n  data.table::data.table()\nCONS_C5_25 &lt;- plyr::rbind.fill(CONS_C5, df_2022_24_c5) %&gt;% \n  data.table::data.table()\nCONS_C6_25 &lt;- plyr::rbind.fill(CONS_C6, df_2022_24_c6) %&gt;% \n  data.table::data.table()\n\n\nunique_values_list_CONS_C2_25 &lt;- setNames(\n    lapply(setdiff(names(CONS_C2_25),c(\"HASH_KEY\")), function(col_name) {\n        CONS_C2_25 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(CONS_C2_25),c(\"HASH_KEY\"))\n)\nunique_values_list_CONS_C3_25 &lt;- setNames(\n    lapply(setdiff(names(CONS_C3_25),c(\"HASH_KEY\")), function(col_name) {\n        CONS_C3_25 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(CONS_C3_25),c(\"HASH_KEY\"))\n)\nunique_values_list_CONS_C4_25 &lt;- setNames(\n    lapply(setdiff(names(CONS_C4_25),c(\"HASH_KEY\")), function(col_name) {\n        CONS_C4_25 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(CONS_C4_25),c(\"HASH_KEY\"))\n)\nunique_values_list_CONS_C5_25 &lt;- setNames(\n    lapply(setdiff(names(CONS_C5_25),c(\"HASH_KEY\")), function(col_name) {\n        CONS_C5_25 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(CONS_C5_25),c(\"HASH_KEY\"))\n)\nunique_values_list_CONS_C6_25 &lt;- setNames(\n    lapply(setdiff(names(CONS_C6_25),c(\"HASH_KEY\")), function(col_name) {\n        CONS_C6_25 |&gt;\n            select(all_of(col_name)) |&gt;\n            distinct() |&gt;\n            pull()\n    }),\n    setdiff(names(CONS_C6_25),c(\"HASH_KEY\"))\n)\ndistinct_values_dbs_c2c6&lt;- \nrbind.data.frame(\ncbind.data.frame(df=\"c2\",list_to_df(unique_values_list_CONS_C2_25)),\ncbind.data.frame(df=\"c3\",list_to_df(unique_values_list_CONS_C3_25)),\ncbind.data.frame(df=\"c4\",list_to_df(unique_values_list_CONS_C4_25)),\ncbind.data.frame(df=\"c5\",list_to_df(unique_values_list_CONS_C5_25)),\ncbind.data.frame(df=\"c6\",list_to_df(unique_values_list_CONS_C6_25))\n)\n\ndistinct_values_dbs_c2c6|&gt;\n  group_by(df, variable)|&gt;  \n  slice(1:5)|&gt; \n  rio::export(\"_out/unique_values_variable_names_db.csv\")\n\n\nNormalize variable names\n\n\n\nNormalize variable names & explore data\nWe normalized the variable names according to the C1 naming convention. We assumed that “commune/municipality” referred to the patient rather than the center. Variable names were formatted in snake case for greater standardization. We also corrected the names according to the information provided by SENDA for fields where only the position name in alphabetical order was available: columnas_sin_nombre_REV.\n\n\nCode\nMAIN_NAMES &lt;- names(SISTRAT23_c1_2010_2024_df2)\n\n\nmap_c2 &lt;- c(\n  \"region_del_centro\"                                   = \"region_centro\",\n  \"servicio_de_salud\"                                   = \"servicio_salud\",\n  \"comuna_residencia\"                                   = \"comuna_usuario\",# supose uers commune\n  \"origen_de_ingreso\"                                   = \"origen_ingreso\",\n  \"fecha_ingreso_a_tratamiento\"                         = \"fecha_ingreso_tratamiento\",\n  \"numero_de_tratamientos_anteriores\"                   = \"numero_tratamientos_anteriores\",\n  \"sustancia_de_inicio\"                                 = \"sustancia_inicial\",\n  \"edad_inicio_consumo\"                                 = \"edad_inicio_sustancia_inicial\",\n  \"frecuencia_de_consumo_sustancia_principal\"           = \"frecuencia_consumo\",\n  \"via_administracion_sustancia_principal\"              = \"via_administracion\",\n  \"diagnostico_trs_consumo_sustancia\"                   = \"diagnosticotrsconsumosustanc\",\n  \"diagnostico_trs_fisico\"                              = \"diagnosticotrsfisico\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv\"                 = \"diagnosticotrsdsm\",\n  \"diagnostico_trs_psiquiatrico_sub_dsm_iv\"             = \"diagnosticotrsdsmsub\",\n  \"x2_diagnostico_trs_psiquiatrico_dsm_iv\"              = \"diagnosticotrsdsm2\",\n  \"x2_diagnostico_trs_psiquiatrico_sub_dsm_iv\"          = \"diagnosticotrsdsmsub2\",\n  \"x3_diagnostico_trs_psiquiatrico_dsm_iv\"              = \"diagnosticotrsdsm3\",\n  \"x3_diagnostico_trs_psiquiatrico_sub_dsm_iv\"          = \"diagnosticotrsdsmsub3\",\n  \"diagnostico_trs_psiquiatrico_cie_10\"                 = \"diagnosticotrscie10\",\n  \"diagnostico_trs_psiquiatrico_sub_cie_10\"             = \"diagnosticotrscie10sub\",\n  \"x2_diagnostico_trs_psiquiatrico_cie_10\"              = \"diagnosticotrscie102\",\n  \"x2_diagnostico_trs_psiquiatrico_sub_cie_10\"          = \"diagnosticotrscie10sub2\",\n  \"x3_diagnostico_trs_psiquiatrico_cie_10\"              = \"diagnosticotrscie103\",\n  \"x3_diagnostico_trs_psiquiatrico_sub_cie_10\"          = \"diagnosticotrscie10sub3\",\n  \"compromiso_biopsicosocial\"                           = \"compromisobiopsicosocial\",\n  \"se_trata_de_una_mujer_embarazada\"                    = \"setratadeunamujerembarazad\",\n  \"fecha_egreso_de_tratamiento\"                         = \"fecha_egreso\",\n  \"motivo_de_egreso\"                                    = \"motivo_egreso\",\n  \"evaluacion_del_proceso_terapeutico\"                  = \"evaluacion_proceso_terapeutico_e\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"  = \"patronde_consumo\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"  = \"situacion_familiar\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\" = \"relacion_interpesonal\",\n  \"evaluacion_al_egreso_respecto_a_situacion_ocupacional\"    = \"situacion_ocupacional\",\n  \"evaluacion_al_egreso_respecto_salud_mental\"          = \"salud_mental\",\n  \"evaluacion_al_egreso_respecto_salud_fisica\"          = \"salud_fisica\",\n  \"dias_en_tratamiento\"                                 = \"diasdetratamiento\",\n  \"n_meses_en_tratamiento\"                              = \"n_mesesen_tratamiento\",\n  \"tipo_centro\"                                         = \"tipode_centro\",\n  \"id_centro\"                                           = \"i_dcentro\",\n  \"identidad_de_genero\"                                 = \"identidaddegenero\",\n  \"orientacion_sexual\"                                  = \"orientaci_a2n_sexual\",\n  \"opcion_discapacidad\"                                 = \"opciondiscapacidad\",\n  \"ha_estado_embarazada_egreso\"                         = \"haestadoembarazadaegreso\"\n)\nCONS_C2_25 &lt;- rename_if_present_to_main(CONS_C2_25, map_c2, MAIN_NAMES)\nCONS_C2_25 &lt;- replace_columns_if_any(\n    df = CONS_C2_25,\n    x = \"bi\",\n    y = \"otros_problemas_de_atencion_de_salud_mental2\"\n)\n\nmap_c3 &lt;- c(\n  \"region_del_centro\"                                   = \"regiondel_centro\",\n  \"servicio_de_salud\"                                   = \"serviciode_salud\",\n  \"dias_en_tratamiento\"                                 = \"diasen_tratamiento\",\n  \"n_meses_en_tratamiento\"                              = \"n_mesesen_tratamiento\",\n  \"origen_de_ingreso\"                                   = \"origende_ingreso\",\n  \"pais_nacimiento\"                                     = \"pa_a_s_nacimiento\",\n  \"numero_de_hijos\"                                     = \"numerode_hijos\",\n  \"numero_de_tratamientos_anteriores\"                   = \"numerode_tratamientos_anteriore\",\n  \"sustancia_de_inicio\"                                 = \"sustanciade_inicio\",\n  \"se_trata_de_una_mujer_embarazada\"                    = \"setratadeunamujerembarazad\",\n  \"escolaridad_ultimo_ano_cursado\"                      = \"escolaridadultimoanocursado\",\n  \"categoria_ocupacional\"                               = \"categor_a_a_ocupacional\",\n  \"rubro_trabaja\"                                       = \"enquerubrotrabaja\",\n  \"otras_sustancias_no1\"                                = \"otras_sustanciasno1\",\n  \"otras_sustancias_no2\"                                = \"otras_sustanciasno2\",\n  \"frecuencia_de_consumo_sustancia_principal\"           = \"frecuenciade_consumo_sustancia\",\n  \"via_administracion_sustancia_principal\"              = \"va_a_administracion_sustancia_pr\",\n  \"diagnostico_trs_consumo_sustancia\"                   = \"diagnostico_trs_consumo_sustanc\",\n  # \"diagnostico_trs_psiquiatrico_cie_10\"                 = \"diagnostico_trs_psiquiatrico_ci\",\n  # \"diagnostico_trs_psiquiatrico_sub_cie_10\"             = \"diagnostico_trs_psiquiatrico_su\",\n  # \"diagnostico_trs_psiquiatrico_dsm_iv\"                 = \"diagnostico_trs_psiquiatrico\",\n  \"diagnostico_trs_fisico\"                              = \"diagnostico_trs_fa_sico\",\n  \"otros_problemas_de_atencion_de_salud_mental\"         = \"otros_problemasde_atencionde_s\",\n  \"fecha_ingreso_a_tratamiento\"                         = \"fecha_ingresoa_tratamiento\",\n  \"fecha_egreso_de_tratamiento\"                         = \"fecha_egresode_tratamiento\",\n  \"motivo_de_egreso\"                                    = \"motivode_egreso\",\n  \"evaluacion_del_proceso_terapeutico\"                  = \"evaluaciondel_proceso_terapeuti\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"  = \"evaluacional_egreso_respectoal\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"  = \"evaluacional_egreso_respectoa\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\" = \"evaluacional_egreso_respecto_re\",\n  \"evaluacion_al_egreso_respecto_salud_mental\"          = \"evaluacional_egreso_respecto_sa\",\n  \"evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social\" = \"evaluacional_egreso_respecto_tr\",\n  \"ha_estado_embarazada_egreso\"                         = \"haestadoembarazadaegreso\",\n  \"identidad_de_genero\"                                 = \"identidaddegenero\",\n  \"opcion_discapacidad\"                                 = \"opciondiscapacidad\"\n)\nCONS_C3_25 &lt;- rename_if_present_to_main(CONS_C3_25, map_c3, MAIN_NAMES)\n# CONS_C3_25[,c(\"diagnostico_trs_psiquiatrico_ci\", \"diagnostico_trs_psiquiatrico_su\", \"diagnostico_trs_psiquiatrico\", \"ar\")]\nCONS_C3_25 &lt;- replace_columns_if_any(\n    df = CONS_C3_25,\n    x = \"ar\",\n    y = \"diagnostico_trs_psiquiatrico_sub_cie_10_2\"\n)\nCONS_C3_25 &lt;- replace_columns_if_any(\n    df = CONS_C3_25,\n    x = \"aw\",\n    y = \"otros_problemas_de_atencion_de_salud_mental_2\"\n)\nCONS_C3_25 &lt;- replace_columns_if_any(\n    df = CONS_C3_25,\n    x = \"bh\",\n    y = \"evaluacion_al_egreso_respecto_sit_ocup\"\n)\nCONS_C3_25 &lt;- replace_columns_if_any(\n    df = CONS_C3_25,\n    x = \"bj\",\n    y = \"evaluacion_al_egreso_respecto_salud_fisica\"\n)\n\n\nmap_c4 &lt;- c(\n  \"codigo_identificacion\"                               = \"codigoidentificacion\",\n  \"nombre_centro\"                                       = \"nombrecentro\",\n  \"tipo_centro\"                                         = \"tipocentro\",\n  \"region_del_centro\"                                   = \"regiondelcentro\",\n  \"fecha_nacimiento\"                                    = \"fechanacimiento\",\n  \"fecha_ingreso_a_tratamiento\"                         = \"fechaingresotratamiento\",\n  \"tipo_de_programa\"                                    = \"tipoprograma\",\n  \"tipo_de_plan\"                                        = \"tipoplan\",\n  \"origen_de_ingreso\"                                   = \"origendeingreso\",\n  \"consentimiento_informado\"                            = \"consentimientoinformado\",\n  \"pais_nacimiento\"                                     = \"paisnacimiento\",\n  \"estado_conyugal\"                                     = \"estadoconyugal\",\n  \"numero_de_hijos\"                                     = \"numerodehijos\",\n  \"escolaridad_ultimo_ano_cursado\"                      = \"escolaridadultimoaa_ocursado\",\n  \"se_trata_de_una_mujer_embarazada\"                    = \"setratadeunamujerembarazada\",\n  \"condicion_ocupacional\"                               = \"condicionocupacional\",\n  \"categoria_ocupacional\"                               = \"categoriaocupacional\",\n  \"rubro_trabaja\"                                       = \"enquerubrotrabaja\",\n  \"con_quien_vive\"                                      = \"conquienvive\",\n  \"parentesco_con_el_jefe_de_hogar\"                     = \"parentescoconeljefedehogar\",\n  \"tipo_de_vivienda\"                                    = \"tipovivienda\",\n  \"tenencia_de_la_vivienda\"                             = \"tenenciadelavivienda\",\n  \"numero_de_tratamientos_anteriores\"                   = \"numerotratamientosanteriores\",\n  \"fecha_ultimo_tratamiento\"                            = \"fechaultimotratamiento\",\n  \"sustancia_principal\"                                 = \"sustanciaprincipal\",\n  \"otras_sustancias_no1\"                                = \"otrasustanci_an1\",\n  \"otras_sustancias_no2\"                                = \"otrasustanci_an2\",\n  \"frecuencia_de_consumo_sustancia_principal\"           = \"frecuenciadeconsumosustancia\",\n  \"via_administracion_sustancia_principal\"              = \"viadeadministracionsustancia\",\n  \"sustancia_de_inicio\"                                 = \"sustanciadeinicio\",\n  \"edad_inicio_consumo\"                                 = \"edaddeiniciosustanciainicia\",\n  \"edad_inicio_sustancia_principal\"                     = \"edaddeinico_sustancia_principa\",\n  \"diagnostico_trs_consumo_sustancia\"                   = \"diagnosticotrsconsumosustanc\",\n  \"diagnostico_trs_psiquiatrico_cie_10\"                 = \"diagnosticotrspsiquiatricoci\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv\"                 = \"diagnosticotrspsiquiatricods\",\n  \"diagnostico_trs_fisico\"                              = \"diagnosticotrsfisico\",\n  \"otros_problemas_de_atencion_de_salud_mental\"         = \"otrosproblemasdeatenciondes\",\n  \"compromiso_biopsicosocial\"                           = \"comprimisobiopsicosocial\",\n  \"fecha_egreso_de_tratamiento\"                         = \"fechaegresotratamiento\",\n  \"motivo_de_egreso\"                                    = \"motivodeegreso\",\n  \"evaluacion_del_proceso_terapeutico\"                  = \"evaluaciondelprocesoterapeuti\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"  = \"evaluacionalegresorespectoal\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"  = \"evaluacionalegresorespectoa\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\" = \"evaluacionalegresorespectore\",\n  \"dias_en_tratamiento\"                                 = \"diasdetratamiento\",\n  \"ha_estado_embarazada_egreso\"                         = \"haestadoembarazadaegreso\",\n  \"identidad_de_genero\"                                 = \"identidaddegenero\",\n  \"orientacion_sexual\"                                  = \"orientacion_sexual\",\n  \"opcion_discapacidad\"                                 = \"opciondiscapacidad\"\n)\nCONS_C4_25 &lt;- rename_if_present_to_main(CONS_C4_25, map_c4, MAIN_NAMES)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"ao\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_2\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"ap\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_3\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"ar\",\n    y = \"diagnostico_trs_psiquiatrico_dsm_iv_2\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"as\",\n    y = \"diagnostico_trs_psiquiatrico_dsm_iv_3\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"av\",\n    y = \"otros_problemas_de_atencion_de_salud_mental_2\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"ba\",\n    y = \"tiempodepermanenciaprivadode_meses\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bb\",\n    y = \"tiempodepermanenciaprivadode_anos\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bf\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_al_egreso\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bj\",\n    y = \"evaluacion_al_egreso_respecto_a_situacion_ocupacional\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bk\",\n    y = \"evaluacion_al_egreso_respecto_salud_mental\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bl\",\n    y = \"evaluacion_al_egreso_respecto_salud_fisica\"\n)\nCONS_C4_25 &lt;- replace_columns_if_any(\n    df = CONS_C4_25,\n    x = \"bm\",\n    y = \"evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social\"\n)\n\nmap_c5 &lt;- c(\n  \"codigo_identificacion\"                               = \"codigo_identificaci_afn\",\n  \"tipo_centro\"                                         = \"tipode_centro\",\n  \"region_del_centro\"                                   = \"regi_afn_centro\",\n  \"comuna_residencia\"                                   = \"comuna_usuario\",# suposed commune of user\n  \"servicio_de_salud\"                                   = \"servicio_salud\",\n  \"tipo_de_plan\"                                        = \"tipode_plan\",\n  \"dias_en_tratamiento\"                                 = \"diasen_tratamiento\",\n  \"fecha_nacimiento\"                                    = \"fechanacimiento\",\n  \"n_meses_en_tratamiento\"                              = \"n_meses_tratamiento\",\n  \"fecha_ingreso_a_tratamiento\"                         = \"fecha_ingreso_tratamiento\",\n  \"origen_de_ingreso\"                                   = \"origen_ingreso\",\n  \"numero_de_hijos\"                                     = \"n_afomerodehijos\",\n  \"via_administracion_sustancia_principal\"              = \"via_administraci_afn\",\n  \"fecha_egreso_de_tratamiento\"                         = \"fecha_egreso\",\n  \"motivo_de_egreso\"                                    = \"motivo_egreso\",\n  \"otros_problemas_de_atencion_de_salud_mental\"         = \"otros_problemasde_atenci_afnde\",\n  \"evaluacion_del_proceso_terapeutico_e\"                = \"evaluacion_proceso_terapeutico_e\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"  = \"patronde_consumo\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"  = \"situacion_familiar\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\" = \"relacion_interpesonal\",\n  \"evaluacion_al_egreso_respecto_a_situacion_ocupacional\"    = \"situacion_ocupacional\",\n  \"evaluacion_al_egreso_respecto_salud_mental\"          = \"salud_mental\",\n  \"evaluacion_al_egreso_respecto_salud_fisica\"          = \"salud_fisica\",\n  \"diagnostico_trs_consumo_sustancia\"                   = \"diagn_afstico_trs_consumode_sus\",\n  \"diagnostico_trs_fisico\"                              = \"diagn_afstico_trs_f_afsico\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv\"                 = \"diagn_afstico_trs_psiqui_aftrico\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv_2\"               = \"diagn_afstico_trs_psiqui_aftric\",\n  \"motivodeegreso_alta_administra\"                      = \"motivo_de_egreso_alta_administrativa\",\n  \"orientacion_sexual\"                                  = \"orientaci_afn_sexual\",\n  \"opcion_discapacidad\"                                 = \"opci_afndiscapacidad\",\n  \"id_centro\"                                           = \"centro_id\",\n  \"identidad_de_genero\"                                 = \"identidaddegenero\",\n  \"ha_estado_embarazada_egreso\"                         = \"haestadoembarazadaegreso\"\n)\nCONS_C5_25 &lt;- rename_if_present_to_main(CONS_C5_25, map_c5, MAIN_NAMES)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"s\",\n    y = \"enlo_penal_2\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"be\",\n    y = \"diagnostico_trs_psiquiatrico_sub_dsm_iv\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bg\",\n    y = \"diagnostico_trs_psiquiatrico_sub_dsm_iv_2\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bh\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bi\",\n    y = \"diagnostico_trs_psiquiatrico_sub_cie_10\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bj\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_2\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bk\",\n    y = \"diagnostico_trs_psiquiatrico_sub_cie_10_2\"\n)\nCONS_C5_25 &lt;- replace_columns_if_any(\n    df = CONS_C5_25,\n    x = \"bm\",\n    y = \"otros_problemas_de_atencion_de_salud_mental_2\"\n)\n\nmap_c6 &lt;- c(\n  \"codigo_identificacion\"                               = \"codigoidentificacion\",\n  \"nombre_centro\"                                       = \"nombredelcentro\",\n  \"tipo_centro\"                                         = \"tipocentro\",\n  \"region_del_centro\"                                   = \"regiondelcentro\",\n  \"fecha_ingreso_a_tratamiento\"                         = \"fechaingresotratamiento\",\n  \"dias_en_tratamiento\"                                 = \"diasen_tratamiento\",\n  \"n_meses_en_tratamiento\"                              = \"n_mesesen_tratamiento\",\n  \"fecha_nacimiento\"                                    = \"fechanacimiento\",\n  \"consentimiento_informado\"                            = \"consentimientoinformado\",\n  \"comuna_residencia\"                                   = \"comuna\",# suposed commune of user\n  \"origen_de_ingreso\"                                   = \"origendeingreso\",\n  \"pais_nacimiento\"                                     = \"paisnacimiento\",\n  \"estado_conyugal\"                                     = \"estadoconyugal\",\n  \"numero_de_hijos\"                                     = \"numerodehijos\",\n  \"escolaridad_ultimo_ano_cursado\"                      = \"escolaridadultimoaa_ocursado\",\n  \"se_trata_de_una_mujer_embarazada\"                    = \"setratadeunamujerembarazada\",\n  \"condicion_ocupacional\"                               = \"condicionocupacional\",\n  \"categoria_ocupacional\"                               = \"categoriaocupacional\",\n  \"con_quien_vive\"                                      = \"conquienviva_a\",\n  \"parentesco_con_el_jefe_de_hogar\"                     = \"parentescoconeljefedehogar\",\n  \"tipo_de_vivienda\"                                    = \"tipovivienda\",\n  \"tenencia_de_la_vivienda\"                             = \"tenenciadelavivienda\",\n  \"numero_de_tratamientos_anteriores\"                   = \"numerotratamientosanteriores\",\n  \"fecha_ultimo_tratamiento\"                            = \"fechaultimotratamiento\",\n  \"sustancia_principal\"                                 = \"sustanciaprincipal\",\n  \"otras_sustancias_no1\"                                = \"otrasustanci_an1\",\n  \"otras_sustancias_no2\"                                = \"otrasustanci_an2\",\n  \"frecuencia_de_consumo_sustancia_principal\"           = \"frecuenciadeconsumosustancia\",\n  \"edad_inicio_sustancia_principal\"                     = \"edaddeiniciosustanciaprinci\",\n  \"via_administracion_sustancia_principal\"              = \"viadeadministracionsustancia\",\n  \"sustancia_de_inicio\"                                 = \"sustanciadeinicio\",\n  \"edad_inicio_consumo\"                                 = \"edaddeiniciosustanciainicia\",\n  \"diagnostico_trs_consumo_sustancia\"                   = \"diagnosticotrsconsumosustanc\",\n  \"diagnostico_trs_psiquiatrico_cie_10\"                 = \"diagnosticotrspsiquiatricoci\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv\"                 = \"diagnosticotrspsiquiatricods\",\n  \"otros_problemas_de_atencion_de_salud_mental\"         = \"otrosproblemasdeatenciondes\",\n  \"compromiso_biopsicosocial\"                           = \"comprimisobiopsicosocial\",\n  \"fecha_egreso_de_tratamiento\"                         = \"fechaegresotratamiento\",\n  \"motivo_de_egreso\"                                    = \"motivodeegreso\",\n  \"evaluacion_del_proceso_terapeutico\"                  = \"evaluaciondelprocesoterapeuti\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"  = \"evaluacionalegresorespectoal\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"  = \"evaluacionalegresorespectoa\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\" = \"evaluacionalegresorespectore\",\n  \"motivo_de_egreso_alta_administrativa\"                = \"motivoaltaadministrativa\",\n  \"ha_estado_embarazada_egreso\"                         = \"haestadoembarazadaegreso\",\n  \"identidad_de_genero\"                                 = \"identidaddegenero\",\n  \"orientacion_sexual\"                                  = \"orientacion_sexual\",\n  \"opcion_discapacidad\"                                 = \"opciondiscapacidad\"\n)\nCONS_C6_25 &lt;- rename_if_present_to_main(CONS_C6_25, map_c6, MAIN_NAMES)\n\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"an\",\n    y = \"frecuencia_de_consumo_sustancia_principal_medio_cerrado\"\n)\n\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"au\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_2\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"av\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_3\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"ax\",\n    y = \"diagnostico_trs_psiquiatrico_dsm_iv_2\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"ay\",\n    y = \"diagnostico_trs_psiquiatrico_dsm_iv_3\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"ba\",\n    y = \"otros_problemas_de_atencion_de_salud_mental_2\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"bn\",\n    y = \"diagnostico_trs_psiquiatrico_cie_10_al_egreso\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"br\",\n    y = \"evaluacion_al_egreso_respecto_a_situacion_ocupacional\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"bs\",\n    y = \"evaluacion_al_egreso_respecto_salud_mental\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"bt\",\n    y = \"evaluacion_al_egreso_respecto_salud_fisica\"\n)\nCONS_C6_25 &lt;- replace_columns_if_any(\n    df = CONS_C6_25,\n    x = \"bu\",\n    y = \"evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social\"\n)\n\n\n\n\n\nCode\nCONS_C6_25$edad_ingreso&lt;-\n time_length(interval(parse_date(CONS_C6_25$fechanacimiento,\"%d/%m/%Y\"), parse_date(CONS_C6_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\")), unit=\"year\")\n\n\nError in h(simpleError(msg, call)): error in evaluating the argument ‘x’ in selecting a method for function ‘time_length’: el argumento no fue usado (“%d/%m/%Y”)\n\n\nCode\n# Create the histograms for each dataset\nhist_c2 &lt;- ggplot(CONS_C2_25, aes(x = edad)) +\n  geom_histogram(fill = \"gray70\", color = \"black\", bins = 30) +\n  ggtitle(\"c2\")+ theme_bw()+ xlim(0,90)\n\nhist_c3 &lt;- ggplot(CONS_C3_25, aes(x = edad)) +\n  geom_histogram(fill = \"gray70\", color = \"black\", bins = 30) +\n  ggtitle(\"c3\")+ theme_bw()+ xlim(0,90)\n\nhist_c4 &lt;- ggplot(CONS_C4_25, aes(x = edad)) +\n  geom_histogram(fill = \"gray70\", color = \"black\", bins = 30) +\n  ggtitle(\"c4\")+ theme_bw()+ xlim(0,90)\n\nhist_c5 &lt;- ggplot(CONS_C5_25, aes(x = edad)) +\n  geom_histogram(fill = \"gray70\", color = \"black\", bins = 30) +\n  ggtitle(\"c5\")+ theme_bw()+ xlim(0,90)\n\nhist_c6 &lt;- ggplot(CONS_C6_25, aes(x = edad_ingreso)) +\n  geom_histogram(fill = \"gray70\", color = \"black\", bins = 30) +\n  ggtitle(\"c6\")+ theme_bw()+ xlim(0,90)\n\n# Combine histograms into a single plot\ncombined_plot &lt;- ggpubr::ggarrange(hist_c2, hist_c3, hist_c4, hist_c5, hist_c6, ncol = 3, nrow = 2)\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range (stat_bin()).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (geom_bar()). Removed 2 rows containing missing values or values outside the scale range (geom_bar()).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range (stat_bin()).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (geom_bar()).\n\n\nWarning: Removed 1 row containing non-finite outside the scale range (stat_bin()).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range (geom_bar()).\n\n\nError in purrr::map(): ℹ In index: 1. Caused by error in geom_histogram(): ! Problem while computing aesthetics. ℹ Error occurred in the 1st layer. Caused by error: ! objeto ‘edad_ingreso’ no encontrado\n\n\nCode\n# Display the combined plot\nprint(combined_plot)\n\n\nError: objeto ‘combined_plot’ no encontrado\n\n\n\n\n\n\nCode\n# Get the column names for each dataset\nnames_c2 &lt;- names(CONS_C2_25)\nnames_c3 &lt;- names(CONS_C3_25)\nnames_c4 &lt;- names(CONS_C4_25)\nnames_c5 &lt;- names(CONS_C5_25)\nnames_c6 &lt;- names(CONS_C6_25)\n\ndf_c2 &lt;- data.frame(Dataset = \"CONS_C2\", Column_Name = names_c2)\ndf_c3 &lt;- data.frame(Dataset = \"CONS_C3\", Column_Name = names_c3)\ndf_c4 &lt;- data.frame(Dataset = \"CONS_C4\", Column_Name = names_c4)\ndf_c5 &lt;- data.frame(Dataset = \"CONS_C5\", Column_Name = names_c5)\ndf_c6 &lt;- data.frame(Dataset = \"CONS_C6\", Column_Name = names_c6)\n\ndplyr::full_join(df_c2, df_c3, by = \"Column_Name\") %&gt;%\n    dplyr::full_join(df_c4, by = \"Column_Name\") %&gt;%\n    dplyr::full_join(df_c5, by = \"Column_Name\") %&gt;%\n    dplyr::full_join(df_c6, by = \"Column_Name\") %&gt;%\n    dplyr::arrange(Column_Name) -&gt; joined_df\n\njoined_df %&gt;% \n  dplyr::select(Column_Name, everything()) %&gt;% \n  dplyr::arrange(Column_Name) %&gt;% \n  dplyr::rename(\"c2\"=\"Dataset.x\",\"c3\"=\"Dataset.y\", \"c4\"=\"Dataset.x.x\", \"c5\"=\"Dataset.y.y\",\"c6\"=\"Dataset\") %&gt;% \n  dplyr::mutate_at(.vars = vars(matches(\"c[0-9]$\")),\n                        .funs = ~ ifelse(!is.na(.), \"X\", \"\")) %&gt;% \n  kbl(\"markdown\", caption=\"Replicated Fields in Databases\")\n\n\n\nReplicated Fields in Databases\n\n\n\n\n\n\n\n\n\n\nColumn_Name\nc2\nc3\nc4\nc5\nc6\n\n\n\n\nHASH_KEY\nX\nX\nX\nX\nX\n\n\nTABLE\nX\nX\nX\nX\nX\n\n\na_afos_deserci_afn_escolar\nX\n\n\nX\n\n\n\na_setratadeunamujerembaraza\nX\n\n\n\n\n\n\nactualmenteen_sistema_escolar\nX\n\n\nX\n\n\n\nantecedentes_penales\n\n\n\nX\n\n\n\naplicacia_nigi\n\n\n\n\nX\n\n\nasistencia_senameegreso\n\n\n\nX\n\n\n\nasistencia_senameingreso\n\n\n\nX\n\n\n\ncategoria_ocupacional\n\nX\nX\n\nX\n\n\ncausa_delito\nX\n\n\nX\n\n\n\ncodigo_identificaci_afn\nX\n\n\n\n\n\n\ncodigo_identificacion\n\nX\nX\nX\nX\n\n\ncompromiso_biopsicosocial\nX\nX\nX\nX\nX\n\n\ncomuna_residencia\nX\nX\n\nX\nX\n\n\ncomunadelcentro\n\n\nX\n\n\n\n\ncon_quien_vive\nX\nX\nX\nX\nX\n\n\nconcausajudicial\n\n\n\nX\n\n\n\ncondicion_ocupacional\n\nX\nX\n\nX\n\n\ncondiciondelaley20603\n\n\nX\n\n\n\n\nconsentimiento_informado\nX\nX\nX\nX\nX\n\n\nconsorcio\nX\n\n\n\n\n\n\ndelito\n\n\nX\n\n\n\n\ndelitoporelcualcumpleconden\n\n\n\n\nX\n\n\ndiagn_afstico_trs_psiqui_aftric\n\n\n\nX\n\n\n\ndiagnostico_trastorno_psiquiatri\n\nX\n\n\n\n\n\ndiagnostico_trs_consumo_sustancia\nX\nX\nX\nX\nX\n\n\ndiagnostico_trs_fa_sico2\n\nX\n\n\n\n\n\ndiagnostico_trs_fa_sico3\n\nX\n\n\n\n\n\ndiagnostico_trs_fisico\nX\nX\nX\nX\n\n\n\ndiagnostico_trs_psiquiatrico\n\nX\n\n\n\n\n\ndiagnostico_trs_psiquiatrico_ci\n\nX\n\n\n\n\n\ndiagnostico_trs_psiquiatrico_cie_10\nX\n\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_cie_10_2\n\n\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_cie_10_3\n\n\nX\n\nX\n\n\ndiagnostico_trs_psiquiatrico_cie_10_al_egreso\n\n\nX\n\nX\n\n\ndiagnostico_trs_psiquiatrico_dsm_iv\nX\n\nX\nX\nX\n\n\ndiagnostico_trs_psiquiatrico_dsm_iv_2\n\n\nX\n\nX\n\n\ndiagnostico_trs_psiquiatrico_dsm_iv_3\n\n\nX\n\nX\n\n\ndiagnostico_trs_psiquiatrico_su\n\nX\n\n\n\n\n\ndiagnostico_trs_psiquiatrico_sub_cie_10\nX\n\n\nX\n\n\n\ndiagnostico_trs_psiquiatrico_sub_cie_10_2\n\nX\n\nX\n\n\n\ndiagnostico_trs_psiquiatrico_sub_dsm_iv\nX\n\n\nX\n\n\n\ndiagnostico_trs_psiquiatrico_sub_dsm_iv_2\n\n\n\nX\n\n\n\ndiagnosticotrscie10egreso1\nX\n\n\nX\n\n\n\ndiagnosticotrscie10egreso2\nX\n\n\nX\n\n\n\ndiagnosticotrscie10egreso3\nX\n\n\n\n\n\n\ndias_en_tratamiento\nX\nX\nX\nX\nX\n\n\ndiscapacidad\nX\nX\nX\nX\nX\n\n\ndonde_vive\nX\n\n\nX\n\n\n\nduraciondelacondenaaa_o\n\n\n\n\nX\n\n\nduraciondelacondenada_as\n\n\n\n\nX\n\n\nduraciondelacondenames\n\n\n\n\nX\n\n\nedad\nX\nX\nX\nX\n\n\n\nedad_inicio_consumo\nX\nX\nX\n\nX\n\n\nedad_inicio_sustancia_inicial\n\n\n\nX\n\n\n\nedad_inicio_sustancia_principal\nX\nX\nX\nX\nX\n\n\nedaddeiniciodeconductasdeli\n\n\n\nX\n\n\n\nedaddela_primeradetencion\nX\n\n\n\n\n\n\nedaddeprimerdelito\n\n\nX\n\nX\n\n\nembarazo\n\n\n\nX\n\n\n\nen_tribunalesde_familia1\n\n\n\nX\n\n\n\nen_tribunalesde_familia2\n\n\n\nX\n\n\n\nen_tribunalesde_familia3\n\n\n\nX\n\n\n\nen_tribunalesde_familia4\n\n\n\nX\n\n\n\nen_tribunalesde_familia5\n\n\n\nX\n\n\n\nenlo_penal\n\n\n\nX\n\n\n\nenlo_penal_2\n\n\n\nX\n\n\n\nenquerubrotrabajaba\n\n\n\n\nX\n\n\nescolaridad\nX\n\n\nX\n\n\n\nescolaridad_opc\nX\n\n\nX\n\n\n\nescolaridad_ultimo_ano_cursado\n\nX\nX\n\nX\n\n\nestado_civil\nX\n\n\nX\n\n\n\nestado_conyugal\n\nX\nX\n\nX\n\n\nestado_laboral\nX\n\n\nX\n\n\n\netnia\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_a_situacion_familiar\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_a_situacion_ocupacional\nX\n\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_al_patron_de_consumo\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_relaciones_interpersonales\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_salud_fisica\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_salud_mental\nX\nX\nX\nX\nX\n\n\nevaluacion_al_egreso_respecto_sit_ocup\n\nX\n\n\n\n\n\nevaluacion_al_egreso_respecto_trasgresion_a_la_norma_social\n\nX\nX\n\nX\n\n\nevaluacion_del_proceso_terapeutico\nX\nX\nX\n\nX\n\n\nevaluacion_proceso_terapeutico_e\n\n\n\nX\n\n\n\nfecha_egreso_de_tratamiento\nX\nX\nX\nX\nX\n\n\nfecha_ingreso_a_tratamiento\nX\nX\nX\nX\nX\n\n\nfecha_nacimiento\nX\n\n\nX\n\n\n\nfecha_ultimo_tratamiento\n\nX\nX\n\nX\n\n\nfechanacimiento\n\n\nX\n\nX\n\n\nfrecuencia_consumo\n\n\n\nX\n\n\n\nfrecuencia_de_consumo_sustancia_principal\nX\nX\nX\n\nX\n\n\nfrecuencia_de_consumo_sustancia_principal_medio_cerrado\n\n\n\n\nX\n\n\nha_estado_embarazada_egreso\nX\nX\nX\nX\nX\n\n\nhatenidoingresosa_cip\nX\n\n\n\n\n\n\nhatenidoingresosa_crc\nX\n\n\n\n\n\n\nid_centro\nX\n\n\nX\n\n\n\nidbd\n\n\n\nX\n\n\n\nidentidad_de_genero\nX\nX\nX\nX\nX\n\n\nintoxicaci_afn_aguda\n\n\n\nX\n\n\n\nintoxicacionaguda\nX\n\n\n\n\n\n\nlugardondeduerme\n\nX\n\n\n\n\n\nlugardonderealiza_ultimotrata\n\nX\n\n\n\n\n\nmotivo_de_egreso\nX\nX\nX\nX\nX\n\n\nmotivo_de_egreso_alta_administrativa\n\n\n\n\nX\n\n\nmotivodeegreso_alta_administra\n\nX\n\nX\n\n\n\nn_afomerodehijos\nX\n\n\n\n\n\n\nn_as_merodevecesquehaingresado\n\n\nX\n\nX\n\n\nn_meses_en_tratamiento\nX\nX\n\nX\nX\n\n\nnacionalidad\nX\nX\nX\nX\nX\n\n\nnombre_centro\nX\nX\nX\nX\nX\n\n\nnombre_consorcio_prestador\n\n\n\nX\n\n\n\nnombre_usuario\n\nX\n\n\nX\n\n\nnumero_de_hijos\n\nX\nX\nX\nX\n\n\nnumero_de_tratamientos_anteriores\nX\nX\nX\n\nX\n\n\nnumero_tratamientos_anteriores\n\n\n\nX\n\n\n\nnumerode_sanciones_anteriores\nX\n\n\n\n\n\n\nopci_afndiscapacidad\nX\n\n\n\n\n\n\nopcion_discapacidad\n\nX\nX\nX\nX\n\n\norientaci_afn_sexual\nX\n\n\n\n\n\n\norientacion_sexual\n\nX\nX\nX\nX\n\n\norigen_de_ingreso\nX\nX\nX\nX\nX\n\n\notra_sustancia1\nX\n\n\nX\n\n\n\notra_sustancia2\nX\n\n\nX\n\n\n\notra_sustancia3\nX\n\n\n\n\n\n\notras_sustancias_no1\n\nX\nX\n\nX\n\n\notras_sustancias_no2\n\nX\nX\n\nX\n\n\notros_problemas_de_atencion_de_salud_mental\n\nX\nX\nX\nX\n\n\notros_problemas_de_atencion_de_salud_mental2\nX\n\n\n\n\n\n\notros_problemas_de_atencion_de_salud_mental_2\n\nX\nX\nX\nX\n\n\notrosproblemasdeatencionclin\nX\n\n\n\n\n\n\npais_nacimiento\n\nX\nX\n\nX\n\n\nparentesco_con_el_jefe_de_hogar\n\n\nX\n\nX\n\n\npenamixta\n\n\nX\n\n\n\n\nplan\nX\n\n\n\n\n\n\nprivadode_libertad\nX\n\n\n\n\n\n\nprograma_sename\nX\n\n\n\n\n\n\nprograma_senamequeescontrapar\n\n\n\nX\n\n\n\nregi_afn_centro\nX\n\n\n\n\n\n\nregi_afn_usuario\n\n\n\nX\n\n\n\nregion\n\n\n\n\nX\n\n\nregion_del_centro\n\nX\nX\nX\nX\n\n\nreincidencia\n\n\n\n\nX\n\n\nrubro_trabaja\n\nX\nX\n\n\n\n\nrubro_trabaja_previocondiciond\n\nX\n\n\n\n\n\ns_afndromede_abstinencia\n\n\n\nX\n\n\n\nsancion_accesoria\nX\n\n\nX\n\n\n\nsancion_medida\nX\n\n\n\n\n\n\nsanciono_medida20084\nX\n\n\n\n\n\n\nse_trata_de_una_mujer_embarazada\n\nX\nX\n\nX\n\n\nservicio_de_salud\nX\nX\n\nX\n\n\n\nsexo\nX\nX\nX\nX\nX\n\n\nsindromedeabstinencia\nX\n\n\n\n\n\n\nsustancia_de_inicio\nX\nX\nX\n\nX\n\n\nsustancia_inicial\n\n\n\nX\n\n\n\nsustancia_principal\nX\nX\nX\nX\nX\n\n\nsustanciaprincipalenmediocer\n\n\n\n\nX\n\n\ntenencia_de_la_vivienda\n\n\nX\n\nX\n\n\ntiempocumplimientodecondenaa\n\n\n\n\nX\n\n\ntiempocumplimientodecondenad\n\n\n\n\nX\n\n\ntiempocumplimientodecondenam\n\n\n\n\nX\n\n\ntiempodepermanenciaprivadode\n\n\nX\n\n\n\n\ntiempodepermanenciaprivadode_anos\n\n\nX\n\n\n\n\ntiempodepermanenciaprivadode_meses\n\n\nX\n\n\n\n\ntiempoen_calle_ano\n\nX\n\n\n\n\n\ntiempoen_calle_mes\n\nX\n\n\n\n\n\ntipo_centro\nX\nX\nX\nX\nX\n\n\ntipo_centro_derivacion\n\nX\n\n\n\n\n\ntipo_de_plan\n\n\nX\nX\n\n\n\ntipo_de_programa\n\n\nX\n\n\n\n\ntipo_de_vivienda\n\n\nX\n\nX\n\n\ntipo_delito\nX\n\n\nX\n\n\n\ntipocondena\n\n\nX\n\n\n\n\ntipoplan\n\n\n\n\nX\n\n\ntipoprograma\n\n\n\n\nX\n\n\ntiposdelugar\n\nX\n\n\n\n\n\nultimo_tratamiento\nX\n\n\nX\n\n\n\nvia_administraci_afn\nX\n\n\n\n\n\n\nvia_administracion_sustancia_principal\n\nX\nX\nX\nX\n\n\nx2_diagnostico_trs_psiquiatrico_cie_10\nX\n\n\n\n\n\n\nx2_diagnostico_trs_psiquiatrico_dsm_iv\nX\n\n\n\n\n\n\nx2_diagnostico_trs_psiquiatrico_sub_cie_10\nX\n\n\n\n\n\n\nx2_diagnostico_trs_psiquiatrico_sub_dsm_iv\nX\n\n\n\n\n\n\nx3_diagnostico_trs_psiquiatrico_cie_10\nX\n\n\n\n\n\n\nx3_diagnostico_trs_psiquiatrico_dsm_iv\nX\n\n\n\n\n\n\nx3_diagnostico_trs_psiquiatrico_sub_cie_10\nX\n\n\n\n\n\n\nx3_diagnostico_trs_psiquiatrico_sub_dsm_iv\nX\n\n\n\n\n\n\n\n\n\n\nWe can see the following from C2-C6 databases that share different names.\nColumns with only 2 letters or less (presumably generated by Excel based on their position) were renamed to follow a sequential format. Each of these 2-letter columns was renamed using the name of the previous column followed by a sequential number. This helps in making the column names more meaningful and maintaining a clear, organized structure, especially when the original names may have been automatically generated or lacked context.\n\n\nCode\nrename_short_columns &lt;- function(df) {\n  col_names &lt;- names(df)  # Get column names\n  base_name &lt;- col_names[1]  # Start with the first column name as base\n  counter &lt;- 2               # Start numbering from 2 for additional columns\n  \n  for (i in 2:length(col_names)) {\n    if (nchar(col_names[i]) &lt;= 2) {  # Check if the column name has only 2 characters\n      col_names[i] &lt;- paste0(base_name, \"_\", counter)  # Use base name + sequential number\n      counter &lt;- counter + 1  # Increment the counter\n    } else {\n      base_name &lt;- col_names[i]  # Update the base name to the current column name\n      counter &lt;- 2               # Reset counter for the next series of short columns\n    }\n  }\n  \n  names(df) &lt;- col_names  # Assign the new column names to the DataFrame\n  return(df)\n}\n# Applying the function\nSISTRAT23_c1_2010_2024_df2 &lt;- rename_short_columns(SISTRAT23_c1_2010_2024_df2)\nCONS_C2_25 &lt;- rename_short_columns(CONS_C2_25)\nCONS_C3_25 &lt;- rename_short_columns(CONS_C3_25)\nCONS_C4_25 &lt;- rename_short_columns(CONS_C4_25)\nCONS_C5_25 &lt;- rename_short_columns(CONS_C5_25)\nCONS_C6_25 &lt;- rename_short_columns(CONS_C6_25)\n\n\n\n\n\nCode\nrbind(\n  cbind(\"c2_AdmDate_min\",min(readr::parse_date(CONS_C2_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c2_AdmDate_max\",max(readr::parse_date(CONS_C2_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c2_DischDate_min\",min(readr::parse_date(CONS_C2_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c2_DischDate_max\",max(readr::parse_date(CONS_C2_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c2_BirthDate_min\",min(readr::parse_date(CONS_C2_25$fecha_nacimiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c2_BirthDate_max\",max(readr::parse_date(CONS_C2_25$fecha_nacimiento,\"%d/%m/%Y\"),na.rm=T)),\n  \n  cbind(\"c3_AdmDate_min\",min(readr::parse_date(CONS_C3_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c3_AdmDate_max\",max(readr::parse_date(CONS_C3_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c3_DischDate_min\",min(readr::parse_date(CONS_C3_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c3_DischDate_max\",max(readr::parse_date(CONS_C3_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  \n  cbind(\"c4_AdmDate_min\",min(readr::parse_date(CONS_C4_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c4_AdmDate_max\",max(readr::parse_date(CONS_C4_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c4_DischDate_min\",min(readr::parse_date(CONS_C4_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c4_DischDate_max\",max(readr::parse_date(CONS_C4_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c4_BirthDate_min\",min(readr::parse_date(CONS_C4_25$fechanacimiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c4_BirthDate_max\",max(readr::parse_date(CONS_C4_25$fechanacimiento,\"%d/%m/%Y\"),na.rm=T)),    \n  \n  cbind(\"c5_AdmDate_min\",min(readr::parse_date(CONS_C5_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c5_AdmDate_max\",max(readr::parse_date(CONS_C5_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c5_DischDate_min\",min(readr::parse_date(CONS_C5_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c5_DischDate_max\",max(readr::parse_date(CONS_C5_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c5_BirthDate_min\",min(readr::parse_date(CONS_C5_25$fecha_nacimiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c5_BirthDate_max\",max(readr::parse_date(CONS_C5_25$fecha_nacimiento,\"%d/%m/%Y\"),na.rm=T)),    \n  \n  cbind(\"c6_AdmDate_min\",min(readr::parse_date(CONS_C6_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c6_AdmDate_max\",max(readr::parse_date(CONS_C6_25$fecha_ingreso_a_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c6_DischDate_min\",min(readr::parse_date(CONS_C6_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c6_DischDate_max\",max(readr::parse_date(CONS_C6_25$fecha_egreso_de_tratamiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c6_BirthDate_min\",min(readr::parse_date(CONS_C6_25$fechanacimiento,\"%d/%m/%Y\"),na.rm=T)),\n  cbind(\"c6_BirthDate_max\",max(readr::parse_date(CONS_C6_25$fechanacimiento,\"%d/%m/%Y\"),na.rm=T))\n) %&gt;% \n  data.frame() %&gt;% \n  dplyr::rename(\"Date\"=\"X2\") %&gt;% \n  tidyr::separate(X1,sep=\"_\", into=c(\"db\",\"time\",\"value\")) %&gt;% \n  dplyr::mutate(Date=as.Date(as.numeric(Date),origin = \"1970-01-01\")) %&gt;% \n  tidyr::pivot_wider(names_from=value, values_from=Date) %&gt;% \nkbl(\"markdown\", caption= \"Range of dates in different databases\")\n\n\n\nRange of dates in different databases\n\n\ndb\ntime\nmin\nmax\n\n\n\n\nc2\nAdmDate\n2009-11-02\n2024-12-20\n\n\nc2\nDischDate\n2014-01-02\n2025-05-29\n\n\nc2\nBirthDate\n1983-06-30\n2010-09-15\n\n\nc3\nAdmDate\n2011-02-07\n2024-11-29\n\n\nc3\nDischDate\n2014-05-08\n2025-05-16\n\n\nc4\nAdmDate\n2002-01-01\n2024-12-20\n\n\nc4\nDischDate\n2014-07-24\n2025-05-19\n\n\nc4\nBirthDate\n1924-11-07\n2014-12-09\n\n\nc5\nAdmDate\n2013-01-02\n2024-12-20\n\n\nc5\nDischDate\n2014-05-02\n2025-05-23\n\n\nc5\nBirthDate\n1994-01-06\n2024-10-26\n\n\nc6\nAdmDate\n2015-06-02\n2024-12-20\n\n\nc6\nDischDate\n2017-05-06\n2025-05-05\n\n\nc6\nBirthDate\n1936-10-27\n2018-06-09\n\n\n\n\n\n\nNext, we standardized column names from CONS_C2 to CONS_C6, by setting specific patterns and replacements for each dataset (CONS_C2 to CONS_C6), tailored to each dataset’s needs (e.g., _afn to on in CONS_C2). Then, we applied both specific and general patterns to column names in each dataset, ensuring consistent naming to replace patterns systematically across all column names.\n\n\nCode\n# Define los patrones y reemplazos para cada DataFrame\npatterns_C2 &lt;- c(\"_afn\", \"n_afomero\", \"a_afos\")\nreplacements_C2 &lt;- c(\"on\", \"numero\", \"anios\")\n\npatterns_C3 &lt;- c(\"pa_a_s\", \"fa_sico\", \"categor_a_a\")\nreplacements_C3 &lt;- c(\"pais\", \"fisico\", \"categoria\")\n\npatterns_C4 &lt;- c(\"aa_o\")\nreplacements_C4 &lt;- c(\"anio\")\n\npatterns_C5 &lt;- c(\"psiqui_aftrico\", \"s_afndromede\")\nreplacements_C5 &lt;- c(\"psiquiatrico\", \"sindrome\")\n\npatterns_C6 &lt;- c(\"aa_o\", \"viva_a\", \"sustanci_an\", \"n_as_mero\", \"aa_o\", \"da_as\", \"aplicacia_n\")\nreplacements_C6 &lt;- c(\"anio\", \"vivia\", \"sustancia_n\", \"numero\", \"anio\", \"dias\", \"aplicacion\")\n\npatterns &lt;- c(patterns_C2, patterns_C3, patterns_C4, patterns_C5, patterns_C6)\nreplacements &lt;-c(replacements_C2, replacements_C3, replacements_C4, replacements_C5, replacements_C6)\n\nfor (i in seq_along(patterns)) {\n  colnames(CONS_C2_25) &lt;- sub(patterns[i], replacements[i], colnames(CONS_C2_25))\n  colnames(CONS_C3_25) &lt;- sub(patterns[i], replacements[i], colnames(CONS_C3_25))\n  colnames(CONS_C4_25) &lt;- sub(patterns[i], replacements[i], colnames(CONS_C4_25))\n  colnames(CONS_C5_25) &lt;- sub(patterns[i], replacements[i], colnames(CONS_C5_25))\n  colnames(CONS_C6_25) &lt;- sub(patterns[i], replacements[i], colnames(CONS_C6_25))\n}\n\n\n\n\n\nClean C2\n\n\n\nCode\n# Define a named vector with replacements\nreplacements &lt;- c(\n  \"ÃƒÂ³\" = \"ó\", \"ÃƒÂ¡\" = \"á\", \"ÃƒÂ©\" = \"é\", \"ÃƒÂº\" = \"ú\",\n  \"ÃƒÂ±\" = \"ñ\", \"Ãƒâ€˜\" = \"Ñ\", \"ÃƒÂ\" = \"Á\", \"ÃƒÂ¡\" = \"á\",\n  \"ÃƒÂ©\" = \"é\", \"ÃƒÂº\" = \"ú\", \"ÃƒÂ±\" = \"ñ\", \"Ãƒâ€˜\" = \"Ñ\",\n  \"ÃƒÂ\" = \"Á\", \"Ã‚Âº\" = \"º\", \"Ã‚Â°\" = \"°\", \"Ã‚Âª\" = \"ª\",\n  \"Ã‚Â¡\" = \"¡\", \"Ã‚Â¿\" = \"¿\", \"ÃƒÂ\" = \"í\", \"ÃƒÂ­\" = \"í\",\n  \"Ãƒâ€œ\" = \"Ó\", \"Ãƒâ€š\" = \"Ê\", \"Ãƒâ€\" = \"É\", \"ÃƒÂ¼\" = \"ü\",\n  \"ÃƒÂ¯\" = \"ï\", \"ÃƒÂ¶\" = \"ö\", \"Ã‚Â«\" = \"«\", \"Ã‚Â»\" = \"»\",\n  \"Ãƒâ€¡\" = \"Ç\", \"ÃƒÂ§\" = \"ç\", \"Ã‚Â\" = \"\", \"Ãƒ\" = \"\",\n  \"\\u00AD\" = \"\", \"\\u00C2\\u00AD\" = \"\"\n)\n# Create a function to apply the replacements\nreplace_chars &lt;- function(column) {\n  reduce(names(replacements), ~ str_replace_all(.x, .y, replacements[.y]), .init = column)\n}\nCONS_C2_25_df &lt;- CONS_C2_25 %&gt;%\n  tidytable::mutate(tidytable::across(tidytable::everything(), replace_chars))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column\")\n\nunique_values_list_c2 &lt;- setNames(\n  lapply(names(CONS_C2_25_df), function(col_name) {\n    # Obtener los valores únicos de la columna\n    unique_values &lt;- unique(CONS_C2_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C2_25_df)  # Asignar los nombres de las columnas a la lista\n)\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n# Apply transformations to character columns\nCONS_C2_25_df &lt;- CONS_C2_25_df %&gt;%\n  tidytable::mutate(tidytable::across(tidytable::everything(), ~ {\n    .x %&gt;%\n      stringr::str_to_lower() %&gt;%  # Convert to lowercase\n      stringr::str_trim() %&gt;%  # Trim leading and trailing whitespace\n      stringr::str_replace_all(\"\\\\s+\", \" \") %&gt;%  # Replace multiple spaces with a single space\n      stringr::str_replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove periods at the end (and spaces before)\n  }))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##\n\nreplacements &lt;- c(\n  \"\\u00c2\" = \"\", \"viá‘a\" = \"viña\", \"reloncavá\\u008d\" = \"reloncavi\", \n  \"maráa\" = \"maría\", \"á‘uble\" = \"ñuble\", \"vánculos\" = \"vínculos\", \n  \"concepciá“n\" = \"concepción\", \"aysá‰n\" = \"aysén\", \"mánimo\" = \"mínimo\", \n  \"m\\\\?mo\" = \"mínimo\", \"clánica\" = \"clínica\", \"prisionizaci\\\\?\" = \"prisionalización\", \n  \"explotaci\\\\?omercial\" = \"explotación comercial\", \"patología\" = \"patología\", \n  \"cardiopatías\" = \"cardiopatías\", \"especáfico\" = \"específico\", \n  \"esquizotápico\" = \"esquizotípico\", \"tricotilomanía\" = \"tricotilomanía\", \n  \"hipomanáaco\" = \"hipomaníaco\", \"lámite\" = \"límite\", \"manáaco\" = \"maníaco\", \n  \"á\\u0081nimo\" = \"ánimo\", \"cleptomanía\" = \"cleptomanía\", \"hipocondría\" = \"hipocondría\", \n  \"raá\\u008dces\" = \"raíces\", \"raá\\\\u008dces\" = \"raíces\", \"curacavá\" = \"curacaví\", \n  \"raáces\" = \"raíces\", \"terapá‰utica\" = \"terapéutica\", \"raáces\" = \"raíces\", \n  \"\\\\?ble\" = \"ñuble\", \"báo-báo\" = \"bío-bío\", \"iba\\\\?s\" = \"ibañez\", \n  \"reloncavá\" = \"reloncaví\", \"valparaáso\" = \"valparaíso\", \"araucanáa\" = \"araucanía\", \n  \"á‘uble\" = \"ñuble\", \"especáfico\" = \"específico\", \"vi\\\\? del mar\" = \"viña del mar\", \n  \"do\\\\?hue\" = \"doñihue\", \"huala\\\\?\" = \"hualaé\", \"\\\\?qu\\\\?\" = \"ñiquén\", \n  \"cha\\\\?ral\" = \"chañaral\", \"ollag\\\\?\" = \"ollagüe\", \"vicu\\\\?\" = \"vicuña\", \n  \"ca\\\\?te\" = \"cañete\", \"\\\\?\\\\?a\" = \"ñuñoa\", \"policáa\" = \"policía\", \n  \"garantáa\" = \"garantía\", \"fiscaláa\" = \"fiscalía\", \"haitá\" = \"haití\", \n  \"hungráa\" = \"hungría\", \"paás bajos\" = \"países bajos\", \"atacame\\\\?\" = \"atacameño\", \n  \"y\\\\?na\" = \"yámana\", \"y\\\\?gan\" = \"yagán\", \"hipn\\\\?os\" = \"hipnóticos\", \n  \"hero\\\\?\" = \"heroína\", \"code\\\\?\" = \"codeína\", \"analg\\\\?cos\" = \"analgésicos\", \n  \"barbit\\\\?os\" = \"barbitúricos\", \"alucin\\\\?os\" = \"alucinógenos\", \n  \"ãƒâ³n\" = \"ón\", \"ãƒâ©n\" = \"én\", \"ãƒâº\" = \"ú\", \"ãƒâºa\" = \"úa\", \n  \"ãƒâos\" = \"íos\", \"ãƒâuble\" = \"ñuble\", \"ãƒâ³n general\" = \"ón general\", \n  \"ãƒâ\" = \"í\", \"ãƒâ³n casa\" = \"ón casa\", \"ãƒârbara\" = \"árbara\", \n  \"naãƒâ\" = \"ñ\", \"raãƒâces\" = \"raíces\", \"baãƒâsico\" = \"básico\", \n  \"ãƒâ©utico\" = \"éutico\", \"vaãƒânculos\" = \"vínculos\", \"marãƒâa\" = \"maría\", \n  \"inaãƒâ©s\" = \"inés\", \"raí\\\\u008dces\" = \"raíces\", \"chiloí©\" = \"chiloé\", \n  \"terapí©utico\" = \"terapéutico\", \"bísico\" = \"básico\", \"peí±ablanca\" = \"peñablanca\", \n  \"iní©s\" = \"inés\", \"infracción\" = \"infracción\", \"layantú\" = \"layantu\", \n  \"oriã³n\" = \"orion\", \"valparaãso\" = \"valparaiso\", \"fãsico\" = \"fisico\", \n  \"ningãún gãénero\" = \"ningun genero\", \"viãña\" = \"viña\", \n  \"corporación\" = \"corporacion\", \"aysã©n\" = \"aysen\", \"\\tcodesam\" = \"codesam\", \n  \"corporación\" = \"corporacion\", \"concepción\" = \"concepcion\", \n  \"hábitos\" = \"habitos\", \"psíquica\" = \"psiquica\", \"neuróticos\" = \"neuroticos\", \n  \"fisiológicas\" = \"fisiologicas\", \"somáticos\" = \"somaticos\", \n  \"orgánicos\" = \"organicos\", \"sintomáticos\" = \"sintomaticos\", \n  \"psicológico\" = \"psicologico\", \"mínimo\" = \"minimo\", \"sanción\" = \"sancion\", \n  \"terapéutica\" = \"terapeutica\", \"término\" = \"termino\", \"derivación\" = \"derivacion\", \n  \"prisionalización\" = \"prisionalizacion\", \"explotación\" = \"explotacion\", \n  \"estrés\" = \"estres\", \"años\" = \"años\", \"dãas\"=\"días\", \"mãnimo\"=\"minimo\",\"ã©\"=\"e\"\n)\n\nreplace_chars &lt;- function(column) {\n  reduce(names(replacements), ~ stringr::str_replace_all(.x, .y, replacements[.y]), .init = column)\n}\n\nCONS_C2_25_df &lt;- CONS_C2_25_df %&gt;%\n  tidytable::mutate(tidytable::across(tidytable::everything(), replace_chars))\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##\n\nunique_values_list_c21 &lt;- setNames(\n  lapply(names(CONS_C2_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C2_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C2_25_df)  # assign column names to the list\n)\n\n#1:5\n#unique_values_list_c21[27:37]\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Crear una lista para almacenar las expresiones de reemplazo\nreplacements3 &lt;- c(\n  # \"\\u00AD\" = \"\", \"\\u00C2\\u00AD\" = \"\", \"\\u00C2\" = \"\",\n  # \"ráo negro\" = \"río negro\", \"báo-báo\" = \"bío-bío\", \n  # \"pe\\\\?lolen\" = \"peñalolén\", \"pe\\\\?flor\" = \"peñaflor\", \n  # \"san gregorio de \\\\?quén\" = \"san gregorio de ñiquén\", \n  # \"\\\\?o nitroso\" = \"óxido nitroso\", \"coca\\\\?\" = \"cocaína\", \n  # \"nunca estud¡\" = \"nunca estudió\", \n  # \"t\\\\?ica comercial/industrial/normalista\" = \"técnica comercial/industrial/normalista\", \n  \"profesional \\\\(4 o m\\\\?a\\\\? incompleta\" = \"profesional (4 o más incompleta)\",\n  \"profesional \\\\(4 o m\\\\?a\\\\? completa\" = \"profesional (4 o más completa)\",\n  # \"t\\\\?ica profesional˜\" = \"técnica profesional\", \n   \"t\\\\?ico superior \\\\(1-3 a\\\\? completa\" = \"técnico superior (1-3 años completa)\", \n  # \"educaci\\\\?\\\\?ca\" = \"educación básica\", \n   \"t\\\\?ico superior \\\\(1-3 a\\\\? incompleta\" = \"técnico superior (1-3 años incompleta)\", \n  # \"cientáficos\" = \"científicos\", \"ášnicamente\" = \"únicamente\", \n  # \"hospeder\\\\?\" = \"hospedería\", \"residencial, pensi\\\\?hostal\" = \"residencial, pensión, hostal\", \n  # \"ocupaci\\\\?rregular\" = \"ocupación irregular\", \"cocaána\" = \"cocaína\", \n  # \"heroána\" = \"heroína\", \"codeána\" = \"codeína\", \n  # \"sintomático\" = \"sintomático\", \"disfunción\" = \"disfunción\", \n  # \"lesión\" = \"lesión\", \"días\" = \"días\", \"orientación\" = \"orientación\", \n  # \"especificación\" = \"especificación\", \"\\\\tcodesam\" = \"codesam\", \n  \"cleptomanáa\" = \"cleptomanía\", \"tricotilomanáa\" = \"tricotilomanía\", \n  \"cardiopatáas\" = \"cardiopatías\", \"patologáa\" = \"patología\",\n  \"último\" = \"últimos\", \"\\\\|(\\\\d+)\" = \"1\", \"1o\" = \"10\", \n  \"aná\\u0081stasis\"= \"anástasis\",\n  \"á‘uá‘oa\" = \"ñuñoa\", \"cocaána\" = \"cocaína\", \"hospederáa\" = \"hospedería\",\n  \"ášnicamente\" = \"únicamente\", \"t\\\\?ico\" = \"técnico\", \"nunca estudi\" = \"nunca estudió\",\n  \"t\\\\?ica\"= \"técnica\", \"educaci\\\\?\\\\?ca\" = \"educación básica\",\n  \"dáas\" = \"días\", \"dáa\" = \"día\",\n   \"lesiones gravásimaslesiones gravásimas\" = \"lesiones gravísimas\",\n  \"táas\" = \"tías\", \"táos\" = \"tíos\", \"crámenes\" = \"crímenes\",\n  \"jurádica\" = \"jurídica\", \"daá‘o\" = \"daño\", \"puchuncavá\"= \"puchuncaví\",\n  \"suspención\" = \"suspensión\", \"á‘iquen\" = \"ñiquen\", \"doá‘ihue\" = \"doñihue\",\n  \"caá‘ete\" = \"cañete\", \"vicuá‘a\" = \"vicuña\", \"á‘uá‘oa\"=\"ñuñoa\", \n  \"chaá‘aral\"= \"chañaral\", \"quilpuá‰\"= \"quilpué\", \n  \"peá‘alolen\" = \"peñalolén\", \"peá‘aflor\" = \"peñaflor\", \n  \"ibaá‘ez\" = \"ibáñez\", \"prisionización\" = \"prisionalización\",\n  \"piromanáa\" = \"piromanía\", \"psicotropas\" = \"psicotrópicas\",\n  \"fásico\" = \"físico\", \"psáquica\" = \"psíquica\"\n)\nreplace_chars &lt;- function(column) {\n  reduce(names(replacements3), ~ stringr::str_replace_all(.x, .y, replacements3[.y]), .init = column)\n}\n\nCONS_C2_25_df &lt;- CONS_C2_25_df %&gt;%\n  tidytable::mutate(tidytable::across(tidytable::everything(), replace_chars))\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\n\nunique_values_list_c22 &lt;- setNames(\n  lapply(names(CONS_C2_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C2_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C2_25_df)  # assign column names to the list\n)\n\n#_#_#_#_#_#_\ninvisible(\"See problematic characters\")\n\ndf_c2_problems &lt;- map_dfr(names(unique_values_list_c22), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c22[[name]])\n}) %&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n\n\n\n\nCode\nreplacements4 &lt;- c(\n  \"á\" = \"a\", \"é\" = \"e\", \"í\" = \"i\", \"ó\" = \"o\", \"ú\" = \"u\", \"ñ\" = \"n\",\n  \"Á\" = \"A\", \"É\" = \"E\", \"Í\" = \"I\", \"Ó\" = \"O\", \"Ú\" = \"U\", \"Ñ\" = \"N\"\n)\nreplace_chars4 &lt;- function(column) {\n  for (pattern in names(replacements4)) {\n    column &lt;- gsub(pattern, replacements4[pattern], column, fixed = TRUE)\n  }\n  return(column)\n}\nCONS_C2_25_df &lt;- CONS_C2_25_df%&gt;%\n  tidytable::mutate(tidytable::across(tidytable::everything(), ~ replace_chars4(.)))\n\n\nunique_values_list_c23 &lt;- setNames(\n  lapply(names(CONS_C2_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C2_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C2_25_df)  # assign column names to the list\n)\n\n\nif(list_to_df(unique_values_list_c23 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c23 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\n\nWarning: Values with sign ‘?’= 13\n\n\nCode\nif(list_to_df(unique_values_list_c23 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c23 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\n\nWarning: Values with signs ‘´ “’= 4\n\n\nCode\ndf_c2_problems2 &lt;- map_dfr(names(unique_values_list_c23), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c23[[name]])\n}) %&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nrepl_generic &lt;- c(\n  \"ÃƒÂ¡\"=\"á\",\"ÃƒÂ©\"=\"é\",\"ÃƒÂ­\"=\"í\",\"ÃƒÂ³\"=\"ó\",\"ÃƒÂº\"=\"ú\",\n  \"ÃƒÂ±\"=\"ñ\",\"Ãƒâ€˜\"=\"ñ\",\"ÃƒÂ¼\"=\"ü\",\"ÃƒÂœ\"=\"ü\",\n  \"Ã¡\"=\"á\",\"Ã©\"=\"é\",\"Ã­\"=\"í\",\"Ã³\"=\"ó\",\"Ãº\"=\"ú\",\n  \"Ã±\"=\"ñ\",\"Ã¼\"=\"ü\",\"Ãœ\"=\"ü\",\n  \"\\u00C2\"=\"\", \"\\u00AD\"=\"\", \n    \"\\u008d\" = \"í\",   # a veces aparece por 'í'\n  \"\\u009d\" = \"í\",\n  \"\\u0091\" = \"'\",   # comillas “raras” de CP1252\n  \"\\u0092\" = \"'\",\n  \"\\u2013\" = \"–\",   # normaliza (si prefieres guion simple: \"-\" )\n  \"\\u2014\" = \"–\",\n  \"\\\\s*–\\\\s*\" = \" – \"  # espacios consistentes alrededor del en dash\n)\nrepl_domain &lt;- c(\n  \"profesional \\\\(4 o m\\\\?a\\\\? incompleta\" = \"profesional (4 o mas incompleta)\",\n  \"profesional \\\\(4 o m\\\\?a\\\\? completa\"  = \"profesional (4 o mas completa)\",\n  \"t\\\\?ico superior \\\\(1-3 a\\\\? completa\" = \"tecnico superior (1-3 anos completa)\",\n  \"t\\\\?ico superior \\\\(1-3 a\\\\? incompleta\" = \"tecnico superior (1-3 anos incompleta)\",\n  \"cleptomanáa\"=\"cleptomania\",\"tricotilomanáa\"=\"tricotilomania\",\n  \"cardiopatáas\"=\"cardiopatias\",\"patologáa\"=\"patologia\",\n  \"último\"=\"ultimos\",\"1o\"=\"10\",\n  \"aná\\u0081stasis\"=\"anastasis\",\"á‘uá‘oa\"=\"nunoa\",\"cocaána\"=\"cocaina\",\n  \"hospederáa\"=\"hospederia\",\"ášnicamente\"=\"unicamente\",\n  \"t\\\\?ico\"=\"tecnico\",\"nunca estudi\"=\"nunca estudio\",\"t\\\\?ica\"=\"tecnica\",\n  \"educaci\\\\?\\\\?ca\"=\"educacion basica\",\"dáas\"=\"dias\",\"dáa\"=\"dia\",\n  \"lesiones gravásimaslesiones gravásimas\"=\"lesiones gravisimas\",\n  \"táas\"=\"tias\",\"táos\"=\"tios\",\"crámenes\"=\"crimenes\",\"jurádica\"=\"juridica\",\n  \"daá‘o\"=\"dano\",\"puchuncavá\"=\"puchuncavi\",\"suspención\"=\"suspension\",\n  \"á‘iquen\"=\"niquen\",\"doá‘ihue\"=\"donihue\",\"caá‘ete\"=\"canete\",\"vicuá‘a\"=\"vicuna\",\n  \"chaá‘aral\"=\"chanaral\",\"quilpuá‰\"=\"quilpue\",\"peá‘alolen\"=\"penalolen\",\n  \"peá‘aflor\"=\"penaflor\",\"ibaá‘ez\"=\"ibanez\",\"prisionización\"=\"prisionalizacion\",\n  \"piromanáa\"=\"piromania\",\"psicotropas\"=\"psicotropicas\",\n  \"fásico\"=\"fisico\",\"psáquica\"=\"psiquica\", \"estudioo\\\\?\"=\"estudio\", \"educaci\\\\?n b\\\\?sica\"= \"educacion basica\", \"m\\\\?s a\\\\?os\"=\"mas anos\", \"t\\\\?cnic\"=\"tecnic\", \"copiap\\\\?\"=\"copiapo\", \"\\\\?uble\"= \"nuble\", \"iba\\\\?es\"= \"ibanez\", \"ays\\\\?n\"= \"aysen\", \"servicio de salud los ra\\u008dos \\\\(valdivia\\\\)\"= \"servicio de salud los rios (valdivia)\",  \"pla - amuykipaa[a‘]+\"= \"pla - amuykipana\", \"a\\\\?os\"=\"anos\", \"raíos\"= \"rios\"\n)\nrepl_domain_post &lt;- c(\n\"nocontesta\"= \"no contesta\", \"nunca estudioo$\"= \"nunca estudio\", \"heroana\"=\"heroina\", \"ridad\nno sabe o no se aplica\"= \"no sabe o no aplica\", \"1 dias - semana\"= \"1 dia - semana\", \"miocardiopataa\"=\"miocardiopatia\", \"admnistrativa\"= \"administrativa\"\n)\n\nfix_text_tt &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- stringi::stri_trans_tolower(x)\n  x &lt;- stringr::str_replace_all(x, repl_generic)\n  x &lt;- stringr::str_replace_all(x, repl_domain)\n  x &lt;- stringr::str_squish(x)\n  x &lt;- stringr::str_replace_all(x, repl_domain_post)\n  x &lt;- stringr::str_replace_all(x, \"\\\\.-$\", \"\")\n  x\n}\n\n#Apply\nCONS_C2_25_df &lt;- CONS_C2_25_df %&gt;%\n  tidytable::mutate(tidytable::across(tidytable::where(~ is.character(.x) || is.factor(.x)),\n                  ~ fix_text_tt(.x)))\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ninvisible(\"See problematic characters\")\n\nunique_values_list_c24 &lt;- setNames(\n  lapply(names(CONS_C2_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C2_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C2_25_df)  # assign column names to the list\n)\n\ndf_c2_problems3 &lt;- map_dfr(names(unique_values_list_c24), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c24[[name]])\n}) %&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n\nif(list_to_df(unique_values_list_c24 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c24 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\n\nWarning: Values with sign ‘?’= 1\n\n\nCode\nif(list_to_df(unique_values_list_c24)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c24)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n\n\nWarning: Values with signs ‘´ “’= 2\n\n\nCode\n#list_to_df(unique_values_list_c24 ) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"HASH_KEY\", !grepl(\"fecha|edad|dias|numero|id|codigo\",variable)) |&gt; View()\n\n\n\n\n\nClean C3\n\n\nCode\n# Apply transformations to character columns\nCONS_C3_25_df &lt;- CONS_C3_25 %&gt;%\n  dplyr::mutate(across(everything(), ~ {\n    .x %&gt;%\n      stringr::str_to_lower() %&gt;%  # Convert to lowercase\n      stringr::str_trim() %&gt;%  # Trim leading and trailing whitespace\n      stringr::str_replace_all(\"\\\\s+\", \" \") %&gt;%  # Replace multiple spaces with a single space\n      stringr::str_replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove periods at the end (and spaces before)\n  }))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c30 &lt;- setNames(\n  lapply(names(CONS_C3_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C3_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C3_25_df)  # assign column names to the list\n)\n\ndf_c3_problems0 &lt;- \npurrr::map_dfr(names(unique_values_list_c30), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c30[[name]])\n})%&gt;% \n  dplyr::filter(stringr::str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n\nif(list_to_df(unique_values_list_c30) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c30) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow())\n  )\n}\n\n\nWarning: Values with sign ‘?’= 80\n\n\nCode\nif(list_to_df(unique_values_list_c30)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c30)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n\n\nWarning: Values with signs ‘´ “’= 127\n\n\nCode\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# --- generic ASCII/mojibake cleanup (from previous step) ---\n# First pass: Mojibake/corrupted UTF-8 fixes\n  mojibake_fixes &lt;- c(\n    # Common corrupted accented characters\n    \"Ã¡\"=\"a\", \"Ã©\"=\"e\", \"Ã­\"=\"i\", \"Ã³\"=\"o\", \"Ãº\"=\"u\", \"Ã±\"=\"n\",\n    \"ãƒâ¡\"=\"a\", \"ãƒâ©\"=\"e\", \"ãƒâ­\"=\"i\", \"ãƒâ³\"=\"o\", \"ãƒâº\"=\"u\", \"ãƒâ±\"=\"n\",\n    \n    # Specific corrupted words from your data\n    \"ãƒâšnicamente\"=\"unicamente\",\n    \"razãƒâ³n\"=\"razon\",\n    \"esquizotãƒâ­pico\"=\"esquizotipico\",\n    \"curicãƒâ\"=\"curico\",\n    \"bãƒâ­o-bãƒâ­o\"=\"bio-bio\",\n    \"viãƒâ±a\"=\"vina\",\n    \"aysãƒâ©n\"=\"aysen\",\n    \"concepciãƒâ³n\"=\"concepcion\",\n    \"mãƒâ­nimo\"=\"minimo\",\n    \"tãƒâ©rmino\"=\"termino\",\n    \"fãƒâ­sico\"=\"fisico\",\n    \"otro gãƒâ©nero\"=\"otro genero\"\n  )\n  \n  # Second pass: Question mark replacements\n  qmark_fixes &lt;- c(\n    # Communes/regions\n    \"cha\\\\?ral\"=\"chanaral\",\n    \"vi\\\\?a del mar\"=\"vina del mar\",\n    \"vi\\\\? del mar\"=\"vina del mar\",\n    \"vicu\\\\?\"=\"vicuna\",\n    \"san gregorio de \\\\?iquen\"=\"san gregorio de niquen\",\n    \"san gregorio de \\\\?quen\"=\"san gregorio de niquen\",\n    \"de \\\\?ble\"=\"de nuble\",\n    \"de \\\\?uble\"=\"de nuble\",\n    \"iba\\\\?es\"=\"ibanez\",\n    \"iba\\\\?s\"=\"ibanez\",\n    \n    # Education terms\n    \"educaci\\\\?n\"=\"educacion\",\n    \"b\\\\?sica\"=\"basica\",\n    \"t\\\\?cnico\"=\"tecnico\",\n    \"t\\\\?cnica\"=\"tecnica\",\n    \"t\\\\?ico\"=\"tecnico\",\n    \"t\\\\?ica\"=\"tecnica\",\n    \"nunca estudi\\\\?\"=\"nunca estudio\",\n    \n    # Handle years/time periods\n    \"a\\\\?os\"=\"anos\",\n    \"a\\\\?\"=\"anos\",\n    \"m\\\\?s\"=\"mas\",\n    \"m\\\\?a\\\\?\"=\"mas\",\n    \"\\\\(4 o m\\\\?s a\\\\?os\\\\)\"=\"(4 o mas anos)\",\n    \"\\\\(1-3 a\\\\?os\\\\)\"=\"(1-3 anos)\",\n    \"1-3 a\\\\?\"=\"1-3 anos\",\n    \n    # Clinical/psychiatric terms\n    \"esquizot\\\\?pico\"=\"esquizotipico\",\n    \"esquizot\\\\?co\"=\"esquizotipico\",\n    \"h\\\\?bitos\"=\"habitos\",\n    \"h\\\\?tos\"=\"habitos\",\n    \"psicol\\\\?gico\"=\"psicologico\",\n    \"psicol\\\\?gicos\"=\"psicologicos\",\n    \"psicol\\\\?os\"=\"psicologicos\",\n    \"psicol\\\\?o\"=\"psicologico\",\n    \"fisiol\\\\?gicas\"=\"fisiologicas\",\n    \"fisiol\\\\?as\"=\"fisiologicas\",\n    \"som\\\\?tico\"=\"somatico\",\n    \"som\\\\?ticos\"=\"somaticos\",\n    \"som\\\\?ca\"=\"somatica\",\n    \"som\\\\?ticas\"=\"somaticas\",\n    \"psic\\\\?tico\"=\"psicotico\",\n    \"psic\\\\?ticos\"=\"psicoticos\",\n    \"psic\\\\?os\"=\"psicoticos\",\n    \"neur\\\\?tico\"=\"neurotico\",\n    \"neur\\\\?ticos\"=\"neuroticos\",\n    \"neur\\\\?os\"=\"neuroticos\",\n    \"org\\\\?nico\"=\"organico\",\n    \"org\\\\?nicos\"=\"organicos\",\n    \"org\\\\?co\"=\"organico\",\n    \"sintom\\\\?tico\"=\"sintomatico\",\n    \"sintom\\\\?ticos\"=\"sintomaticos\",\n    \"sintom\\\\?cos\"=\"sintomaticos\",\n    \"adaptaci\\\\?n\"=\"adaptacion\",\n    \"adaptaci\\\\?\"=\"adaptacion\",\n    \"especificaci\\\\?n\"=\"especificacion\",\n    \"especificaci\\\\?\"=\"especificacion\",\n    \"transformaci\\\\?n\"=\"transformacion\",\n    \"transformaci\\\\?ersistente\"=\"transformacion persistente\",\n    \"lesi\\\\?n\"=\"lesion\",\n    \"lesi\\\\?\"=\"lesion\",\n    \"disfunci\\\\?n\"=\"disfuncion\",\n    \"disfunci\\\\?erebral\"=\"disfuncion cerebral\",\n    \"espec\\\\?fico\"=\"especifico\",\n    \"espec\\\\?ficos\"=\"especificos\",\n    \n    # Evaluation/outcomes\n    \"logro m\\\\?nimo\"=\"logro minimo\",\n    \"logro m\\\\?mo\"=\"logro minimo\",\n    \n    # Substances\n    \"coca\\\\?na\"=\"cocaina\",\n    \"coca\\\\?\"=\"cocaina\",\n    \"analg\\\\?sicos\"=\"analgesicos\",\n    \"analg\\\\?cos\"=\"analgesicos\",\n    \n    # Other problematic patterns\n    \"explotaci\\\\?n\"=\"explotacion\",\n    \"explotaci\\\\?exual\"=\"explotacion sexual\",\n    \"discriminaci\\\\?n\"=\"discriminacion\",\n    \"discriminaci\\\\?\"=\"discriminacion\",\n    \"violaci\\\\?n\"=\"violacion\",\n    \"derivaci\\\\?n\"=\"derivacion\",\n    \"orientaci\\\\?exuales\"=\"orientacion sexuales\",\n    \"estr\\\\?grave\"=\"estres grave\",\n    \"estr\\\\?\"=\"estres\",\n    \"s\\\\?rome amn\\\\?co\"=\"sindrome amnesico\"\n  )\npost_fixes &lt;- c(\"profesional \\\\(4 o m\\\\?anos\"= \"profesional (4 o mas anos)\",\n                \"org\\\\?ca\"= \"organica\",\n                \"org\\\\?nica\"= \"organica\",\n                \"espec\\\\?co\"= \"especifico\",\n                \"sintom\\\\?co\"= \"sintomatico\",\n                \"som\\\\?cos\"= \"somaticos\", \n                \"nocontesta\"= \"no contesta\",\n                \"admnistrativa\"= \"administrativa\")\n\npost_fixes2 &lt;- c(\"profesional \\\\(4 o m\\\\?anos\"= \"profesional (4 o mas anos)\",\n                \"org\\\\?ca\"= \"organica\",\n                \"org\\\\?nica\"= \"organica\",\n                \"espec\\\\?co\"= \"especifico\",\n                \"sintom\\\\?co\"= \"sintomatico\",\n                \"som\\\\?cos\"= \"somaticos\")\n\npost_fixes3 &lt;- c(\n  # Use Unicode escapes for problematic patterns\n  \"rehabilitaci\\u00e3\\u0192\\u00e2n\" = \"rehabilitacion\",\n  \"rehabilitaciafa\\u00e2n\" = \"rehabilitacion\",\n  \"rehabilitaciafan\" = \"rehabilitacion\",\n  \"\\u00e3\\u0192\\u00e2'uble\" = \"nuble\",\n  \"afa'uble\" = \"nuble\",\n  \"afauble\" = \"nuble\",\n  \"afa\\\\'uble\" = \"nuble\",\n  'rehabilitaciafa\"n'= \"rehabilitacion\",\n  'curico\\\\\"'=\"curico\", \n  \"\\\\bafa['’\\\"]?uble\\\\b\"          = \"nuble\",          # e.g., \"afa'uble\" → \"nuble\"\n  \"\\\\brehabilitaciafa['’\\\"]?n\\\\b\" = \"rehabilitacion\"  # e.g., 'rehabilitaciafa\"n' → \"rehabilitacion\"\n  )\n\npost_fixes4 &lt;- c(\n  r\"(rehabilitaciafa\"n)\" = \"rehabilitacion\",\n  r\"(aƒa'uble)\" = \"nuble\",\n  \"afauble\"= \"nuble\"\n)\n  \nfix_text_ascii &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- stringi::stri_trans_tolower(x)\n  x &lt;- stringr::str_replace_all(x, \"[\\\"'`´‘’‚‛“”„‟‹›«»]\", \"\")\n  # Apply all fixes - CORRECTED THE TYPO\n  x &lt;- stringr::str_replace_all(x, mojibake_fixes)\n  x &lt;- stringr::str_replace_all(x, qmark_fixes)  # &lt;- This was str_replpace_all in your code\n  x &lt;- stringr::str_replace_all(x, post_fixes)  # &lt;- This was str_replpace_all in your code\n  x &lt;- stringr::str_replace_all(x, post_fixes2)  # &lt;- This was str_replpace_all in your code\n  x &lt;- stringr::str_replace_all(x, post_fixes3)  # &lt;- This was str_replpace_all in your code  \n  x &lt;- stringr::str_replace_all(x, post_fixes4)  # &lt;- This was str_replpace_all in your code  \n  # Clean up double 'nn' at word boundaries\n  x &lt;- stringr::str_replace_all(x, \"nn\\\\b\", \"n\")\n  # 3) final ASCII transliteration safeguard (removes any leftover accents)\n  x &lt;- stringi::stri_trans_general(x, \"Latin-ASCII\")\n  # 4) squash spaces\n  x &lt;- stringr::str_squish(x)\n  x\n}\n# apply to all character/factor columns\nCONS_C3_25_df &lt;- CONS_C3_25_df%&gt;%\n  dplyr::mutate(dplyr::across(dplyr::where(~ is.character(.x) || is.factor(.x)),\n                  ~ fix_text_ascii(.x)))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c31 &lt;- setNames(\n  lapply(names(CONS_C3_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C3_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C3_25_df)  # assign column names to the list\n)\n\ndf_c3_problems1 &lt;- \npurrr::map_dfr(names(unique_values_list_c31), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c31[[name]])\n})%&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\nif(list_to_df(unique_values_list_c31) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c31)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\nif(list_to_df(unique_values_list_c31)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c31)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n\n#list_to_df(unique_values_list_c31) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"HASH_KEY\", !grepl(\"fecha|edad|dias|numero|id|codigo\",variable)) |&gt; View()\n\n\n\n\n\nClean C4\n\n\nCode\n# Apply transformations to character columns\nCONS_C4_25_df &lt;- CONS_C4_25 %&gt;%\n  dplyr::mutate(across(everything(), ~ {\n    .x %&gt;%\n      stringr::str_to_lower() %&gt;%  # Convert to lowercase\n      stringr::str_trim() %&gt;%  # Trim leading and trailing whitespace\n      stringr::str_replace_all(\"\\\\s+\", \" \") %&gt;%  # Replace multiple spaces with a single space\n      stringr::str_replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove periods at the end (and spaces before)\n  }))\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c40 &lt;- setNames(\n  lapply(names(CONS_C4_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C4_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C4_25_df)  # assign column names to the list\n)\n\ndf_c4_problems0 &lt;- \npurrr::map_dfr(names(unique_values_list_c40), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c40[[name]])\n})%&gt;% \n  dplyr::filter(stringr::str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\nif(list_to_df(unique_values_list_c40) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\n    warning(paste0( \"Values with sign '?'= \", list_to_df(unique_values_list_c40)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\nif(list_to_df(unique_values_list_c40)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\n    warning(paste0( \"Values with signs '´ “ '= \", list_to_df(unique_values_list_c40)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# 1) Generic ASCII/mojibake cleanup (keeps only plain ASCII, no accents/ñ)\nrepl_ascii_generic &lt;- c(\n  \"\\uFEFF\" = \"\", \"\\u00C2\" = \"\", \"\\u00AD\" = \"\", \"Ã‚Â\" = \"\", \"ã‚â­\" = \"\",\n  \"â€˜\"=\"'\",\"â€™\"=\"'\",\"â€œ\"=\"\\\"\",\"â€�\"=\"\\\"\",\"Â´\"=\"'\",\"â€²\"=\"'\",\n  \"â€“\" = \"-\", \"â€”\" = \"-\", \"\\u2013\" = \"-\", \"\\u2014\" = \"-\",\n  # vowels/ü → plain ASCII\n  \"ÃƒÂ¡\"=\"a\",\"Ã¡\"=\"a\",\"ãƒâ¡\"=\"a\",\"á\"=\"a\",\n  \"ÃƒÂ©\"=\"e\",\"Ã©\"=\"e\",\"ãƒâ©\"=\"e\",\"é\"=\"e\",\n  \"ÃƒÂ­\"=\"i\",\"Ã­\"=\"i\",\"ãƒâ­\"=\"i\",\"í\"=\"i\",\n  \"ÃƒÂ³\"=\"o\",\"Ã³\"=\"o\",\"ãƒâ³\"=\"o\",\"ó\"=\"o\",\"Ó\"=\"o\",\n  \"ÃƒÂº\"=\"u\",\"Ãº\"=\"u\",\"ãƒâº\"=\"u\",\"ú\"=\"u\",\n  \"ÃƒÂ¼\"=\"u\",\"Ã¼\"=\"u\",\"Ãœ\"=\"u\",\"ÃƒÂœ\"=\"u\",\"ãƒâ¼\"=\"u\",\"ü\"=\"u\",\n  # ñ/Ñ → n (ASCII-only requirement)\n  \"ÃƒÂ±\"=\"n\",\"Ã±\"=\"n\",\"ãƒâ±\"=\"n\",\"Ãƒâ€˜\"=\"n\",\"Ñ\"=\"n\",\"ñ\"=\"n\"\n)\n# 2) Targeted rules for the exact glitches you found (regex on the LEFT)\nrepl_c4 &lt;- c(\n  # communes / regions\n  \"\\\\bvi\\\\?a del mar\\\\b\"             = \"vina del mar\",\n  \"\\\\bsan gregorio de \\\\?iquen\\\\b\"   = \"san gregorio de niquen\",\n  \"\\\\bde \\\\?uble\\\\b\"                 = \"de nuble\",\n  \"iba\\\\?es\"                          = \"ibanez\",\n  # occupations / conditions\n  \"ocupaci\\\\?n\"                       = \"ocupacion\",\n  \"ocupaci\\\\?o\"                       = \"ocupacion\",\n  \"ocupaci\\\\?rregular\"                = \"ocupacion irregular\",\n  # law condition phrases\n  \"condici\\\\?e tratamiento\"           = \"condicion de tratamiento\",\n  \"condici\\\\?n de tratamiento\"        = \"condicion de tratamiento\",\n  # crimes/offences\n  \"corrupci\\\\?e menores\"              = \"corrupcion de menores\",\n  \"lesiones graves y grav\\\\?simas\"    = \"lesiones graves y gravisimas\",\n  \"lesiones graves y grav\\\\?mas\"      = \"lesiones graves y gravisimas\",\n  \"producci\\\\?e material pornogr\\\\?co\"= \"produccion de material pornografico\",\n  \"producci\\\\?n de material pornogr\\\\?fico\" = \"produccion de material pornografico\",\n  \"receptaci\\\\?\"                      = \"receptacion\",\n  \"robo con intimidaci\\\\?\"            = \"robo con intimidacion\",\n  \"\\\\bviolaci\\\\?\\\\b\"                  = \"violacion\",\n  # clinical (physical)\n  \"megalobl\\\\?ica\"                    = \"megaloblastica\",\n  \"ferrop\\\\?ca\"                       = \"ferropenica\",\n  \"cardiopat\\\\?as\"                    = \"cardiopatias\",\n  \"cardiopat\\\\?:\"                     = \"cardiopatia:\",\n  \"miocardiopat\\\\? ?dilatada\"         = \"miocardiopatia dilatada\",\n  \"som\\\\?cas\"                         = \"somaticas\",\n  \"som\\\\?ticas\"                       = \"somaticas\",\n  \"alcoh\\\\?lica\"                      = \"alcoholica\",\n  \"alcoh\\\\?a\"                         = \"alcoholica\",\n  \"hepatitis cr\\\\?a\"                  = \"hepatitis cronica\",\n  \"patolog\\\\?a bucal\"                 = \"patologia bucal\",\n  \"patolog\\\\?bucal\"                   = \"patologia bucal\",\n  \"patolog\\\\? de la gesti\\\\?n\"        = \"patologia de la gestion\",\n  \"patolog\\\\?de la gesti\\\\? del ni\\\\?ntrauterino\" = \"patologia de la gestion del nin intrauterino\",\n  # clinical (psychiatry)\n  \"esquizot\\\\?pico\"                   = \"esquizotipico\",\n  \"esquizot\\\\?co\"                     = \"esquizotipico\",\n  \"h\\\\?bitos\"                         = \"habitos\",\n  \"h\\\\?tos\"                           = \"habitos\",\n  \"psicol\\\\?gic[oa]\"                  = \"psicologico\",\n  \"fisiol\\\\?gic[oa]s?\"                = \"fisiologicas\",\n  \"som\\\\?tic[oa]s?\"                   = \"somaticos\",\n  \"psic\\\\?tic[oa]s?\"                  = \"psicoticos\",\n  \"neur\\\\?tic[oa]s?\"                  = \"neuroticos\",\n  \"org\\\\?nic[oa]s?\"                   = \"organicos\",\n  \"sintom\\\\?tic[oa]s?\"                = \"sintomaticos\",\n  \"psic\\\\?os\\\\b\"                      = \"psicoticos\",\n  \"sue\\\\?\"                            = \"sueno\",\n  \"adaptaci\\\\?n\"                      = \"adaptacion\",\n  # schooling\n  \"educaci\\\\?n b\\\\?sica\"              = \"educacion basica\",\n  \"\\\\(4 o m\\\\?a\\\\? completa\"          = \"(4 o mas completa\",\n  \"\\\\(4 o m\\\\?a\\\\? incompleta\"        = \"(4 o mas incompleta\",\n  \"t\\\\?cnica\"                         = \"tecnica\",\n  \"t\\\\?ico\"                           = \"tecnico\",\n  \"t\\\\?ico superior \\\\(1-3 a\\\\? completa\"   = \"tecnico superior (1-3 anos) completa\",\n  \"t\\\\?ico superior \\\\(1-3 a\\\\? incompleta\" = \"tecnico superior (1-3 anos) incompleta\",\n  \"t\\\\?cnico superior \\\\(1-3 a\\\\?os\\\\)\"     = \"tecnico superior (1-3 anos)\",\n  \"m\\\\?s a\\\\?os\"                      = \"mas anos\",\n  # evaluation / outcomes\n  \"logro m\\\\?mo\"                      = \"logro minimo\",\n  \"logro m\\\\?nimo\"                    = \"logro minimo\",\n  # frequency/time\n  \"\\\\b1 d\\\\? ?- semana\\\\b\"            = \"1 dia - semana\",\n  \"\\\\b1 d\\\\?as - semana\\\\b\"           = \"1 dias - semana\",\n  \"d\\\\?as\"                             = \"dias\",\n  \"d\\\\?a\"                              = \"dia\",\n  \"\\\\?ltimo\"                           = \"ultimo\",\n  \"^\\\\?mo\\\\b\"                          = \"ultimo\",\n  # substances\n  \"coca\\\\?na\"                          = \"cocaina\",\n  \"\\\\bcoca\\\\?\\\\b\"                      = \"cocaina\",\n  \"analg\\\\?sicos\"                      = \"analgesicos\",\n  \"analg\\\\?cos\"                        = \"analgesicos\",\n  \"hipn\\\\?ticos\"                       = \"hipnoticos\",\n  \"\\\\bhipn\\\\?os\\\\b\"                    = \"hipnoticos\",\n  \"alucin\\\\?genos\"                     = \"alucinogenos\",\n  \"alucin\\\\?os\"                        = \"alucinogenos\",\n  # “otros problemas …”\n  \"explotaci\\\\?n comercial sexual\"     = \"explotacion comercial sexual\",\n  \"explotaci\\\\?omercial sexual\"        = \"explotacion comercial sexual\",\n  # nationality / country\n  \"\\\\bper\\\\?\\\\b\"                       = \"peru\",\n  \"rep\\\\?ca dominicana\"                = \"republica dominicana\",\n  \"\\\\bpais\\\\b\"                         = \"pais\",  # guard rail\n  # kinship\n  \"cu\\\\?/a\"                            = \"cunado/a\",\n  \"c\\\\?nyuge\"                          = \"conyuge\",\n  \"s\\\\?del\"                            = \"solo del\",\n  \"s\\\\?lo\"                             = \"solo\",\n  # housing / place\n  \"hospeder\\\\?\"                        = \"hospederia\",\n  \"pensi\\\\?hostal\"                     = \"pension, hostal\",\n  # routes of administration\n  \"aspiraci\\\\?n de\"                    = \"aspiracion de\",\n  \"aspiraci\\\\?e\"                       = \"aspiracion de\"\n)\n\nfix_text_ascii &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- stringi::stri_trans_tolower(x)\n  # 1) generic cleanup (kill mojibake / normalize punctuation)\n  x &lt;- stringr::str_replace_all(x, repl_ascii_generic)\n  # 2) targeted domain repairs for this dataset\n  x &lt;- stringr::str_replace_all(x, repl_c4)\n  # 3) small heuristics for leftover '?'\n  #    - '?n'/'?t' often from 'án'/'át' → 'an'/'at'\n  x &lt;- stringr::str_replace_all(x, \"\\\\?(?=n|t)\", \"a\")\n  #    - 'l?g' → 'log' (fisiol?gicas → fisiologicas)\n  x &lt;- stringr::str_replace_all(x, \"l\\\\?g\", \"log\")\n  #    - between letters, default to 'o' (psicol?gico → psicologico)\n  x &lt;- stringr::str_replace_all(x, \"(?&lt;=[a-z])\\\\?(?=[a-z])\", \"o\")\n  # 4) final ASCII transliteration guard (removes any stray accents)\n  x &lt;- stringi::stri_trans_general(x, \"Latin-ASCII\")\n  # 5) whitespace normalization\n  x &lt;- stringr::str_squish(x)\n  x\n}\n\n# Apply to CONS_C4_25_df (all character/factor columns)\nCONS_C4_25_df &lt;- CONS_C4_25_df %&gt;%\n  dplyr::mutate(dplyr::across(dplyr::where(~ is.character(.x) || is.factor(.x)),\n                  ~ fix_text_ascii(.x)))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c41 &lt;- setNames(\n  lapply(names(CONS_C4_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C4_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C4_25_df)  # assign column names to the list\n)\n\ndf_c4_problems1 &lt;- \npurrr::map_dfr(names(unique_values_list_c41), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c41[[name]])\n})%&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\nif(list_to_df(unique_values_list_c41) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\n    warning(paste0( \"Values with sign '?'= \", list_to_df(unique_values_list_c41)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\nif(list_to_df(unique_values_list_c41)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\n    warning(paste0( \"Values with signs '´ “ '= \", list_to_df(unique_values_list_c41)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Extra rules for the exact strings you still have\nrepl_more &lt;- c(\n  # communes/regions\n  \"\\\\b\\\\?\\\\?a\\\\b\"                = \"na\",                 # literal \"??a\" token → best ASCII guess \"na\"\n  \"\\\\bvi\\\\? del mar\\\\b\"          = \"vina del mar\",       # \"vi? del mar\"\n  \"\\\\bvi\\\\?a del mar\\\\b\"         = \"vina del mar\",       # \"vi?a del mar\" (keep too, just in case)\n  # occupation / condition\n  \"raz\\\\?\"                        = \"razon\",              # \"otra raz?\" → \"otra razon\"\n  # crimes/offences\n  \"\\\\bviolaci\\\\?\\\\b\"             = \"violacion\",          # \"violaci?\"\n  \"violaci\\\\?\"                    = \"violacion\",\n  \"todos los d\\\\?\"                = \"todos los dias\",\n  \"derivaci\\\\?\"                   = \"derivacion\",\n  # schooling/time phrases\n  \"1-3 a\\\\?\\\\s+completa\"         = \"1-3 anos completa\",\n  \"1-3 a\\\\?\\\\s+incompleta\"       = \"1-3 anos incompleta\",\n  # \" 1 a 2 a?\" / \" 3 a 4 a?\" → \" 1 a 2 anos\"\n  \"(?&lt;=\\\\d)\\\\s*a\\\\?\\\\b\"          = \" anos\",\n  \"moa\\\\?\"                        = \"mas\",                # \"5 o moa?\" → \"5 o mas\"\n  # frequency/day tokens\n  \"1 dias - semana\"               = \"1 dia - semana\",\n  \"2-3 d\\\\? - semana\"             = \"2-3 dias - semana\",\n  \"4-6 d\\\\? - semana\"             = \"4-6 dias - semana\",\n  \"5 o mas$\"                      = \"5 o mas anos\",\n  \"3 a 4 a\\\\?\"                    = \"3 a 4 anos\",\n  \"1 a 2 aoos\"                    = \"1 a 2 anos\",\n  \"1 a 2 a\\\\?\"                    = \"1 a 2 anos\",\n  \"\\\\bd\\\\?\\\\b\"                    = \"dia\",                # \"2-3 d? - semana\"\n  \"d\\\\?as\"                        = \"dias\",\n  \"d\\\\?a\"                         = \"dia\",\n  \"todos los d\\\\?\"                = \"todos los dias\",\n  # substances\n  \"\\\\bcoca\\\\?\\\\b\"                = \"cocaina\",\n  \"coca\\\\?\"                       = \"cocaina\",\n  \"no consumi\\\\?\"                 = \"no consumio\",\n  # nationality / country\n  \"\\\\bper\\\\?\\\\b\"                  = \"peru\",\n  \"per\\\\?\"                        = \"peru\"\n)\n\n\nrepl_specific &lt;- c(\n  \"fafasico\"                                 = \"fisico\",\n  \"orgocos\"                                  = \"organicos\",\n  \"orgnaicos\"                                = \"organicos\",\n  \"terapoutica\"                              = \"terapeutica\",\n  \"terapoica\"                                = \"terapeutica\",\n  \"derivacian\"                               = \"derivacion\",\n  \"miocardiopatoa\"                           = \"miocardiopatia\",\n  \"gestian\"                                  = \"gestion\",\n  \"\\\\bnioo\\\\b\"                                = \"nino\",\n  \"\\\\bnin\\\\b\"                                 = \"nino\",\n  \"\\\\bsuenoo\\\\b\"                              = \"sueno\",\n  \"estado de nimo\"                           = \"estado de animo\",\n  \"neuroos\"                                  = \"neurologicos\",\n  \"enfermedad moca\"                          = \"enfermedad medica\",\n  \"nioez\"                                    = \"ninez\",\n  \"psicoloo\"                                 = \"psicologico\",\n  \"aoos\"                                     = \"anos\",\n  # education phrases\n  \"profesional \\\\(4 o mas completa\"          = \"profesional (4 o mas anos) completa\",\n  \"profesional \\\\(4 o mas incompleta\"        = \"profesional (4 o mas anos) incompleta\",\n  \"tecnico superior \\\\(1-3 anos completa\"    = \"tecnico superior (1-3 anos) completa\",\n  \"tecnico superior \\\\(1-3 anos incompleta\"  = \"tecnico superior (1-3 anos) incompleta\",\n  \"\\\\btoica\\\\b\"                               = \"tecnica\",\n  \"\\\\bnocontesta\\\\b\"                          = \"no contesta\"\n)\n\nrepl_specific2 &lt;- \nc(\"nocontesta\"=\"no contesta\", \"razan\"=\"razon\", \"orgocos\"= \"organicos\", \"fisioloas\"= \"fisiologicas\", \"nioo\"= \"ninez\", \"moca\"= \"morfologica\", \"nioez\"= \"ninez\", \"suenoo\"= \"sueno\", \"admnistrativa\"= \"administrativa\",  \"terapoutica\"= \"terapeutica\", \"derivacian\"= \"derivacion\", \"neuroos\"= \"neurologicos\", \"psicoloo\"= \"psicologico\", \"fisioloas\"= \"fisiologicas\", \"somocos\"= \"somaticos\",     \"\\\\bafa['’\\\"]?uble\\\\b\"          = \"nuble\",          # e.g., \"afa'uble\" → \"nuble\"\n    \"\\\\brehabilitaciafa['’\\\"]?n\\\\b\" = \"rehabilitacion\"  # e.g., 'rehabilitaciafa\"n' → \"rehabilitacion\"\n  )\npat_map_extra &lt;- c(\n  # Mis-spellings of disorders\n  \"trastornos mentales organicos, incluidos los sintomocos\" = \n    \"trastornos mentales organicos, incluidos los sintomaticos\",\n  \n  \"trastornos del estado de nimo\" = \n    \"trastornos del estado de animo\",\n  \n  # Pathology of ...\n  \"patologia de la gestion del nin intrauterino\" = \n    \"patologia de la gestion y de la ninez intrauterino\",\n  \n  \"patologoa de la gestian y del ninez intrauterino\" = \n    \"patologia de la gestion y de la ninez intrauterino\",\n  \n  # Common typos / lexicals\n  \"hospederiaa\" = \"hospederia\",\n  \"pensian\" = \"pension\",\n  \"cuoado/a\" = \"cunado/a\",\n  \"tocnicos\" = \"tecnicos\",\n  \"cientoficos\" = \"cientificos\",\n  \"cientocos\" = \"cientificos\"\n)\n\n\n# Update your fixer to apply these after the generic + previous domain rules\nfix_text_ascii &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- stringi::stri_trans_tolower(x)\n\n  # 1) generic mojibake → ASCII\n  x &lt;- stringr::str_replace_all(x, repl_ascii_generic)\n\n  # 2) your prior targeted rules (if you have them, keep that call here)\n  # x &lt;- stringr::str_replace_all(x, repl_c4)   # &lt;-- keep if already defined\n\n  # 3) NEW: apply these extra rules\n  x &lt;- stringr::str_replace_all(x, repl_more)\n\n  # 4) light heuristics for any stray '?'\n  x &lt;- stringr::str_replace_all(x, \"\\\\?(?=n|t)\", \"a\")         # án/át → an/at\n  x &lt;- stringr::str_replace_all(x, \"l\\\\?g\", \"log\")            # fisiol?g → fisiolog\n  x &lt;- stringr::str_replace_all(x, \"(?&lt;=[a-z])\\\\?(?=[a-z])\", \"o\") # psicolog?co → psicologico\n  # 5) final ASCII guard + spacing\n  x &lt;- stringi::stri_trans_general(x, \"Latin-ASCII\")\n  x &lt;- stringr::str_squish(x)\n  # 6) Specific corrections (regex on the left, ASCII on the right)\n  x &lt;- stringr::str_replace_all(x, repl_ascii_generic)\n  x &lt;- stringr::str_replace_all(x, repl_specific2)#pat_map_extra\n  x &lt;- stringr::str_replace_all(x, pat_map_extra)#\n  # x\n}\n\n# Run on CONS_C4_25_df\nCONS_C4_25_df &lt;- CONS_C4_25_df %&gt;%\n  dplyr::mutate(dplyr::across(where(~ is.character(.x) || is.factor(.x)),\n                                        ~ fix_text_ascii(.x)))\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c42 &lt;- setNames(\n  lapply(names(CONS_C4_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C4_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C4_25_df)  # assign column names to the list\n)\n\ndf_c4_problems2 &lt;- \npurrr::map_dfr(names(unique_values_list_c42), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c42[[name]])\n})%&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\nif(list_to_df(unique_values_list_c42) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\n    warning(paste0( \"Values with sign '?'= \", list_to_df(unique_values_list_c42)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\nif(list_to_df(unique_values_list_c42)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\n    warning(paste0( \"Values with signs '´ “ '= \", list_to_df(unique_values_list_c42)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n    )\n}\n#list_to_df(unique_values_list_c42) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"HASH_KEY\", !grepl(\"fecha|edad|dias|numero|id|codigo\",variable)) |&gt; View()\n\n\n\n\n\nClean C5\n\n\nCode\n# Comprehensive encoding fix function\nfix_encoding_complete &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- tolower(x)\n  repl_ascii_generic &lt;- c(\n    \"\\uFEFF\" = \"\", \"\\u00C2\" = \"\", \"\\u00AD\" = \"\", \"Ã‚Â\" = \"\", \"ã‚â­\" = \"\",\n    \"â€˜\"=\"'\",\"â€™\"=\"'\",\"â€œ\"=\"\\\"\",\"â€�\"=\"\\\"\",\"Â´\"=\"'\",\"â€²\"=\"'\",\n    \"â€“\" = \"-\", \"â€”\" = \"-\", \"\\u2013\" = \"-\", \"\\u2014\" = \"-\",\n    # vowels/ü → plain ASCII\n    \"ÃƒÂ¡\"=\"a\",\"Ã¡\"=\"a\",\"ãƒâ¡\"=\"a\",\"á\"=\"a\",\n    \"ÃƒÂ©\"=\"e\",\"Ã©\"=\"e\",\"ãƒâ©\"=\"e\",\"é\"=\"e\",\n    \"ÃƒÂ­\"=\"i\",\"Ã­\"=\"i\",\"ãƒâ­\"=\"i\",\"í\"=\"i\",\n    \"ÃƒÂ³\"=\"o\",\"Ã³\"=\"o\",\"ãƒâ³\"=\"o\",\"ó\"=\"o\",\"Ó\"=\"o\",\n    \"ÃƒÂº\"=\"u\",\"Ãº\"=\"u\",\"ãƒâº\"=\"u\",\"ú\"=\"u\",\n    \"ÃƒÂ¼\"=\"u\",\"Ã¼\"=\"u\",\"Ãœ\"=\"u\",\"ÃƒÂœ\"=\"u\",\"ãƒâ¼\"=\"u\",\"ü\"=\"u\",\n    # ñ/Ñ → n (ASCII-only requirement)\n    \"ÃƒÂ±\"=\"n\",\"Ã±\"=\"n\",\"ãƒâ±\"=\"n\",\"Ãƒâ€˜\"=\"n\",\"Ñ\"=\"n\",\"ñ\"=\"n\"\n  )\n  x &lt;- stringr::str_replace_all(x, repl_ascii_generic)\n  # Step 1: Remove generic UTF-8 BOM and control characters\n  x &lt;- gsub(\"[\\uFEFF\\u00AD\\u200B-\\u200F\\u202A-\\u202E]\", \"\", x, perl = TRUE)\n  # Step 2: Fix mojibake patterns using regex (avoids quote-breaking issues)\n  # Match corruption patterns and remove them, then fix the word\n  # Pattern 1: Remove mojibake sequences (3-4 char UTF-8 corruption)\n  # This catches ãƒâ and similar patterns\n  x &lt;- gsub(\"[\\u00C0-\\u00FF][\\u0080-\\u00BF]{1,3}\", \"\", x, perl = TRUE)\n  # Pattern 2: Fix words that had mojibake removed\n  word_corrections &lt;- c(\n    # After mojibake removal, fix incomplete words\n    \"^nicamente$\" = \"unicamente\",\n    \"^uble$\" = \"nuble\", \n    \"rehabilitaci.*?n$\" = \"rehabilitacion\",\n    \"raz.*?n$\" = \"razon\",\n    \"esquizot.*?pico$\" = \"esquizotipico\",\n    \"curic.*?$\" = \"curico\",\n    \"b.*?o-b.*?o$\" = \"bio-bio\",\n    \"vi.*?a$\" = \"vina\",\n    \"ays.*?n$\" = \"aysen\",\n    \"concepci.*?n$\" = \"concepcion\",\n    \"m.*?nimo$\" = \"minimo\",\n    \"t.*?rmino$\" = \"termino\",\n    \"f.*?sico$\" = \"fisico\",\n    \"otro g.*?nero$\" = \"otro genero\"\n  )\n  for(pattern in names(word_corrections)) {\n    x &lt;- gsub(pattern, word_corrections[pattern], x, perl = TRUE)\n  }\n  # Step 3: Handle question mark replacements systematically\n  qmark_replacements &lt;- list(\n    # Communes and regions\n    c(\"cha\\\\?ral\", \"chanaral\"),\n    c(\"vi\\\\?a del mar\", \"vina del mar\"),\n    c(\"vi\\\\? del mar\", \"vina del mar\"),\n    c(\"vicu\\\\?\", \"vicuna\"),\n    c(\"san gregorio de \\\\?iquen\", \"san gregorio de niquen\"),\n    c(\"san gregorio de \\\\?quen\", \"san gregorio de niquen\"),\n    c(\"de \\\\?ble\", \"de nuble\"),\n    c(\"de \\\\?uble\", \"de nuble\"),\n    c(\"iba\\\\?es\", \"ibanez\"),\n    c(\"iba\\\\?s\", \"ibanez\"),\n    # Education\n    c(\"educaci\\\\?n\", \"educacion\"),\n    c(\"b\\\\?sica\", \"basica\"),\n    c(\"t\\\\?cnico\", \"tecnico\"),\n    c(\"t\\\\?cnica\", \"tecnica\"),\n    c(\"t\\\\?ico\", \"tecnico\"),\n    c(\"t\\\\?ica\", \"tecnica\"),\n    c(\"nunca estudi\\\\?\", \"nunca estudio\"),\n    c(\"a\\\\?os\", \"anos\"),\n    c(\"m\\\\?s\", \"mas\"),\n    c(\"\\\\(4 o m\\\\?s a\\\\?os\\\\)\", \"(4 o mas anos)\"),\n    c(\"\\\\(1-3 a\\\\?os\\\\)\", \"(1-3 anos)\"),\n    c(\"1-3 a\\\\?\", \"1-3 anos\"),\n    # Clinical terms\n    c(\"esquizot\\\\?pico\", \"esquizotipico\"),\n    c(\"esquizot\\\\?co\", \"esquizotipico\"),\n    c(\"h\\\\?bitos\", \"habitos\"),\n    c(\"h\\\\?tos\", \"habitos\"),\n    c(\"psicol\\\\?gico\", \"psicologico\"),\n    c(\"psicol\\\\?gicos\", \"psicologicos\"),\n    c(\"psicol\\\\?os\", \"psicologicos\"),\n    c(\"fisiol\\\\?gicas\", \"fisiologicas\"),\n    c(\"fisiol\\\\?as\", \"fisiologicas\"),\n    c(\"som\\\\?tico\", \"somatico\"),\n    c(\"som\\\\?ticos\", \"somaticos\"),\n    c(\"som\\\\?ca\", \"somatica\"),\n    c(\"psic\\\\?tico\", \"psicotico\"),\n    c(\"psic\\\\?ticos\", \"psicoticos\"),\n    c(\"psic\\\\?os\", \"psicoticos\"),\n    c(\"neur\\\\?tico\", \"neurotico\"),\n    c(\"neur\\\\?ticos\", \"neuroticos\"),\n    c(\"neur\\\\?os\", \"neuroticos\"),\n    c(\"org\\\\?nico\", \"organico\"),\n    c(\"org\\\\?nicos\", \"organicos\"),\n    c(\"org\\\\?co\", \"organico\"),\n    c(\"sintom\\\\?tico\", \"sintomatico\"),\n    c(\"sintom\\\\?ticos\", \"sintomaticos\"),\n    c(\"sintom\\\\?cos\", \"sintomaticos\"),\n    c(\"adaptaci\\\\?n\", \"adaptacion\"),\n    c(\"adaptaci\\\\?\", \"adaptacion\"),\n    c(\"especificaci\\\\?n\", \"especificacion\"),\n    c(\"especificaci\\\\?\", \"especificacion\"),\n    c(\"transformaci\\\\?n\", \"transformacion\"),\n    c(\"transformaci\\\\?ersistente\", \"transformacion persistente\"),\n    c(\"lesi\\\\?n\", \"lesion\"),\n    c(\"lesi\\\\?\", \"lesion\"),\n    c(\"disfunci\\\\?n\", \"disfuncion\"),\n    c(\"disfunci\\\\?erebral\", \"disfuncion cerebral\"),\n    c(\"espec\\\\?fico\", \"especifico\"),\n    c(\"espec\\\\?ficos\", \"especificos\"),\n    # Medical/physical\n    c(\"megalobl\\\\?ica\", \"megaloblastica\"),\n    c(\"ferrop\\\\?ca\", \"ferropenica\"),\n    c(\"cardiopat\\\\?as\", \"cardiopatias\"),\n    c(\"cardiopat\\\\?\", \"cardiopatia\"),\n    c(\"miocardiopat\\\\?\", \"miocardiopatia\"),\n    c(\"alcoh\\\\?lica\", \"alcoholica\"),\n    c(\"hepatitis cr\\\\?a\", \"hepatitis cronica\"),\n    c(\"hepatitis cr\\\\?nica\", \"hepatitis cronica\"),\n    c(\"patolog\\\\?a\", \"patologia\"),\n    c(\"patolog\\\\?\", \"patologia\"),\n    c(\"gesti\\\\?n\", \"gestion\"),\n    c(\"ni\\\\?o\", \"nino\"),\n    c(\"ni\\\\?\", \"nino\"),\n    # Evaluation\n    c(\"logro m\\\\?nimo\", \"logro minimo\"),\n    c(\"logro m\\\\?mo\", \"logro minimo\"),\n    # Substances\n    c(\"coca\\\\?na\", \"cocaina\"),\n    c(\"coca\\\\?\", \"cocaina\"),\n    c(\"analg\\\\?sicos\", \"analgesicos\"),\n    c(\"analg\\\\?cos\", \"analgesicos\"),\n    c(\"hipn\\\\?ticos\", \"hipnoticos\"),\n    c(\"hipn\\\\?os\", \"hipnoticos\"),\n    c(\"alucin\\\\?genos\", \"alucinogenos\"),\n    c(\"alucin\\\\?os\", \"alucinogenos\"),\n    # Time/frequency\n    c(\"d\\\\?as\", \"dias\"),\n    c(\"d\\\\?a\", \"dia\"),\n    c(\"\\\\?ltimo\", \"ultimo\"),\n    c(\"\\\\?ltimos\", \"ultimos\"),\n    c(\"no consumi\\\\?\", \"no consumio\"),\n    # Other terms\n    c(\"explotaci\\\\?n\", \"explotacion\"),\n    c(\"explotaci\\\\?exual\", \"explotacion sexual\"),\n    c(\"discriminaci\\\\?n\", \"discriminacion\"),\n    c(\"discriminaci\\\\?\", \"discriminacion\"),\n    c(\"violaci\\\\?n\", \"violacion\"),\n    c(\"violaci\\\\?\", \"violacion\"),\n    c(\"derivaci\\\\?n\", \"derivacion\"),\n    c(\"derivaci\\\\?\", \"derivacion\"),\n    c(\"orientaci\\\\?exuales\", \"orientacion sexuales\"),\n    c(\"estr\\\\?grave\", \"estres grave\"),\n    c(\"estr\\\\?\", \"estres\"),\n    c(\"s\\\\?rome amn\\\\?co\", \"sindrome amnesico\"),\n    c(\"per\\\\?\", \"peru\"),\n    c(\"rep\\\\?ca dominicana\", \"republica dominicana\"),\n    c(\"c\\\\?nyuge\", \"conyuge\"),\n    c(\"cu\\\\?ado\", \"cunado\"),\n    c(\"hospeder\\\\?\", \"hospederia\"),\n    c(\"pensi\\\\?\", \"pension\"),\n    c(\"aspiraci\\\\?n\", \"aspiracion\"),\n    c(\"aspiraci\\\\?\", \"aspiracion\"),\n    c(\"ocupaci\\\\?n\", \"ocupacion\"),\n    c(\"ocupaci\\\\?\", \"ocupacion\"),\n    c(\"condici\\\\?n\", \"condicion\"),\n    c(\"condici\\\\?\", \"condicion\"),\n    c(\"corrupci\\\\?\", \"corrupcion\"),\n    c(\"producci\\\\?n\", \"produccion\"),\n    c(\"producci\\\\?\", \"produccion\"),\n    c(\"pornogr\\\\?fico\", \"pornografico\"),\n    c(\"pornogr\\\\?co\", \"pornografico\"),\n    c(\"receptaci\\\\?\", \"receptacion\"),\n    c(\"intimidaci\\\\?\", \"intimidacion\"),\n    c(\"sue\\\\?\", \"sueno\"),\n    c(\"raz\\\\?\", \"razon\")\n  )\n  # Apply question mark replacements\n  for(repl in qmark_replacements) {\n    x &lt;- gsub(repl[1], repl[2], x, perl = TRUE)\n  }\n  # Step 4: Fix common typos and specific issues\n  typo_fixes &lt;- c(\n    \"orgocos\" = \"organicos\",\n    \"orgnaicos\" = \"organicos\",\n    \"fafasico\" = \"fisico\",\n    \"terapoutica\" = \"terapeutica\",\n    \"terapoica\" = \"terapeutica\",\n    \"derivacian\" = \"derivacion\",\n    \"miocardiopatoa\" = \"miocardiopatia\",\n    \"gestian\" = \"gestion\",\n    \"\\\\bnioo\\\\b\" = \"nino\",\n    \"\\\\bnin\\\\b\" = \"nino\",\n    \"suenoo\" = \"sueno\",\n    \"neuroos\" = \"neurologicos\",\n    \"psicoloo\" = \"psicologico\",\n    \"aoos\" = \"anos\",\n    \"nioez\" = \"ninez\",\n    \"toica\" = \"tecnica\",\n    \"nocontesta\" = \"no contesta\",\n    \"razan\" = \"razon\",\n    \"fisioloas\" = \"fisiologicas\",\n    \"somocos\" = \"somaticos\",\n    \"moca\" = \"morfologica\",\n    \"admnistrativa\" = \"administrativa\",\n    \"hospederiaa\" = \"hospederia\",\n    \"pensian\" = \"pension\",\n    \"cuoado/a\" = \"cunado/a\",\n    \"tocnicos\" = \"tecnicos\",\n    \"cientoficos\" = \"cientificos\",\n    \"cientocos\" = \"cientificos\"\n  )\n  x &lt;- stringr::str_replace_all(x, typo_fixes)\n  # Step 5: Handle special cases that break R strings\n  # Use regex to match patterns like afa'uble or rehabilitaciafa\"n\n  x &lt;- gsub(\"afa['\\\"]uble\", \"nuble\", x, perl = TRUE)\n  x &lt;- gsub(\"rehabilitaciafa['\\\"]n\", \"rehabilitacion\", x, perl = TRUE)\n  # Step 6: Generic heuristics for remaining question marks\n  # '?n' or '?t' often from 'án' or 'át' -&gt; 'an' or 'at'\n  x &lt;- gsub(\"\\\\?(?=n|t)\", \"a\", x, perl = TRUE)\n  # 'l?g' -&gt; 'log' (fisiol?gicas -&gt; fisiologicas)\n  x &lt;- gsub(\"l\\\\?g\", \"log\", x, perl = TRUE)\n  # Between letters, default to 'o'\n  x &lt;- gsub(\"(?&lt;=[a-z])\\\\?(?=[a-z])\", \"o\", x, perl = TRUE)\n  # Step 7: Remove any remaining accented characters (convert to ASCII)\n  accent_map &lt;- c(\n    \"á\"=\"a\", \"à\"=\"a\", \"ä\"=\"a\", \"â\"=\"a\", \"ã\"=\"a\", \"å\"=\"a\",\n    \"é\"=\"e\", \"è\"=\"e\", \"ë\"=\"e\", \"ê\"=\"e\",\n    \"í\"=\"i\", \"ì\"=\"i\", \"ï\"=\"i\", \"î\"=\"i\",\n    \"ó\"=\"o\", \"ò\"=\"o\", \"ö\"=\"o\", \"ô\"=\"o\", \"õ\"=\"o\",\n    \"ú\"=\"u\", \"ù\"=\"u\", \"ü\"=\"u\", \"û\"=\"u\",\n    \"ñ\"=\"n\", \"ç\"=\"c\",\n    \"Á\"=\"A\", \"À\"=\"A\", \"Ä\"=\"A\", \"Â\"=\"A\", \"Ã\"=\"A\", \"Å\"=\"A\",\n    \"É\"=\"E\", \"È\"=\"E\", \"Ë\"=\"E\", \"Ê\"=\"E\",\n    \"Í\"=\"I\", \"Ì\"=\"I\", \"Ï\"=\"I\", \"Î\"=\"I\",\n    \"Ó\"=\"O\", \"Ò\"=\"O\", \"Ö\"=\"O\", \"Ô\"=\"O\", \"Õ\"=\"O\",\n    \"Ú\"=\"U\", \"Ù\"=\"U\", \"Ü\"=\"U\", \"Û\"=\"U\",\n    \"Ñ\"=\"N\", \"Ç\"=\"C\"\n  )\n  x &lt;- stringr::str_replace_all(x, accent_map)\n  # Step 8: Clean up double 'nn' at word boundaries\n  x &lt;- gsub(\"nn\\\\b\", \"n\", x, perl = TRUE)\n  # Step 9: Final cleanup - remove any remaining non-ASCII\n  x &lt;- iconv(x, from = \"UTF-8\", to = \"ASCII//TRANSLIT\", sub = \"\")\n  # Step 10: Normalize whitespace\n  x &lt;- str_squish(x)\n  x &lt;- stringr::str_replace_all(x, \"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove trailing periods\n  # Regex-based replacements (dictionary)\n  replacements_c5 &lt;- c(\n    \"vafanculos\" = \"vinculos\",\n    \"araucanafaa\" = \"araucania\",\n    \"bafao-bafao\" = \"bio-bio\",\n    \"reloncavafa\" = \"reloncavi\",\n    \"valparaafaso\" = \"valparaiso\",\n    \"afa'uble\" = \"nuble\",\n    \"espontoa\" = \"espontanea\",\n    \"intervenciantegral\" = \"intervencion integral\",\n    \"agresioexual\" = \"agresion sexual\",\n    \"proteccioara\" = \"proteccion para\",\n    \"intervencioreve\" = \"intervencion breve\",\n    \"convina\" = \"convivencia\",\n    \"esquizotafapico\" = \"esquizotipico\",\n    \"especafafico\" = \"especifico\",\n    \"tricotilomanafaa\" = \"tricotilomania\",\n    \"especafaficos\" = \"especificos\",\n    \"nervina\" = \"nerviosa\",\n    \"psicotropas\" = \"psicotropicas\",\n    \"sueno-vina\" = \"sueno-vigilia\",\n    \"generalizada\" = \"generalizado\",\n    \"hipomanafaaco\" = \"hipomaniaco\",\n    \"cleptomanafaa\" = \"cleptomania\",\n    \"especafafica\" = \"especifica\",\n    \"lafamite\" = \"limite\",\n    \"manafaaco\" = \"maniaco\",\n    \"afnimo\" = \"animo\",\n    \"patologafaa\" = \"patologia\",\n    \"cocaafana\" = \"cocaina\",\n    \"1 dafaas - semana\" = \"1 dia - semana\",\n    \"menos de 1 dafaa - semana\" = \"menos de 1 dia - semana\",\n    \"2-3 dafaas - semana\" = \"2-3 dias - semana\",\n    \"4-6 dafaas - semana\" = \"4-6 dias - semana\",\n    \"todos los dafaas\" = \"todos los dias\",\n    \"afasnicamente\" = \"unicamente\",\n    \"lesiones gravafasimaslesiones gravafasimas\" = \"lesiones gravisimas\",\n    \"crafamenes\" = \"crimenes\",\n    \"vafafa,actima\" = \"victima\",\n    \"fiscalafafa,aa\" = \"fiscalia\",\n    \"programa especializados en temoca de nino ninoy/o adolescentes en situacioe calle (pe)\" =\n      \"programa especializados en tematica de ninos, ninas y/o adolescentes en situacian de calle (pe)\",\n    \"fiscaloa\" = \"fiscalia\",\n    \"proteccian\" = \"proteccion\",\n    \"intervencian\" = \"intervencion\",\n    \"intervencioamiliar\" = \"intervencion familiar\",\n    \"garant\\\\?\" = \"garantia\",\n    \"fiscal\\\\?\" = \"fiscalia\",\n    \"corporacioudicial\" = \"corporacion judicial\",\n    \"prevencioomunitaria\" = \"prevencion comunitaria\",\n    \"voimas\" = \"victimas\",\n    \"corporaciafafa,n\" = \"corporacion\",\n    \"representaciafafa,n jurafafa,adica\" = \"corporacion juridica\",\n    \"reparaciafafa,n\" = \"reparacion\",\n    \"daafafa,o\" = \"dano\",\n    \"voctimas\" = \"victimas\",\n    \"garantoa\" = \"garantia\",\n    \"representacian\" = \"representacion\",\n    \"situacian\" = \"situacion\",\n    \"educaci\\\\?\\\\?ca\" = \"educacion basica\",\n    \"cardiopatafaas\" = \"cardiopatias\",\n    \"miocardiopatafaa\" = \"miocardiopatia\",\n    \"ludopatafaa\" = \"ludopatia\",\n    \"prisionizacion\" = \"prisionalizacion\"\n  )\n  # Apply regex replacements\n  x &lt;- stringr::str_replace_all(x, replacements_c5)\n  # Literal (fixed) replacements for problematic patterns with '(' and '?'\n  replacements_c5_problematic &lt;- c(\n    \"profesional (4 o moa? incompleta\" = \"profesional (4 o mas) incompleta\",\n    \"profesional (4 o moa? completa\"   = \"profesional (4 o mas) completa\"\n  )\n  x &lt;- stringi::stri_replace_all_fixed(\n    x,\n    names(replacements_c5_problematic),\n    unname(replacements_c5_problematic),\n    vectorize_all = FALSE\n  )\n  return(x)\n}\n\n# Apply the comprehensive fix to your dataframe\nCONS_C5_25_df &lt;- CONS_C5_25 %&gt;%\n  mutate(across(where(~ is.character(.x) | is.factor(.x)), \n                ~ fix_encoding_complete(.x)))\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\nunique_values_list_c53 &lt;- setNames(\n  lapply(names(CONS_C5_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C5_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C5_25_df)  # assign column names to the list\n)\nif(list_to_df(unique_values_list_c53) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c53)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\nif(list_to_df(unique_values_list_c53)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c53)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ndict_fixed &lt;- c(\n  \"vafanculos\" = \"vinculos\",\n  \"araucanafaa\" = \"araucania\",\n  \"bafao-bafao\" = \"bio-bio\",\n  \"reloncavafa\" = \"reloncavi\",\n  \"valparaafaso\" = \"valparaiso\",\n  \"afa'uble\" = \"nuble\",\n  \"espontoa\" = \"espontanea\",\n  \"intervenciantegral\" = \"intervencion integral\",\n  \"agresioexual\" = \"agresion sexual\",\n  \"proteccioara\" = \"proteccion para\",\n  \"intervencioreve\" = \"intervencion breve\",\n  \"convina\" = \"convivencia\",\n  \"esquizotafapico\" = \"esquizotipico\",\n  \"especafafico\" = \"especifico\",\n  \"tricotilomanafaa\" = \"tricotilomania\",\n  \"especafaficos\" = \"especificos\",\n  \"nervina\" = \"nerviosa\",\n  \"psicotropas\" = \"psicotropicas\",\n  \"sueno-vina\" = \"sueno-vigilia\",\n  \"generalizada\" = \"generalizado\",\n  \"hipomanafaaco\" = \"hipomaniaco\",\n  \"cleptomanafaa\" = \"cleptomania\",\n  \"especafafica\" = \"especifica\",\n  \"lafamite\" = \"limite\",\n  \"manafaaco\" = \"maniaco\",\n  \"afnimo\" = \"animo\",\n  \"patologafaa\" = \"patologia\",\n  \"cocaafana\" = \"cocaina\",\n  \"1 dafaas - semana\" = \"1 dia - semana\",\n  \"menos de 1 dafaa - semana\" = \"menos de 1 dia - semana\",\n  \"2-3 dafaas - semana\" = \"2-3 dias - semana\",\n  \"4-6 dafaas - semana\" = \"4-6 dias - semana\",\n  \"todos los dafaas\" = \"todos los dias\",\n  \"afasnicamente\" = \"unicamente\",\n  \"lesiones gravafasimaslesiones gravafasimas\" = \"lesiones gravisimas\",\n  \"crafamenes\" = \"crimenes\",\n  \"vafafa,actima\" = \"victima\",\n  \"fiscalafafa,aa\" = \"fiscalia\",\n  # keep these exactly as written (with parentheses and ?), they are **literal** here:\n  \"programa especializados en temoca de nino ninoy/o adolescentes en situacioe calle (pe)\" =\n    \"programa especializados en tematica de ninos, ninas y/o adolescentes en situacian de calle (pe)\",\n  \"fiscaloa\" = \"fiscalia\",\n  \"proteccian\" = \"proteccion\",\n  \"intervencian\" = \"intervencion\",\n  \"intervencioamiliar\" = \"intervencion familiar\",\n  \"garant?\" = \"garantia\",\n  \"fiscal?\" = \"fiscalia\",\n  \"corporacioudicial\" = \"corporacion judicial\",\n  \"prevencioomunitaria\" = \"prevencion comunitaria\",\n  \"voimas\" = \"victimas\",\n  \"corporaciafafa,n\" = \"corporacion\",\n  \"representaciafafa,n jurafafa,adica\" = \"corporacion juridica\",\n  \"reparaciafafa,n\" = \"reparacion\",\n  \"daafafa,o\" = \"dano\",\n  \"voctimas\" = \"victimas\",\n  \"garantoa\" = \"garantia\",\n  \"representacian\" = \"representacion\",\n  \"situacian\" = \"situacion\",\n  \"educaci??ca\" = \"educacion basica\",\n  # the problematic ones (with unmatched '('): fixed mode handles them safely\n  \"profesional (4 o moa? incompleta\" = \"profesional (4 o mas) incompleta\",\n  \"profesional (4 o moa? completa\"  = \"profesional (4 o mas) completa\",\n  \"cardiopatafaas\" = \"cardiopatias\",\n  \"miocardiopatafaa\" = \"miocardiopatia\",\n  \"ludopatafaa\" = \"ludopatia\",\n  \"prisionizacion\" = \"prisionalizacion\"\n)\n# 2) Literal multi-replace (no regex). Works on full vectors efficiently.\nfixed_replace_all &lt;- function(x, dict) {\n  x &lt;- as.character(x)\n  pat &lt;- names(dict)\n  rep &lt;- unname(dict)\n  stringi::stri_replace_all_fixed(x, pat, rep, vectorize_all = FALSE)\n}\n\n# 3) Apply to all character/factor columns (no regex errors anymore)\nCONS_C5_25_df &lt;- CONS_C5_25_df %&gt;%\n  mutate(across(where(~ is.character(.x) || is.factor(.x)),\n                ~ fixed_replace_all(.x, dict_fixed)))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\nunique_values_list_c54 &lt;- setNames(\n  lapply(names(CONS_C5_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C5_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C5_25_df)  # assign column names to the list\n)\nif(list_to_df(unique_values_list_c54) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c54)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\nif(list_to_df(unique_values_list_c54)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c54)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n#list_to_df(unique_values_list_c54) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"HASH_KEY\", !grepl(\"fecha|edad|dias|numero|id|codigo|n_\",variable)) |&gt; View()\n\n\n\n\n\nClean C6\n\n\nCode\n# Apply transformations to character columns\nCONS_C6_25_df &lt;- CONS_C6_25 %&gt;%\n  dplyr::mutate(across(everything(), ~ {\n    .x %&gt;%\n      stringr::str_to_lower() %&gt;%  # Convert to lowercase\n      stringr::str_trim() %&gt;%  # Trim leading and trailing whitespace\n      stringr::str_replace_all(\"\\\\s+\", \" \") %&gt;%  # Replace multiple spaces with a single space\n      stringr::str_replace_all(\"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove periods at the end (and spaces before)\n  }))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\nunique_values_list_c60 &lt;- setNames(\n  lapply(names(CONS_C6_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C6_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C6_25_df)  # assign column names to the list\n)\ndf_c6_problems0 &lt;- \npurrr::map_dfr(names(unique_values_list_c60), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c60[[name]])\n})%&gt;% \n  dplyr::filter(stringr::str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  replacements_c6_1 &lt;- c(\n    \"ãƒâ±\" = \"ñ\", \"ãƒâ³\" = \"ó\", \"ãƒâ­\" = \"í\",\n    \"ãƒâ©\" = \"é\", \"ãƒâ¡\" = \"á\", \"ãƒâº\" = \"ú\"\n  )\nreplace_chars &lt;- function(column) {\n  reduce(names(replacements_c6_1), ~ stringr::str_replace_all(.x, .y, replacements_c6_1[.y]), .init = column)\n}\n\nCONS_C6_25_df &lt;- CONS_C6_25_df %&gt;%\n  dplyr::mutate(across(everything(), replace_chars))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\n\nunique_values_list_c61 &lt;- setNames(\n  lapply(names(CONS_C6_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C6_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C6_25_df)  # assign column names to the list\n)\ndf_c6_problems1 &lt;- \npurrr::map_dfr(names(unique_values_list_c61), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c61[[name]])\n})%&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  replacements_c6_2 &lt;- c(\n    \"iba\\\\?s\" = \"ibáñez\",\n    \"ibaãƒâ‘es\" = \"ibáñez\",\n    \"ãƒâ‘uble\" = \"ñuble\",\n    \"peãƒâ‘alolen\" = \"peñalolén\",\n    \"viãƒâ‘a\" = \"viña\",\n    \"peãƒâ‘aflor\" = \"peñaflor\",\n    \"ãƒâ‘uãƒâ‘oa\" = \"ñuñoa\",\n    \"vicuãƒâ‘a\" = \"vicuña\",\n    \"chaãƒâ‘aral\" = \"chañaral\",\n    \"doãƒâ‘ihue\" = \"doñihue\",\n    \"hualaãƒâ‘e\" = \"hualañé\",\n    \"ãƒâ‘iquen\" = \"ñiquén\",\n    \"gendarmeríã‚â­a\" = \"gendarmería\",\n    \"intimidaci\\\\?\" = \"intimidación\",\n    \"grav\\\\?mas\" = \"gravísimas\",\n    \"receptaci\\\\?\" = \"receptación\",\n    \"tr\\\\?co de estupefacientes\" = \"tráfico de estupefacientes\",\n    \"t\\\\?ico\" = \"técnico\",\n    \"\\\\(1-3 años completa\" = \"(1-3 años completa)\",\n    \"\\\\(1-3 años incompleta\" = \"(1-3 años incompleta)\",  \n    \"otra raz\\\\?\" = \"otra razón\",\n    \"ãƒâšnicamente\" = \"únicamente\",\n    \"pensi\\\\?hostal\" = \"pensión, hostal\",\n    \"hospeder\\\\?\" = \"hospedería\",\n    \"ocupaci\\\\?rregular\" = \"ocupación irregular\",\n    \"1 a 2 a\\\\?\" = \"1 a 2 años\", \n    \"3 a 4 a\\\\?\" = \"3 a 4 años\", \n    \"5 o m\\\\?a\" = \"5 o más años\",   \n    \"\\\\?mo 12 meses\" = \"últimos 12 meses\",\n    \"\\\\?mo 6 meses\" = \"últimos 6 meses\",\n    \"coca\\\\?\" = \"cocaína\",\n    \"sintom\\\\?cos\" = \"sintomáticos\",\n    \"psicol\\\\?o\" = \"psicológico\",\n    \"ãƒânimo\"= \"ánimo\",\n    \"explotaci\\\\?omercial\" = \"explotación comercial\",\n    \"logro m\\\\?mo\" = \"logro mínimo\",\n    \"org\\\\?cos\" = \"orgánicos\",\n    \"h\\\\?tos\" = \"hábitos\",\n    \"fisiol\\\\?as\" = \"fisiológicas\",\n    \"som\\\\?cos\" = \"somáticos\",\n    \"esquizot\\\\?co\" = \"esquizotípico\",\n    \"neur\\\\?os\" = \"neuróticos\"\n  )\nreplace_chars &lt;- function(column) {\n  reduce(names(replacements_c6_2), ~ stringr::str_replace_all(.x, .y, replacements_c6_2[.y]), .init = column)\n}\n\nCONS_C6_25_df &lt;- CONS_C6_25_df %&gt;%\n  dplyr::mutate(across(everything(), replace_chars))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\nunique_values_list_c62 &lt;- setNames(\n  lapply(names(CONS_C6_25_df), function(col_name) {\n    # obtain unique values\n    unique_values &lt;- unique(CONS_C6_25_df[[col_name]])\n    return(unique_values)\n  }),\n  names(CONS_C6_25_df)  # assign column names to the list\n)\ndf_c6_problems2 &lt;- \npurrr::map_dfr(names(unique_values_list_c62), function(name) {\n  tibble(element_name = name, subelement = unique_values_list_c62[[name]])\n})%&gt;% \n  dplyr::filter(str_detect(subelement, \"[^[:ascii:]]|Ã|Â|ã|â|\\\\?|\\\\\\\\|í|ì|î|ï|é|è|ê|ë|ó|ò|ô|õ|ö|ú|ù|û|ü|ñ|Ñ|Ã±|Â¿|â€™|â€œ|â€|ã³|ã©|ã­|ãº|ã¼|ã²|ã¼|ã³|ã³|ã±|[@#$%^&*&lt;&gt;~`{}\\\\[\\\\]]\"))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\nreplacements4 &lt;- c(\n  \"á\" = \"a\", \"é\" = \"e\", \"í\" = \"i\", \"ó\" = \"o\", \"ú\" = \"u\", \"ñ\" = \"n\",\n  \"Á\" = \"A\", \"É\" = \"E\", \"Í\" = \"I\", \"Ó\" = \"O\", \"Ú\" = \"U\", \"Ñ\" = \"N\"\n)\nreplace_chars4 &lt;- function(column) {\n  for (pattern in names(replacements4)) {\n    column &lt;- gsub(pattern, replacements4[pattern], column, fixed = TRUE)\n  }\n  return(column)\n}\nCONS_C6_25_df &lt;- CONS_C6_25_df %&gt;%\n  dplyr::mutate(across(everything(), ~ replace_chars4(.)))\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# Comprehensive encoding fix function\nfix_encoding_complete &lt;- function(x) {\n  x &lt;- as.character(x)\n  x &lt;- tolower(x)\n  # Step 1: Remove generic UTF-8 BOM and control characters\n  x &lt;- gsub(\"[\\uFEFF\\u00AD\\u200B-\\u200F\\u202A-\\u202E]\", \"\", x, perl = TRUE)\n  # Step 2: Fix mojibake patterns using regex (avoids quote-breaking issues)\n  # Match corruption patterns and remove them, then fix the word\n  #----\n  # Pattern 1: Remove mojibake sequences (3-4 char UTF-8 corruption)\n  # This catches ãƒâ and similar patterns\n  x &lt;- gsub(\"[\\u00C0-\\u00FF][\\u0080-\\u00BF]{1,3}\", \"\", x, perl = TRUE)\n  # Pattern 2: Fix words that had mojibake removed\n  word_corrections &lt;- c(\n    # After mojibake removal, fix incomplete words\n    \"^nicamente$\" = \"unicamente\",\n    \"^uble$\" = \"nuble\",\n    \"rehabilitaci.*?n$\" = \"rehabilitacion\",\n    \"raz.*?n$\" = \"razon\",\n    \"esquizot.*?pico$\" = \"esquizotipico\",\n    \"curic.*?$\" = \"curico\",\n    \"b.*?o-b.*?o$\" = \"bio-bio\",\n    \"vi.*?a$\" = \"vina\",\n    \"ays.*?n$\" = \"aysen\",\n    \"concepci.*?n$\" = \"concepcion\",\n    \"m.*?nimo$\" = \"minimo\",\n    \"t.*?rmino$\" = \"termino\",\n    \"f.*?sico$\" = \"fisico\",\n    \"otro g.*?nero$\" = \"otro genero\"\n  )\n  for(pattern in names(word_corrections)) {\n    x &lt;- gsub(pattern, word_corrections[pattern], x, perl = TRUE)\n  }\n  # Step 3: Handle question mark replacements systematically\n  qmark_replacements &lt;- list(\n    # Communes and regions (including specific cases from data)\n    c(\"cha\\\\?ral\", \"chanaral\"),\n    c(\"vi\\\\?a del mar\", \"vina del mar\"),\n    c(\"vi\\\\? del mar\", \"vina del mar\"),\n    c(\"vicu\\\\?\", \"vicuna\"),\n    c(\"san gregorio de \\\\?iquen\", \"san gregorio de niquen\"),\n    c(\"san gregorio de \\\\?quen\", \"san gregorio de niquen\"),\n    c(\"de \\\\?ble\", \"de nuble\"),\n    c(\"de \\\\?uble\", \"de nuble\"),\n    c(\"iba\\\\?es\", \"ibanez\"),\n    c(\"iba\\\\?s\", \"ibanez\"),\n    # Education\n    c(\"educaci\\\\?n\", \"educacion\"),\n    c(\"b\\\\?sica\", \"basica\"),\n    c(\"t\\\\?cnico\", \"tecnico\"),\n    c(\"t\\\\?cnica\", \"tecnica\"),\n    c(\"t\\\\?ico\", \"tecnico\"),\n    c(\"t\\\\?ica\", \"tecnica\"),\n    c(\"nunca estudi\\\\?\", \"nunca estudio\"),\n    c(\"a\\\\?os\", \"anos\"),\n    c(\"m\\\\?s\", \"mas\"),\n    c(\"\\\\(4 o m\\\\?s a\\\\?os\\\\)\", \"(4 o mas anos)\"),\n    c(\"\\\\(1-3 a\\\\?os\\\\)\", \"(1-3 anos)\"),\n    c(\"1-3 a\\\\?\", \"1-3 anos\"),\n    # Clinical terms\n    c(\"esquizot\\\\?pico\", \"esquizotipico\"),\n    c(\"esquizot\\\\?co\", \"esquizotipico\"),\n    c(\"h\\\\?bitos\", \"habitos\"),\n    c(\"h\\\\?tos\", \"habitos\"),\n    c(\"psicol\\\\?gico\", \"psicologico\"),\n    c(\"psicol\\\\?gicos\", \"psicologicos\"),\n    c(\"psicol\\\\?os\", \"psicologicos\"),\n    c(\"fisiol\\\\?gicas\", \"fisiologicas\"),\n    c(\"fisiol\\\\?as\", \"fisiologicas\"),\n    c(\"som\\\\?tico\", \"somatico\"),\n    c(\"som\\\\?ticos\", \"somaticos\"),\n    c(\"som\\\\?ca\", \"somatica\"),\n    c(\"psic\\\\?tico\", \"psicotico\"),\n    c(\"psic\\\\?ticos\", \"psicoticos\"),\n    c(\"psic\\\\?os\", \"psicoticos\"),\n    c(\"neur\\\\?tico\", \"neurotico\"),\n    c(\"neur\\\\?ticos\", \"neuroticos\"),\n    c(\"neur\\\\?os\", \"neuroticos\"),\n    c(\"org\\\\?nico\", \"organico\"),\n    c(\"org\\\\?nicos\", \"organicos\"),\n    c(\"org\\\\?co\", \"organico\"),\n    c(\"sintom\\\\?tico\", \"sintomatico\"),\n    c(\"sintom\\\\?ticos\", \"sintomaticos\"),\n    c(\"sintom\\\\?cos\", \"sintomaticos\"),\n    c(\"adaptaci\\\\?n\", \"adaptacion\"),\n    c(\"adaptaci\\\\?\", \"adaptacion\"),\n    c(\"especificaci\\\\?n\", \"especificacion\"),\n    c(\"especificaci\\\\?\", \"especificacion\"),\n    c(\"transformaci\\\\?n\", \"transformacion\"),\n    c(\"transformaci\\\\?ersistente\", \"transformacion persistente\"),\n    c(\"lesi\\\\?n\", \"lesion\"),\n    c(\"lesi\\\\?\", \"lesion\"),\n    c(\"disfunci\\\\?n\", \"disfuncion\"),\n    c(\"disfunci\\\\?erebral\", \"disfuncion cerebral\"),\n    c(\"espec\\\\?fico\", \"especifico\"),\n    c(\"espec\\\\?ficos\", \"especificos\"),\n    # Medical/physical\n    c(\"megalobl\\\\?ica\", \"megaloblastica\"),\n    c(\"ferrop\\\\?ca\", \"ferropenica\"),\n    c(\"cardiopat\\\\?as\", \"cardiopatias\"),\n    c(\"cardiopat\\\\?\", \"cardiopatia\"),\n    c(\"miocardiopat\\\\?\", \"miocardiopatia\"),\n    c(\"alcoh\\\\?lica\", \"alcoholica\"),\n    c(\"hepatitis cr\\\\?a\", \"hepatitis cronica\"),\n    c(\"hepatitis cr\\\\?nica\", \"hepatitis cronica\"),\n    c(\"patolog\\\\?a\", \"patologia\"),\n    c(\"patolog\\\\?\", \"patologia\"),\n    c(\"gesti\\\\?n\", \"gestion\"),\n    c(\"ni\\\\?o\", \"nino\"),\n    c(\"ni\\\\?\", \"nino\"),\n    # Evaluation\n    c(\"logro m\\\\?nimo\", \"logro minimo\"),\n    c(\"logro m\\\\?mo\", \"logro minimo\"),\n    # Substances\n    c(\"coca\\\\?na\", \"cocaina\"),\n    c(\"coca\\\\?\", \"cocaina\"),\n    c(\"analg\\\\?sicos\", \"analgesicos\"),\n    c(\"analg\\\\?cos\", \"analgesicos\"),\n    c(\"hipn\\\\?ticos\", \"hipnoticos\"),\n    c(\"hipn\\\\?os\", \"hipnoticos\"),\n    c(\"alucin\\\\?genos\", \"alucinogenos\"),\n    c(\"alucin\\\\?os\", \"alucinogenos\"),\n    # Time/frequency\n    c(\"d\\\\?as\", \"dias\"),\n    c(\"d\\\\?a\", \"dia\"),\n    c(\"\\\\?ltimo\", \"ultimo\"),\n    c(\"\\\\?ltimos\", \"ultimos\"),\n    c(\"no consumi\\\\?\", \"no consumio\"),\n    # Other terms\n    c(\"explotaci\\\\?n\", \"explotacion\"),\n    c(\"explotaci\\\\?exual\", \"explotacion sexual\"),\n    c(\"discriminaci\\\\?n\", \"discriminacion\"),\n    c(\"discriminaci\\\\?\", \"discriminacion\"),\n    c(\"violaci\\\\?n\", \"violacion\"),\n    c(\"violaci\\\\?\", \"violacion\"),\n    c(\"derivaci\\\\?n\", \"derivacion\"),\n    c(\"derivaci\\\\?\", \"derivacion\"),\n    c(\"orientaci\\\\?exuales\", \"orientacion sexuales\"),\n    c(\"estr\\\\?grave\", \"estres grave\"),\n    c(\"estr\\\\?\", \"estres\"),\n    c(\"s\\\\?rome amn\\\\?co\", \"sindrome amnesico\"),\n    c(\"per\\\\?\", \"peru\"),\n    c(\"rep\\\\?ca dominicana\", \"republica dominicana\"),\n    c(\"c\\\\?nyuge\", \"conyuge\"),\n    c(\"cu\\\\?ado\", \"cunado\"),\n    c(\"hospeder\\\\?\", \"hospederia\"),\n    c(\"pensi\\\\?\", \"pension\"),\n    c(\"aspiraci\\\\?n\", \"aspiracion\"),\n    c(\"aspiraci\\\\?\", \"aspiracion\"),\n    c(\"ocupaci\\\\?n\", \"ocupacion\"),\n    c(\"ocupaci\\\\?\", \"ocupacion\"),\n    c(\"condici\\\\?n\", \"condicion\"),\n    c(\"condici\\\\?\", \"condicion\"),\n    c(\"corrupci\\\\?\", \"corrupcion\"),\n    c(\"producci\\\\?n\", \"produccion\"),\n    c(\"producci\\\\?\", \"produccion\"),\n    c(\"pornogr\\\\?fico\", \"pornografico\"),\n    c(\"pornogr\\\\?co\", \"pornografico\"),\n    c(\"receptaci\\\\?\", \"receptacion\"),\n    c(\"intimidaci\\\\?\", \"intimidacion\"),\n    c(\"sue\\\\?\", \"sueno\"),\n    c(\"raz\\\\?\", \"razon\"),\n    # Additional patterns from data\n    c(\"tr\\\\?fico\", \"trafico\"),\n    c(\"grav\\\\?simas\", \"gravisimas\"),\n    c(\"lesiones graves y grav\\\\?simas\", \"lesiones graves y gravisimas\"),\n    c(\"pensi\\\\?n\", \"pension\"),\n    c(\"residencial, pensi\\\\?n, hostal\", \"residencial, pension, hostal\"),\n    c(\"ocupaci\\\\?n irregular\", \"ocupacion irregular\"),\n    c(\"carlos iba\\\\?es del campo\", \"carlos ibanez del campo\"),\n    c(\"logro m\\\\?nimo\", \"logro minimo\"),\n    c(\"explotaci\\\\?n comercial sexual\", \"explotacion comercial sexual\")\n  )\n  # Apply question mark replacements\n  for(repl in qmark_replacements) {\n    x &lt;- gsub(repl[1], repl[2], x, perl = TRUE)\n  }\n  # Step 4: Fix common typos and specific issues\n  typo_fixes &lt;- c(\n    \"orgocos\" = \"organicos\",\n    \"orgnaicos\" = \"organicos\",\n    \"fafasico\" = \"fisico\",\n    \"terapoutica\" = \"terapeutica\",\n    \"terapoica\" = \"terapeutica\",\n    \"derivacian\" = \"derivacion\",\n    \"miocardiopatoa\" = \"miocardiopatia\",\n    \"gestian\" = \"gestion\",\n    \"\\\\bnioo\\\\b\" = \"nino\",\n    \"\\\\bnin\\\\b\" = \"nino\",\n    \"suenoo\" = \"sueno\",\n    \"neuroos\" = \"neurologicos\",\n    \"psicoloo\" = \"psicologico\",\n    \"aoos\" = \"anos\",\n    \"nioez\" = \"ninez\",\n    \"toica\" = \"tecnica\",\n    \"nocontesta\" = \"no contesta\",\n    \"razan\" = \"razon\",\n    \"fisioloas\" = \"fisiologicas\",\n    \"somocos\" = \"somaticos\",\n    \"moca\" = \"morfologica\",\n    \"admnistrativa\" = \"administrativa\",\n    \"hospederiaa\" = \"hospederia\",\n    \"pensian\" = \"pension\",\n    \"cuoado/a\" = \"cunado/a\",\n    \"tocnicos\" = \"tecnicos\",\n    \"cientoficos\" = \"cientificos\",\n    \"cientocos\" = \"cientificos\",\n    # Fix double letter issues from data\n    \"intimidacionn\" = \"intimidacion\",\n    \"receptacionn\" = \"receptacion\",\n    \"otra razonn\" = \"otra razon\",\n    \"cocainana\" = \"cocaina\",\n    \"terapeuticaa\" = \"terapeutica\",\n    \"alta admnistrativaa\" = \"alta administrativa\",\n    # Fix region/place names\n    \"valparaiso\" = \"valparaiso\",  # Already handled by accent removal\n    \"ibanez\" = \"ibanez\",\n    \"aysen\" = \"aysen\",\n    # Fix double n at end of words (more general)\n    \"\\\\bintimidacionn\\\\b\" = \"intimidacion\",\n    \"\\\\breceptacionn\\\\b\" = \"receptacion\",\n    \"\\\\brazonn\\\\b\" = \"razon\",\n    \"\\\\bcondicionn\\\\b\" = \"condicion\"\n  )\n  x &lt;- str_replace_all(x, typo_fixes)\n  # Step 5: Handle special cases that break R strings\n  # Use regex to match patterns like afa'uble or rehabilitaciafa\"n\n  x &lt;- gsub(\"afa['\\\"]uble\", \"nuble\", x, perl = TRUE)\n  x &lt;- gsub(\"rehabilitaciafa['\\\"]n\", \"rehabilitacion\", x, perl = TRUE)\n  # Step 5b: Fix trailing double letters (nn, aa, etc.)\n  # This handles cases like \"intimidacionn\" -&gt; \"intimidacion\"\n  x &lt;- gsub(\"([aeiou])nn\\\\b\", \"\\\\1n\", x, perl = TRUE)\n  x &lt;- gsub(\"([aeiou])aa\\\\b\", \"\\\\1a\", x, perl = TRUE)\n  x &lt;- gsub(\"([aeiou])ss\\\\b\", \"\\\\1s\", x, perl = TRUE)\n  # Step 6: Generic heuristics for remaining question marks\n  # '?n' or '?t' often from 'án' or 'át' -&gt; 'an' or 'at'\n  x &lt;- gsub(\"\\\\?(?=n|t)\", \"a\", x, perl = TRUE)\n  # 'l?g' -&gt; 'log' (fisiol?gicas -&gt; fisiologicas)\n  x &lt;- gsub(\"l\\\\?g\", \"log\", x, perl = TRUE)\n  # Between letters, default to 'o'\n  x &lt;- gsub(\"(?&lt;=[a-z])\\\\?(?=[a-z])\", \"o\", x, perl = TRUE)\n  # Step 7: Remove any remaining accented characters (convert to ASCII)\n  accent_map &lt;- c(\n    \"á\"=\"a\", \"à\"=\"a\", \"ä\"=\"a\", \"â\"=\"a\", \"ã\"=\"a\", \"å\"=\"a\",\n    \"é\"=\"e\", \"è\"=\"e\", \"ë\"=\"e\", \"ê\"=\"e\",\n    \"í\"=\"i\", \"ì\"=\"i\", \"ï\"=\"i\", \"î\"=\"i\",\n    \"ó\"=\"o\", \"ò\"=\"o\", \"ö\"=\"o\", \"ô\"=\"o\", \"õ\"=\"o\",\n    \"ú\"=\"u\", \"ù\"=\"u\", \"ü\"=\"u\", \"û\"=\"u\",\n    \"ñ\"=\"n\", \"ç\"=\"c\",\n    \"Á\"=\"A\", \"À\"=\"A\", \"Ä\"=\"A\", \"Â\"=\"A\", \"Ã\"=\"A\", \"Å\"=\"A\",\n    \"É\"=\"E\", \"È\"=\"E\", \"Ë\"=\"E\", \"Ê\"=\"E\",\n    \"Í\"=\"I\", \"Ì\"=\"I\", \"Ï\"=\"I\", \"Î\"=\"I\",\n    \"Ó\"=\"O\", \"Ò\"=\"O\", \"Ö\"=\"O\", \"Ô\"=\"O\", \"Õ\"=\"O\",\n    \"Ú\"=\"U\", \"Ù\"=\"U\", \"Ü\"=\"U\", \"Û\"=\"U\",\n    \"Ñ\"=\"N\", \"Ç\"=\"C\"\n  )\n  x &lt;- str_replace_all(x, accent_map)\n  # Step 8: Clean up double letters at word boundaries\n  x &lt;- gsub(\"nn\\\\b\", \"n\", x, perl = TRUE)\n  x &lt;- gsub(\"aa\\\\b\", \"a\", x, perl = TRUE)\n  x &lt;- gsub(\"ss\\\\b\", \"s\", x, perl = TRUE)\n  # Step 9: Final cleanup - remove any remaining non-ASCII\n  # Use both iconv and additional cleanup for safety\n  x &lt;- iconv(x, from = \"UTF-8\", to = \"ASCII//TRANSLIT\", sub = \"\")\n  x &lt;- gsub(\"[^[:ascii:]]\", \"\", x, perl = TRUE)  # Remove any remaining non-ASCII\n  # Step 10: Normalize whitespace\n  x &lt;- str_squish(x)\n  x &lt;- str_replace_all(x, \"\\\\s*\\\\.\\\\s*$\", \"\")  # Remove trailing periods\n  x &lt;- str_replace_all(x, c(\"bolivina\"= \"boliviana\", \"robo con vina\"= \"robo con violencia\", \"5 o mas anos\\\\?\"=\"5 o mas anos\"))\n  return(x)\n}\n\n# Apply the comprehensive fix to your dataframe\nCONS_C6_25_df &lt;- CONS_C6_25_df %&gt;%\n  mutate(across(where(~ is.character(.x) | is.factor(.x)),\n                ~ fix_encoding_complete(.x)))\n\n##:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninvisible(\"Obtain unique values by column, again\")\nunique_values_list_c63 &lt;- setNames(\n   lapply(names(CONS_C6_25_df), function(col_name) {\n     # obtain unique values\n     unique_values &lt;- unique(CONS_C6_25_df[[col_name]])\n     return(unique_values)\n   }),\n   names(CONS_C6_25_df)  # assign column names to the list\n )\n\nif(list_to_df(unique_values_list_c63) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value)) |&gt; arrange(variable, value) |&gt; nrow()&gt;0){\nwarning(paste0( \"Values with sign '?'= \",\nlist_to_df(unique_values_list_c63)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[\\\\?]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\nif(list_to_df(unique_values_list_c63)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow()&gt;0){\nwarning(paste0( \"Values with signs '´ “ '= \",\nlist_to_df(unique_values_list_c63)|&gt; filter(variable!=\"codigo_identificacion\", variable!=\"comentario\", grepl(\"[^\\x20-\\x7E]\",value))|&gt; arrange(variable, value)|&gt; nrow())\n  )\n}\n#list_to_df(unique_values_list_c63) |&gt; filter(variable!=\"codigo_identificacion\", variable!=\"HASH_KEY\", !grepl(\"fecha|edad|dias|numero|id|codigo|n_meses|tiempo\",variable)) |&gt; View()\n\n\n\nTo close the project, we erase polars objects.\n\n\nCode\nrm(list = ls()[grepl(\"_pl$\", ls())])\nrm(list = ls()[grepl(\"_pl_\", ls())])"
  },
  {
    "objectID": "import_c2_c6_data_adm_25.html#cargando-paquete-requerido-plyr",
    "href": "import_c2_c6_data_adm_25.html#cargando-paquete-requerido-plyr",
    "title": "SENDAs Agreement 1 Update 2010-2022",
    "section": "Cargando paquete requerido: plyr",
    "text": "Cargando paquete requerido: plyr\nYou have loaded plyr after dplyr - this is likely to cause problems. If you need functions from both plyr and dplyr, please load plyr first, then dplyr: library(plyr); library(dplyr) ——————————————————————————\nAdjuntando el paquete: ‘plyr’\nThe following objects are masked from ‘package:dplyr’:\narrange, count, desc, failwith, id, mutate, rename, summarise,\nsummarize\nThe following object is masked from ‘package:purrr’:\ncompact"
  },
  {
    "objectID": "Duplicates_25_3b.html#loading-packages-and-uniting-databases",
    "href": "Duplicates_25_3b.html#loading-packages-and-uniting-databases",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "Loading Packages and uniting databases",
    "text": "Loading Packages and uniting databases\nProceed to load the necessary packages.\n\n\n\nCode\n# invisible(\"Only run from Ubuntu\")\n# if (!(Sys.getenv(\"RSTUDIO_SESSION_TYPE\") == \"server\" || file.exists(\"/.dockerenv\"))) {\n#   if(Sys.info()[\"sysname\"]!=\"Windows\"){\n#     Sys.setenv(RETICULATE_PYTHON = \"/home/fondecytacc/.pyenv/versions/3.11.5/bin/python\")\n#   }\n# }\n\n#clean enviroment\nrm(list = ls()); gc()\n\ntime_before_dedup2&lt;-Sys.time()\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# --- Bootstrap reticulate con ruta relativa a getwd() ---\nsuppressPackageStartupMessages(library(reticulate))\n\n# Busca .mamba_root/envs/py311/python.exe desde getwd() hacia padres\nfind_python_rel &lt;- function(start = getwd(),\n                            rel = file.path(\".mamba_root\",\"envs\",\"py311\",\"python.exe\")) {\n  cur &lt;- normalizePath(start, winslash = \"/\", mustWork = FALSE)\n  repeat {\n    cand &lt;- normalizePath(file.path(cur, rel), winslash = \"/\", mustWork = FALSE)\n    if (file.exists(cand)) return(cand)\n    parent &lt;- dirname(cur)\n    if (identical(parent, cur)) return(NA_character_)  # llegó a la raíz\n    cur &lt;- parent\n  }\n}\n\npy &lt;- find_python_rel()\n\nif (is.na(py)) {\n  stop(\"No se encontró Python relativo a getwd() (buscando '.mamba_root/envs/py311/python.exe').\\n\",\n       \"Directorio actual: \", getwd())\n}\n\n# Forzar ese intérprete\nSys.unsetenv(c(\"RETICULATE_CONDAENV\",\"RETICULATE_PYTHON_FALLBACK\"))\nSys.setenv(RETICULATE_PYTHON = py)\nreticulate::use_python(py, required=T)\n\npy_config()  # verificación\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# tidy, robust, and commented\nload_ndp &lt;- function(date_tag,\n                     base_name,\n                     input_subdir,\n                     out_subdir,\n                     load_into    = .GlobalEnv) {\n\n  # Are we in RStudio Server or Docker?\n  is_server &lt;- Sys.getenv(\"RSTUDIO_SESSION_TYPE\") == \"server\" || file.exists(\"/.dockerenv\")\n\n  # Project root = current WD without a trailing \"/cons\"\n  # Safer than gsub everywhere\n  wd &lt;- getwd()\n  project_root &lt;- sub(\"(/)?cons/?$\", \"\", wd)\n\n  # Build dirs\n  out_dir  &lt;- file.path(project_root, out_subdir)\n  in_dir   &lt;- if (is_server) file.path(getwd(), input_subdir) else out_dir\n\n  # Filenames (choose one canonical extension spelling)\n  rdata_file   &lt;- sprintf(\"%s_%s.Rdata\", base_name, date_tag)\n  seven_z_part &lt;- sprintf(\"%s_%s.Rdata.7z.001\", base_name, date_tag)\n  enc_file     &lt;- sprintf(\"%s_%s.Rdata.enc\",  base_name, date_tag)  # only if you actually encrypt to .enc\n\n  # Optional: Windows drive-based Google Drive/E: fallback (only on Windows)\n  envpath &lt;- NULL\n  if (.Platform$OS.type == \"windows\") {\n    drv &lt;- toupper(substr(normalizePath(project_root, winslash = \"\\\\\", mustWork = FALSE), 1, 1))\n    envpath &lt;- if (identical(drv, \"G\")) {\n      \"G:/Mi unidad/Alvacast/SISTRAT 2023/\"\n    } else {\n      \"E:/Mi unidad/Alvacast/SISTRAT 2023/\"\n    }\n  }\n  # message(\"envpath: \", envpath %||% \"&lt;none&gt;\")\n\n  # Ensure dirs exist (won't error if already present)\n  dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)\n\n  # Helper: load Rdata into the specified environment\n  load_rdata &lt;- function(path) {\n    stopifnot(file.exists(path))\n    loaded &lt;- load(path, envir = load_into)\n    message(\"Loaded objects: \", paste(loaded, collapse = \", \"))\n    invisible(loaded)\n  }\n\n  if (!is_server) {\n    # Desktop workflow: expect plain .Rdata in out_dir\n    local_rdata &lt;- file.path(out_dir, rdata_file)\n    if (!file.exists(local_rdata)) {\n      stop(\"Rdata file not found: \", local_rdata)\n    }\n    return(load_rdata(local_rdata))\n\n  } else {\n    # Server/Docker workflow: expect compressed/encrypted parts in _input\n    seven_z_path &lt;- file.path(in_dir, seven_z_part)\n    enc_path     &lt;- file.path(in_dir, enc_file)\n    out_rdata    &lt;- file.path(out_dir, rdata_file)\n\n    if (file.exists(seven_z_path)) {\n      # Extract 7z multi-part to out_dir using password\n      pass &lt;- Sys.getenv(\"PASS_PPIO\", unset = NA_character_)\n      if (is.na(pass) || pass == \"\") stop(\"Missing PASS_PPIO env var for 7z decryption.\")\n      # 7z command: x (extract), -p&lt;pass&gt;, -o&lt;outdir&gt;\n      args &lt;- c(\"x\", shQuote(seven_z_path), sprintf(\"-p%s\", pass), paste0(\"-o\", shQuote(out_dir)))\n      status &lt;- system2(\"7z\", args = args, stdout = TRUE, stderr = TRUE)\n      # Optional: check extraction result\n      if (!file.exists(out_rdata)) {\n        stop(\"Extraction finished but target not found: \", out_rdata, \"\\n7z output:\\n\", paste(status, collapse = \"\\n\"))\n      }\n      return(load_rdata(out_rdata))\n\n    } else if (file.exists(enc_path)) {\n      # If you truly have a raw .enc, you need a decryption step here (not loadable as-is).\n      stop(\"Found encrypted file but no extractor defined for .enc: \", enc_path)\n\n    } else if (file.exists(out_rdata)) {\n      # Already extracted earlier\n      return(load_rdata(out_rdata))\n\n    } else {\n      stop(\"No input found in: \", in_dir,\n           \"\\nTried: \", seven_z_path, \" and \", enc_path,\n           \"\\nAlso looked for already-extracted: \", out_rdata)\n    }\n  }\n}\n\nload_ndp(date_tag = \"2025_09_16\", \n                     base_name = \"24_ndp\",\n                     input_subdir = \"_input\",\n                     out_subdir   = file.path(\"data\", \"20241015_out\"),\n                     load_into    = .GlobalEnv)\n\n\n          used (Mb) gc trigger (Mb) max used (Mb)\nNcells  600025 32.1    1315610 70.3   831348 44.4\nVcells 1105844  8.5    8388608 64.0  1876154 14.4\npython:         G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python.exe\nlibpython:      G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python311.dll\npythonhome:     G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311\nversion:        3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:           [NOT FOUND]\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\n\n\n\n\nCode\n#https://github.com/rstudio/renv/issues/544\n#renv falls back to copying rather than symlinking, which is evidently very slow in this configuration.\nrenv::settings$use.cache(FALSE)\n\n#only use explicit dependencies (in DESCRIPTION)\nrenv::settings$snapshot.type(\"implicit\")\n\n#check if rstools is installed\ntry(installr::install.Rtools(check_r_update=F))\n\n\nInstalling package into ‘G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32’ (as ‘lib’ is unspecified)\n\n\nCode\ncheck_quarto_version &lt;- function(required = \"1.7.29\", comparator = c(\"ge\",\"gt\",\"le\",\"lt\",\"eq\")) {\n  comparator &lt;- match.arg(comparator)\n  current &lt;- package_version(paste(unlist(quarto::quarto_version()), collapse = \".\"))\n  req     &lt;- package_version(required)\n\n  ok &lt;- switch(comparator,\n               ge = current &gt;= req,\n               gt = current &gt;  req,\n               le = current &lt;= req,\n               lt = current &lt;  req,\n               eq = current == req)\n\n  if (!ok) {\n    stop(sprintf(\"Quarto version check failed: need %s %s (installed: %s).\",\n                 comparator, required, current), call. = FALSE)\n  }\n  invisible(TRUE)\n}\n\ncheck_quarto_version(\"1.7.29\", \"ge\") \n\n#change repository to CL\nlocal({\n  r &lt;- getOption(\"repos\")\n  r[\"CRAN\"] &lt;- \"https://cran.dcc.uchile.cl/\"\n  options(repos=r)\n})\n\nif(!require(pacman)){install.packages(\"pacman\");require(pacman)}\n\n\nCargando paquete requerido: pacman\n\n\nCode\nif(!require(pak)){install.packages(\"pak\");require(pak)}\n\n\nCargando paquete requerido: pak\n\n\nCode\npacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes\n\n\nNo 00LOCK detected in: G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32 No 00LOCK detected in: C:/Program Files/R/R-4.4.1/library\n\n\nCode\nif(Sys.info()[\"sysname\"]==\"Windows\"){\nif (getRversion() != \"4.4.1\") { stop(\"Requires R version 4.4.1; Actual: \", getRversion()) }\n}\n\n#check docker\ncheck_docker_running &lt;- function() {\n  # Try running 'docker info' to check if Docker is running\n  system(\"docker info\", intern = TRUE, ignore.stderr = TRUE)\n}\n\ninstall_docker &lt;- function() {\n  # Open the Docker Desktop download page in the browser for installation\n  browseURL(\"https://www.docker.com/products/docker-desktop\")\n}\n\n# Main logic\nif (inherits(try(check_docker_running(), silent = TRUE), \"try-error\")) {\n  liftr::install_docker()\n} else {\n  message(\"Docker is running.\")\n}\n\n\nWarning in system(“docker info”, intern = TRUE, ignore.stderr = TRUE): el comando ejecutado ‘docker info’ tiene el estatus 1\n\n\nDocker is running.\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#PACKAGES#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nunlink(\"*_cache\", recursive=T)\n\n# ----------------------------------------------------------------------\n# 2. Use a single pak::pkg_install() call for most CRAN packages\n# ----------------------------------------------------------------------\n\npaks &lt;-\n  c(#\"git\", \n    # To connect to github\n    \"gh\", #interface for  GitHub API from R\n    #\n    \"gitcreds\", # manages Git credentials (usernames, passwords, tokens)\n    #\n    \"usethis\", # simplifies common project setup tasks for R developers\n    # Package to bring packages in development\n    \"devtools\",\n    # Package administration\n    \"renv\",\n    # To manipulate data\n    \"knitr\", \"pander\", \"DT\",\n    # Join\n    \"fuzzyjoin\", \"RecordLinkage\",\n    # For tables\n    \"tidyverse\", \"janitor\",\n    # For contingency tables\n    \"kableExtra\",\n    # For connections with python\n    \"reticulate\",\n    # To manipulate big data\n    \"polars\", \"sqldf\",\n    # To bring big databases\n    \"nanoparquet\",\n    # Interface for R and RStudio in R\n    \"installr\", \"rmarkdown\", \"quarto\", \"yaml\", #\"rstudioapi\",\n    # Time handling\n    \"clock\",\n    # Combine plots\n    \"ggpubr\",\n    # Parallelized iterative processing\n    \"furrr\",\n    # Work like a tibble with a data.table database\n    \"tidytable\",\n    # Split database into training and testing\n    \"caret\",\n    # Impute missing data\n    \"missRanger\", \"mice\",\n    # To modularize tasks\n    \"job\",\n    # For PhantomJS install checks\n    \"webshot\"\n  )\n\n# dplyr\n# janitor\n# reshape2\n# tidytable\n# arrow\n# boot\n# broom\n# car\n# caret\n# data.table\n# DiagrammeR\n# DiagrammeRsvg\n# dplyr\n# epiR\n# epitools\n# ggplot2\n# glue\n# htmlwidgets\n# knitr\n# lubridate\n# naniar\n# parallel\n# polycor\n# pROC\n# psych\n# readr\n# rio\n# rsvg\n# scales\n# stringr\n# tableone\n# rmarkdown\n# biostat3\n# codebook\n# finalfit\n# Hmisc\n# kableExtra\n# knitr\n# devtools\n# tidyr\n# stringi\n# stringr\n# muhaz\n# sqldf\n# compareGroups\n# survminer\n# lubridate\n# ggfortify\n# car\n# fuzzyjoin\n# compareGroups\n# caret\n# job\n# htmltools\n# nanoparquet\n# ggpubr\n# polars\n# installr\n# clock\n# pander\n# reshape\n# mice\n# missRanger\n# VIM\n# withr\n# biostat3\n# broom\n# glue\n# finalfit\n# purrr\n# sf\n\n\n# pak::pkg_install(paks)\n\npak::pak_sitrep()\n# pak::sysreqs_check_installed(unique(unlist(paks)))\n#pak::lockfile_create(unique(unlist(paks)),  \"dependencies_duplicates24.lock\", dependencies=T)\n#pak::lockfile_install(\"dependencies_duplicates24.lock\")\n#https://rdrr.io/cran/pak/man/faq.html\n#pak::cache_delete()\n\nlibrary(tidytable)\n\n\nAdjuntando el paquete: ‘tidytable’\n\n\nThe following objects are masked from ‘package:stats’:\ndt, filter, lag\n\n\nThe following object is masked from ‘package:base’:\n%in%\n\n\nCode\nlibrary(polars)\n\n\nWarning: package ‘polars’ was built under R version 4.4.3\n\n\nCode\nlibrary(ggplot2)\nlibrary(readr)\n\n\nAdjuntando el paquete: ‘readr’\n\n\nThe following object is masked by ‘.GlobalEnv’:\nparse_date\n\n\nCode\n# ----------------------------------------------------------------------\n# 3. Activate polars code completion (safe to try even if it fails)\n# ----------------------------------------------------------------------\ntry(polars_code_completion_activate())\n\n\nUsing code completion in ‘native’ mode.\n\n\nCode\n# ----------------------------------------------------------------------\n# 4. BPMN from GitHub (not on CRAN, so install via devtools if missing)\n# ----------------------------------------------------------------------\nif (!requireNamespace(\"bpmn\", quietly = TRUE)) {\n  devtools::install_github(\"bergant/bpmn\")\n}\n\n# ----------------------------------------------------------------------\n# 5. PhantomJS Check (use webshot if PhantomJS is missing)\n# ----------------------------------------------------------------------\n# if (!webshot::is_phantomjs_installed()) {\n#   webshot::install_phantomjs()\n# }\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#FUNCTIONS######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n#WINDOWS do not restrict memory size\nif(.Platform$OS.type == \"windows\") withAutoprint({\n  memory.size()\n  memory.size(TRUE)\n  memory.limit()\n})\n\n\nWarning: ‘memory.size()’ is no longer supported\n\n\nWarning: ‘memory.size()’ is no longer supported\n\n\nWarning: ‘memory.limit()’ is no longer supported\n\n\nCode\nmemory.limit(size=56000)\n\n\nWarning: ‘memory.limit()’ is no longer supported\n\n\nCode\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n# NO MORE DEBUGS\noptions(error = NULL)        # si antes tenías options(error = recover) o browser)\noptions(browserNLdisabled = FALSE)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n#NAs are replaced with \"\" in knitr kable\noptions(knitr.kable.NA = '')\n\npander::panderOptions('big.mark', ',')\npander::panderOptions('decimal.mark', '.')\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n\n#to format rows in bold\nformat_cells &lt;- function(df, rows ,cols, value = c(\"italics\", \"bold\", \"strikethrough\")){\n\n  # select the correct markup\n  # one * for italics, two ** for bold\n  map &lt;- setNames(c(\"*\", \"**\", \"~~\"), c(\"italics\", \"bold\", \"strikethrough\"))\n  markup &lt;- map[value]  \n\n  for (r in rows){\n    for(c in cols){\n\n      # Make sure values are not factors\n      df[[c]] &lt;- as.character( df[[c]])\n\n      # Update formatting\n      df[r, c] &lt;- ifelse(nchar(df[r, c])==0,\"\",paste0(markup, gsub(\" \", \"\", df[r, c]), markup))\n    }\n  }\n\n  return(df)\n}\n#To produce line breaks in messages and warnings\nknitr::knit_hooks$set(\n   error = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-danger\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Error', '**Error**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   warning = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-warning\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Warning:', '**Warning**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   message = function(x, options) {\n     paste('&lt;div class=\"message\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', x),\n           '&lt;/div&gt;', sep = '\\n')\n   }\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n\nsum_dates &lt;- function(x){\n  cbind.data.frame(\n    min= as.Date(min(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\"),\n    p001= as.Date(quantile(unclass(as.Date(x)), .001, na.rm=T), origin = \"1970-01-01\"),\n    p005= as.Date(quantile(unclass(as.Date(x)), .005, na.rm=T), origin = \"1970-01-01\"),\n    p025= as.Date(quantile(unclass(as.Date(x)), .025, na.rm=T), origin = \"1970-01-01\"),\n    p25= as.Date(quantile(unclass(as.Date(x)), .25, na.rm=T), origin = \"1970-01-01\"),\n    p50= as.Date(quantile(unclass(as.Date(x)), .5, na.rm=T), origin = \"1970-01-01\"),\n    p75= as.Date(quantile(unclass(as.Date(x)), .75, na.rm=T), origin = \"1970-01-01\"),\n    p975= as.Date(quantile(unclass(as.Date(x)), .975, na.rm=T), origin = \"1970-01-01\"),\n    p995= as.Date(quantile(unclass(as.Date(x)), .995, na.rm=T), origin = \"1970-01-01\"),\n    p999= as.Date(quantile(unclass(as.Date(x)), .999, na.rm=T), origin = \"1970-01-01\"),\n    max= as.Date(max(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\")\n  )\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n# Define the function adapted for Polars\nsum_dates_polars &lt;- function(df, date_col) {\n  # Create the list of quantiles\n  quantiles &lt;- c(0.001, 0.005, 0.025, 0.25, 0.5, 0.75, 0.975, 0.995, 0.999)\n  # Create expressions to calculate min and max\n  expr_list &lt;- list(\n    pl$col(date_col)$min()$alias(\"min\"),\n    pl$col(date_col)$max()$alias(\"max\")\n  )\n  # Add expressions for quantiles\n  for (q in quantiles) {\n    expr_list &lt;- append(expr_list, pl$col(date_col)$quantile(q)$alias(paste0(\"p\", sub(\"\\\\.\", \"\", as.character(q)))))\n  }\n  # Apply the expressions and return a DataFrame with the results\n  df$select(expr_list)\n}\n\n# Custom function for sampling with a seed\nsample_n_with_seed &lt;- function(data, size, seed) {\n  set.seed(seed)\n  dplyr::sample_n(data, size)\n}\n\n# Function to get the most frequent value \nmost_frequent &lt;- function(x) { \n  uniq_vals &lt;- unique(x)\n  freq_vals &lt;- sapply(uniq_vals, function(val) sum(x == val))\n  most_freq &lt;- uniq_vals[which(freq_vals == max(freq_vals))]\n  \n  if (length(most_freq) == 1) {\n    return(most_freq)\n  } else {\n    return(NA)\n  }\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#CONFIG #######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\noptions(scipen=2) #display numbers rather scientific number\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# Define the function first\n#oins these values with semicolons and optionally truncates the result if it exceeds a specified width.\ntoString2 &lt;- function(x, width = NULL, ...) {\n    string &lt;- paste(x, collapse = \"; \")\n    if (missing(width) || is.null(width) || width == 0) \n        return(string)\n    if (width &lt; 0) \n        stop(\"'width' must be positive\")\n    if (nchar(string, type = \"w\") &gt; width) {\n        width &lt;- max(6, width)\n        string &lt;- paste0(substr(string, 1, width - 3), \"...\")\n    }\n    string\n}\nnormalize_txt &lt;- function(x) {\n  x |&gt;\n    stringi::stri_trans_general(\"Latin-ASCII\") |&gt;\n    tolower() |&gt;\n    trimws()\n}\n\ndsmiv_broad &lt;- function(x) {\n  x &lt;- normalize_txt(x)\n  tidytable::case_when(\n    stringr::str_detect(x, \"sustancia|alcohol|marihuana|cannab|cocain|opio|opiace|benzodiazep\") ~ \"Substance-related\",\n    stringr::str_detect(x, \"esquizofren|psicosis|psicot\") ~ \"Psychotic\",\n    stringr::str_detect(x, \"estado de animo|afectiv|depres|bipolar|maniaco|distimi|hipoman\") ~ \"Mood\",\n    stringr::str_detect(x, \"ansiedad|fobi|panico|obsesivo|compulsiv|estres|adaptaci\") ~ \"Anxiety/Stress/Adjustment\",\n    stringr::str_detect(x, \"somatoform|somatiz|disociativ|conversion\") ~ \"Somatoform/Dissociative\",\n    stringr::str_detect(x, \"alimentari|anorex|bulim|sueno|insomni|sexual\") ~ \"Eating/Sleep/Sexual\",\n    stringr::str_detect(x, \"personalidad|antisocial|limite|borderline|paranoide|evitativ|dependient|narcis\") ~ \"Personality\",\n    stringr::str_detect(x, \"retraso mental|discapacidad intelectual|intelectual\") ~ \"Intellectual disability\",\n    stringr::str_detect(x, \"desarrollo|autism|asperger|infancia|tdah|t\\\\s*d\\\\s*a\\\\s*h|lenguaje|aprendizaje\") ~ \"Neurodevelopment/Childhood-onset\",\n    TRUE ~ \"Other/unspecified\"\n  )\n}\n\npair_str &lt;- function(main, sub) {\n    main &lt;- as.character(main)\n    sub  &lt;- as.character(sub)\n    both_na &lt;- is.na(main) & is.na(sub)\n    out &lt;- paste0(tidytable::coalesce(main, \"NA\"), \"::\", tidytable::coalesce(sub, \"NA\"))\n    out[both_na] &lt;- NA_character_\n    out\n}\n\n\nError in contrib.url(repos, \"source\") : \n  trying to use CRAN without setting a mirror\n* pak version:\n- 0.8.0.1\n* Version information:\n- pak platform: x86_64-w64-mingw32 (current: x86_64-w64-mingw32, compatible)\n- pak repository: - (local install?)\n* Optional packages installed:\n- pillar\n* Library path:\n- G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32\n- C:/Program Files/R/R-4.4.1/library\n* pak is installed at G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32/pak.\n* Dependency versions:\n- callr      3.7.6      \n- cli        3.6.2      \n- curl       5.2.1      \n- desc       1.4.3      \n- filelock   1.0.3      \n- jsonlite   1.8.8      \n- lpSolve    5.6.23.9000\n- pkgbuild   1.4.4      \n- pkgcache   2.2.2.9000 \n- pkgdepends 0.7.2.9000 \n- pkgsearch  3.1.3.9000 \n- processx   3.8.4      \n- ps         1.7.6      \n- R6         2.5.1      \n- zip        2.3.1      \n* Dependencies can be loaded\n&gt; memory.size()\n[1] Inf\n&gt; memory.size(TRUE)\n[1] Inf\n&gt; memory.limit()\n[1] Inf\n[1] Inf\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe previous document revealed overlapping cases and nearly identical records, as well as patients with unfinished treatments (i.e., missing discharge dates in the 2018-2019 databases) who might have received subsequent overlapping treatments.\nTo assess the main goals of the study, we first focused on distinguishing each patient across the yearly datasets obtained from SENDA, as well as their time-invariant characteristics (1). Next, we separated each patient’s treatment episodes and varying characteristics (2). Finally, we normalized, standardized, and cleaned each treatment (3). Although these stages may appear conceptually separate and sequential, they are interdependent (e.g., some variables needed to be standardized to identify duplicate entries).\nThroughout this document, we use the terms “rows”, “cases”, “observations” or “treatment episodes” interchangeably to refer to entries in the dataset.\n\n\n\n\nCode\n#We take the row numbers that are paired more than one time\noverlaps_after_miss_appear_more_than_one_time&lt;-\nCONS_C1_df_dup_overlaps_COMP |&gt;\n    tidytable::pivot_longer(\n        cols = matches(\"_[12]$\"),  # All columns ending with _1 or _2\n        names_to = c(\".value\", \"wave\"),\n        names_pattern = \"(.+)_([12])\",\n        values_drop_na = FALSE) |&gt; \n    group_by(rn) |&gt; \n    count() |&gt; \nfilter(n&gt;1) |&gt; pull(rn)\n\n\nmultiple_overlaps &lt;-\n        CONS_C1_df_dup_overlaps_COMP |&gt; filter(rn_1 %in% overlaps_after_miss_appear_more_than_one_time|rn_2 %in% overlaps_after_miss_appear_more_than_one_time)|&gt;\n      (\\(df) {\n    cat(paste0(\"00. Multiple overlappings, cases: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"00. Multiple overlappings, RUNs: \", formatC(nrow(distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    df\n  })()|&gt; \n  tidytable::pivot_longer(\n        cols = matches(\"_[12]$\"),  # All columns ending with _1 or _2\n        names_to = c(\".value\", \"wave\"),\n        names_pattern = \"(.+)_([12])\",\n        values_drop_na = FALSE)|&gt; \n  filter(dit&lt;1096, senda!=\"no\")|&gt; \n  group_by(hash_key)|&gt; \n      mutate(\n        max_ano_bd = max(ano_bd, na.rm = TRUE),\n        max_disch_date_num = max(disch_date_num, na.rm = TRUE)\n    )|&gt; \n    # 1. Prioritize completed treatments\n  arrange(\n    # 2. Then longest duration\n    desc(dit),\n    # 3. Then most recent retrieval year of the database\n    desc(max_ano_bd),\n    # 4. Then most recent discharge date\n    desc(max_disch_date_num)\n  )|&gt; \n  # Keep only the top-ranked row per group\n  slice(1)\n# \n# 00. Multiple overlappings, cases: 221; june 2025 174 \n# 00. Multiple overlappings, RUNs: 87; june 2025 67\ninvisible(\"These rules are too simplistic. I did not use them\")\n\nCONS_C1_df_dup_overlaps_COMP |&gt;\n  filter(rn_1 %in% overlaps_after_miss_appear_more_than_one_time |\n         rn_2 %in% overlaps_after_miss_appear_more_than_one_time) |&gt;\n  (\\(df) {\n    rio::export(df, \"_out/_multiple_overlappings.xlsx\") # for visual comparison in Excel\n\n    tbl &lt;- DT::datatable(\n      dplyr::mutate(df,\n                    hash_key = as.numeric(factor(hash_key)),\n                    adm_age_1 = round(adm_age_1, 3),\n                    adm_age_2 = round(adm_age_2, 3)),\n      filter   = \"top\",\n      rownames = FALSE,\n      caption  = htmltools::tags$caption(\n        style = \"caption-side: top; text-align: left;\",\n        htmltools::strong(\"Cases with multiple overlappings\")\n      ),\n      class = \"stripe hover compact\",\n      extensions = c(\"Scroller\"),\n      options = list(\n        paging = TRUE,\n        deferRender = TRUE,\n        scrollX = TRUE,\n        scrollY = 375,\n        scroller = TRUE,\n        dom = \"ti\",\n        language = list(decimal = \".\", thousands = \",\"),\n        columnDefs = list(list(className = \"dt-center\", targets = \"_all\"))\n      ),\n      callback = htmlwidgets::JS(\"\n        var $c = $(table.table().container());\n        table.on('draw.dt', function(){\n          $c.find('.dataTables_paginate, .dataTables_length').hide();\n        });\n      \")\n    ) |&gt; \n      DT::formatStyle(\n        columns = names(df),\n        `white-space` = \"nowrap\",\n        lineHeight    = \"0.75em\",\n        fontSize      = \"80%\",\n        fontFamily    = \"Helvetica Neue\"\n      )\n\n    note &lt;- htmltools::div(\n      style = \"font-size: 0.8em; margin-top: .5rem;\",\n      htmltools::em(\"Note. Each row represents an overlap; '_1' = first case, '_2' = second; a = date, b = numeric.\")\n    )\n\n    # Return as tagList instead of print()\n    htmltools::tagList(tbl, note)\n  })()\n\n\n00. Multiple overlappings, cases: 125 \n00. Multiple overlappings, RUNs: 54 \n\n\n\n\n\nNote. Each row represents an overlap; '_1' = first case, '_2' = second; a = date, b = numeric."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workflow of data management and analysis - Chilean substance use treatment administrative data",
    "section": "",
    "text": "SISTRAT Datasets\nThis page is composed by the following main topics:\n\nData Preparation and Standardization of C1, TOP, Mortality & Hospitalizations\nData Preparation and Standardization of C2 to C6\nDeduplication of C1\nDeduplication of C1, Part 2\nDeduplication of C1, Part 3\nDeduplication of C1, Part 4\nDescriptive Glimpse of the Database\nCodebook of C1\n\nThe main processes are summarized in the following figures.\n\n\nFigure 1. Diagram of data preparation\nTo open in a new window\n\n\n\nFigure 2. STROBE Diagram\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Duplicates_25_3.html#loading-packages-and-uniting-databases",
    "href": "Duplicates_25_3.html#loading-packages-and-uniting-databases",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "Loading Packages and uniting databases",
    "text": "Loading Packages and uniting databases\nProceed to load the necessary packages.\n\n\n\nCode\n# invisible(\"Only run from Ubuntu\")\n# if (!(Sys.getenv(\"RSTUDIO_SESSION_TYPE\") == \"server\" || file.exists(\"/.dockerenv\"))) {\n#   if(Sys.info()[\"sysname\"]!=\"Windows\"){\n#     Sys.setenv(RETICULATE_PYTHON = \"/home/fondecytacc/.pyenv/versions/3.11.5/bin/python\")\n#   }\n# }\n\n#clean enviroment\nrm(list = ls()); gc()\n\ntime_before_dedup2&lt;-Sys.time()\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# --- Bootstrap reticulate con ruta relativa a getwd() ---\nsuppressPackageStartupMessages(library(reticulate))\n\n# Busca .mamba_root/envs/py311/python.exe desde getwd() hacia padres\nfind_python_rel &lt;- function(start = getwd(),\n                            rel = file.path(\".mamba_root\",\"envs\",\"py311\",\"python.exe\")) {\n  cur &lt;- normalizePath(start, winslash = \"/\", mustWork = FALSE)\n  repeat {\n    cand &lt;- normalizePath(file.path(cur, rel), winslash = \"/\", mustWork = FALSE)\n    if (file.exists(cand)) return(cand)\n    parent &lt;- dirname(cur)\n    if (identical(parent, cur)) return(NA_character_)  # llegó a la raíz\n    cur &lt;- parent\n  }\n}\n\npy &lt;- find_python_rel()\n\nif (is.na(py)) {\n  stop(\"No se encontró Python relativo a getwd() (buscando '.mamba_root/envs/py311/python.exe').\\n\",\n       \"Directorio actual: \", getwd())\n}\n\n# Forzar ese intérprete\nSys.unsetenv(c(\"RETICULATE_CONDAENV\",\"RETICULATE_PYTHON_FALLBACK\"))\nSys.setenv(RETICULATE_PYTHON = py)\nreticulate::use_python(py, required=T)\n\npy_config()  # verificación\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# tidy, robust, and commented\nload_ndp &lt;- function(date_tag,\n                     base_name,\n                     input_subdir,\n                     out_subdir,\n                     load_into    = .GlobalEnv) {\n\n  # Are we in RStudio Server or Docker?\n  is_server &lt;- Sys.getenv(\"RSTUDIO_SESSION_TYPE\") == \"server\" || file.exists(\"/.dockerenv\")\n\n  # Project root = current WD without a trailing \"/cons\"\n  # Safer than gsub everywhere\n  wd &lt;- getwd()\n  project_root &lt;- sub(\"(/)?cons/?$\", \"\", wd)\n\n  # Build dirs\n  out_dir  &lt;- file.path(project_root, out_subdir)\n  in_dir   &lt;- if (is_server) file.path(getwd(), input_subdir) else out_dir\n\n  # Filenames (choose one canonical extension spelling)\n  rdata_file   &lt;- sprintf(\"%s_%s.Rdata\", base_name, date_tag)\n  seven_z_part &lt;- sprintf(\"%s_%s.Rdata.7z.001\", base_name, date_tag)\n  enc_file     &lt;- sprintf(\"%s_%s.Rdata.enc\",  base_name, date_tag)  # only if you actually encrypt to .enc\n\n  # Optional: Windows drive-based Google Drive/E: fallback (only on Windows)\n  envpath &lt;- NULL\n  if (.Platform$OS.type == \"windows\") {\n    drv &lt;- toupper(substr(normalizePath(project_root, winslash = \"\\\\\", mustWork = FALSE), 1, 1))\n    envpath &lt;- if (identical(drv, \"G\")) {\n      \"G:/Mi unidad/Alvacast/SISTRAT 2023/\"\n    } else {\n      \"E:/Mi unidad/Alvacast/SISTRAT 2023/\"\n    }\n  }\n  # message(\"envpath: \", envpath %||% \"&lt;none&gt;\")\n\n  # Ensure dirs exist (won't error if already present)\n  dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)\n\n  # Helper: load Rdata into the specified environment\n  load_rdata &lt;- function(path) {\n    stopifnot(file.exists(path))\n    loaded &lt;- load(path, envir = load_into)\n    message(\"Loaded objects: \", paste(loaded, collapse = \", \"))\n    invisible(loaded)\n  }\n\n  if (!is_server) {\n    # Desktop workflow: expect plain .Rdata in out_dir\n    local_rdata &lt;- file.path(out_dir, rdata_file)\n    if (!file.exists(local_rdata)) {\n      stop(\"Rdata file not found: \", local_rdata)\n    }\n    return(load_rdata(local_rdata))\n\n  } else {\n    # Server/Docker workflow: expect compressed/encrypted parts in _input\n    seven_z_path &lt;- file.path(in_dir, seven_z_part)\n    enc_path     &lt;- file.path(in_dir, enc_file)\n    out_rdata    &lt;- file.path(out_dir, rdata_file)\n\n    if (file.exists(seven_z_path)) {\n      # Extract 7z multi-part to out_dir using password\n      pass &lt;- Sys.getenv(\"PASS_PPIO\", unset = NA_character_)\n      if (is.na(pass) || pass == \"\") stop(\"Missing PASS_PPIO env var for 7z decryption.\")\n      # 7z command: x (extract), -p&lt;pass&gt;, -o&lt;outdir&gt;\n      args &lt;- c(\"x\", shQuote(seven_z_path), sprintf(\"-p%s\", pass), paste0(\"-o\", shQuote(out_dir)))\n      status &lt;- system2(\"7z\", args = args, stdout = TRUE, stderr = TRUE)\n      # Optional: check extraction result\n      if (!file.exists(out_rdata)) {\n        stop(\"Extraction finished but target not found: \", out_rdata, \"\\n7z output:\\n\", paste(status, collapse = \"\\n\"))\n      }\n      return(load_rdata(out_rdata))\n\n    } else if (file.exists(enc_path)) {\n      # If you truly have a raw .enc, you need a decryption step here (not loadable as-is).\n      stop(\"Found encrypted file but no extractor defined for .enc: \", enc_path)\n\n    } else if (file.exists(out_rdata)) {\n      # Already extracted earlier\n      return(load_rdata(out_rdata))\n\n    } else {\n      stop(\"No input found in: \", in_dir,\n           \"\\nTried: \", seven_z_path, \" and \", enc_path,\n           \"\\nAlso looked for already-extracted: \", out_rdata)\n    }\n  }\n}\n\nload_ndp(date_tag = \"2025_09_27\",\n                     base_name = \"24_ndp\",\n                     input_subdir = \"_input\",\n                     out_subdir   = file.path(\"data\", \"20241015_out\"),\n                     load_into    = .GlobalEnv)\n\n\n          used (Mb) gc trigger (Mb) max used (Mb)\nNcells  605943 32.4    1288181 68.8  1046203 55.9\nVcells 1206591  9.3    8388608 64.0  1915507 14.7\npython:         G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python.exe\nlibpython:      G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311/python311.dll\npythonhome:     G:/My Drive/Alvacast/SISTRAT 2023/.mamba_root/envs/py311\nversion:        3.11.5 | packaged by conda-forge | (main, Aug 27 2023, 03:23:48) [MSC v.1936 64 bit (AMD64)]\nArchitecture:   64bit\nnumpy:           [NOT FOUND]\n\nNOTE: Python version was forced by RETICULATE_PYTHON\n\n\n\n\n\n\nCode\n#https://github.com/rstudio/renv/issues/544\n#renv falls back to copying rather than symlinking, which is evidently very slow in this configuration.\nrenv::settings$use.cache(FALSE)\n\n#only use explicit dependencies (in DESCRIPTION)\nrenv::settings$snapshot.type(\"implicit\")\n\n#check if rstools is installed\ntry(installr::install.Rtools(check_r_update=F))\n\n\nInstalling package into ‘G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32’ (as ‘lib’ is unspecified)\n\n\nCode\ncheck_quarto_version &lt;- function(required = \"1.7.29\", comparator = c(\"ge\",\"gt\",\"le\",\"lt\",\"eq\")) {\n  comparator &lt;- match.arg(comparator)\n  current &lt;- package_version(paste(unlist(quarto::quarto_version()), collapse = \".\"))\n  req     &lt;- package_version(required)\n\n  ok &lt;- switch(comparator,\n               ge = current &gt;= req,\n               gt = current &gt;  req,\n               le = current &lt;= req,\n               lt = current &lt;  req,\n               eq = current == req)\n\n  if (!ok) {\n    stop(sprintf(\"Quarto version check failed: need %s %s (installed: %s).\",\n                 comparator, required, current), call. = FALSE)\n  }\n  invisible(TRUE)\n}\n\ncheck_quarto_version(\"1.7.29\", \"ge\") \n\n#change repository to CL\nlocal({\n  r &lt;- getOption(\"repos\")\n  r[\"CRAN\"] &lt;- \"https://cran.dcc.uchile.cl/\"\n  options(repos=r)\n})\n\nif(!require(pacman)){install.packages(\"pacman\");require(pacman)}\n\n\nCargando paquete requerido: pacman\n\n\nCode\nif(!require(pak)){install.packages(\"pak\");require(pak)}\n\n\nCargando paquete requerido: pak\n\n\nCode\npacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes\n\n\nNo 00LOCK detected in: G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32 No 00LOCK detected in: C:/Program Files/R/R-4.4.1/library\n\n\nCode\nif(Sys.info()[\"sysname\"]==\"Windows\"){\nif (getRversion() != \"4.4.1\") { stop(\"Requires R version 4.4.1; Actual: \", getRversion()) }\n}\n\n#check docker\ncheck_docker_running &lt;- function() {\n  # Try running 'docker info' to check if Docker is running\n  system(\"docker info\", intern = TRUE, ignore.stderr = TRUE)\n}\n\ninstall_docker &lt;- function() {\n  # Open the Docker Desktop download page in the browser for installation\n  browseURL(\"https://www.docker.com/products/docker-desktop\")\n}\n\n# Main logic\nif (inherits(try(check_docker_running(), silent = TRUE), \"try-error\")) {\n  liftr::install_docker()\n} else {\n  message(\"Docker is running.\")\n}\n\n\nWarning in system(“docker info”, intern = TRUE, ignore.stderr = TRUE): el comando ejecutado ‘docker info’ tiene el estatus 1\n\n\nDocker is running.\n\n\nCode\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#PACKAGES#######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\nunlink(\"*_cache\", recursive=T)\n\n# ----------------------------------------------------------------------\n# 2. Use a single pak::pkg_install() call for most CRAN packages\n# ----------------------------------------------------------------------\n\npaks &lt;-\n  c(#\"git\", \n    # To connect to github\n    \"gh\", #interface for  GitHub API from R\n    #\n    \"gitcreds\", # manages Git credentials (usernames, passwords, tokens)\n    #\n    \"usethis\", # simplifies common project setup tasks for R developers\n    # Package to bring packages in development\n    \"devtools\",\n    # Package administration\n    \"renv\",\n    # To manipulate data\n    \"knitr\", \"pander\", \"DT\",\n    # Join\n    \"fuzzyjoin\", \"RecordLinkage\",\n    # For tables\n    \"tidyverse\", \"janitor\",\n    # For contingency tables\n    \"kableExtra\",\n    # For connections with python\n    \"reticulate\",\n    # To manipulate big data\n    \"polars\", \"sqldf\",\n    # To bring big databases\n    \"nanoparquet\",\n    # Interface for R and RStudio in R\n    \"installr\", \"rmarkdown\", \"quarto\", \"yaml\", #\"rstudioapi\",\n    # Time handling\n    \"clock\",\n    # Combine plots\n    \"ggpubr\",\n    # Parallelized iterative processing\n    \"furrr\",\n    # Work like a tibble with a data.table database\n    \"tidytable\",\n    # Split database into training and testing\n    \"caret\",\n    # Impute missing data\n    \"missRanger\", \"mice\",\n    # To modularize tasks\n    \"job\",\n    # For PhantomJS install checks\n    \"webshot\"\n  )\n\n# dplyr\n# janitor\n# reshape2\n# tidytable\n# arrow\n# boot\n# broom\n# car\n# caret\n# data.table\n# DiagrammeR\n# DiagrammeRsvg\n# dplyr\n# epiR\n# epitools\n# ggplot2\n# glue\n# htmlwidgets\n# knitr\n# lubridate\n# naniar\n# parallel\n# polycor\n# pROC\n# psych\n# readr\n# rio\n# rsvg\n# scales\n# stringr\n# tableone\n# rmarkdown\n# biostat3\n# codebook\n# finalfit\n# Hmisc\n# kableExtra\n# knitr\n# devtools\n# tidyr\n# stringi\n# stringr\n# muhaz\n# sqldf\n# compareGroups\n# survminer\n# lubridate\n# ggfortify\n# car\n# fuzzyjoin\n# compareGroups\n# caret\n# job\n# htmltools\n# nanoparquet\n# ggpubr\n# polars\n# installr\n# clock\n# pander\n# reshape\n# mice\n# missRanger\n# VIM\n# withr\n# biostat3\n# broom\n# glue\n# finalfit\n# purrr\n# sf\n\n\n# pak::pkg_install(paks)\n\npak::pak_sitrep()\n# pak::sysreqs_check_installed(unique(unlist(paks)))\n#pak::lockfile_create(unique(unlist(paks)),  \"dependencies_duplicates24.lock\", dependencies=T)\n#pak::lockfile_install(\"dependencies_duplicates24.lock\")\n#https://rdrr.io/cran/pak/man/faq.html\n#pak::cache_delete()\n\nlibrary(tidytable)\n\n\nAdjuntando el paquete: ‘tidytable’\n\n\nThe following objects are masked from ‘package:stats’:\ndt, filter, lag\n\n\nThe following object is masked from ‘package:base’:\n%in%\n\n\nCode\nlibrary(ggplot2)\nlibrary(readr)\n\n\nAdjuntando el paquete: ‘readr’\n\n\nThe following object is masked by ‘.GlobalEnv’:\nparse_date\n\n\nCode\n# ----------------------------------------------------------------------\n# 3. Activate polars code completion (safe to try even if it fails)\n# ----------------------------------------------------------------------\n#try(polars_code_completion_activate())\n\n# ----------------------------------------------------------------------\n# 4. BPMN from GitHub (not on CRAN, so install via devtools if missing)\n# ----------------------------------------------------------------------\nif (!requireNamespace(\"bpmn\", quietly = TRUE)) {\n  devtools::install_github(\"bergant/bpmn\")\n}\n\n# ----------------------------------------------------------------------\n# 5. PhantomJS Check (use webshot if PhantomJS is missing)\n# ----------------------------------------------------------------------\n# if (!webshot::is_phantomjs_installed()) {\n#   webshot::install_phantomjs()\n# }\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#FUNCTIONS######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n# NO MORE DEBUGS\noptions(error = NULL)        # si antes tenías options(error = recover) o browser)\noptions(browserNLdisabled = FALSE)\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n#NAs are replaced with \"\" in knitr kable\noptions(knitr.kable.NA = '')\n\npander::panderOptions('big.mark', ',')\npander::panderOptions('decimal.mark', '.')\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n\n#to format rows in bold\nformat_cells &lt;- function(df, rows ,cols, value = c(\"italics\", \"bold\", \"strikethrough\")){\n\n  # select the correct markup\n  # one * for italics, two ** for bold\n  map &lt;- setNames(c(\"*\", \"**\", \"~~\"), c(\"italics\", \"bold\", \"strikethrough\"))\n  markup &lt;- map[value]  \n\n  for (r in rows){\n    for(c in cols){\n\n      # Make sure values are not factors\n      df[[c]] &lt;- as.character( df[[c]])\n\n      # Update formatting\n      df[r, c] &lt;- ifelse(nchar(df[r, c])==0,\"\",paste0(markup, gsub(\" \", \"\", df[r, c]), markup))\n    }\n  }\n\n  return(df)\n}\n#To produce line breaks in messages and warnings\nknitr::knit_hooks$set(\n   error = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-danger\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Error', '**Error**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   warning = function(x, options) {\n     paste('\\n\\n&lt;div class=\"alert alert-warning\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', gsub('^##\\ Warning:', '**Warning**', x)),\n           '&lt;/div&gt;', sep = '\\n')\n   },\n   message = function(x, options) {\n     paste('&lt;div class=\"message\" style=\"font-size: small !important;\"&gt;',\n           gsub('##', '\\n', x),\n           '&lt;/div&gt;', sep = '\\n')\n   }\n)\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#\n\nsum_dates &lt;- function(x){\n  cbind.data.frame(\n    min= as.Date(min(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\"),\n    p001= as.Date(quantile(unclass(as.Date(x)), .001, na.rm=T), origin = \"1970-01-01\"),\n    p005= as.Date(quantile(unclass(as.Date(x)), .005, na.rm=T), origin = \"1970-01-01\"),\n    p025= as.Date(quantile(unclass(as.Date(x)), .025, na.rm=T), origin = \"1970-01-01\"),\n    p25= as.Date(quantile(unclass(as.Date(x)), .25, na.rm=T), origin = \"1970-01-01\"),\n    p50= as.Date(quantile(unclass(as.Date(x)), .5, na.rm=T), origin = \"1970-01-01\"),\n    p75= as.Date(quantile(unclass(as.Date(x)), .75, na.rm=T), origin = \"1970-01-01\"),\n    p975= as.Date(quantile(unclass(as.Date(x)), .975, na.rm=T), origin = \"1970-01-01\"),\n    p995= as.Date(quantile(unclass(as.Date(x)), .995, na.rm=T), origin = \"1970-01-01\"),\n    p999= as.Date(quantile(unclass(as.Date(x)), .999, na.rm=T), origin = \"1970-01-01\"),\n    max= as.Date(max(unclass(as.Date(x)), na.rm=T), origin = \"1970-01-01\")\n  )\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n# Define the function adapted for Polars\nsum_dates_polars &lt;- function(df, date_col) {\n  # Create the list of quantiles\n  quantiles &lt;- c(0.001, 0.005, 0.025, 0.25, 0.5, 0.75, 0.975, 0.995, 0.999)\n  # Create expressions to calculate min and max\n  expr_list &lt;- list(\n    pl$col(date_col)$min()$alias(\"min\"),\n    pl$col(date_col)$max()$alias(\"max\")\n  )\n  # Add expressions for quantiles\n  for (q in quantiles) {\n    expr_list &lt;- append(expr_list, pl$col(date_col)$quantile(q)$alias(paste0(\"p\", sub(\"\\\\.\", \"\", as.character(q)))))\n  }\n  # Apply the expressions and return a DataFrame with the results\n  df$select(expr_list)\n}\n\n# Custom function for sampling with a seed\nsample_n_with_seed &lt;- function(data, size, seed) {\n  set.seed(seed)\n  dplyr::sample_n(data, size)\n}\n\n# Function to get the most frequent value \nmost_frequent &lt;- function(x) { \n  uniq_vals &lt;- unique(x)\n  freq_vals &lt;- sapply(uniq_vals, function(val) sum(x == val))\n  most_freq &lt;- uniq_vals[which(freq_vals == max(freq_vals))]\n  \n  if (length(most_freq) == 1) {\n    return(most_freq)\n  } else {\n    return(NA)\n  }\n}\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#CONFIG #######################################################################\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\noptions(scipen=2) #display numbers rather scientific number\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# Define the function first\n#joins these values with semicolons and optionally truncates the result if it exceeds a specified width.\ntoString2 &lt;- function(x, width = NULL, ...) {\n    string &lt;- paste(x, collapse = \"; \")\n    if (missing(width) || is.null(width) || width == 0) \n        return(string)\n    if (width &lt; 0) \n        stop(\"'width' must be positive\")\n    if (nchar(string, type = \"w\") &gt; width) {\n        width &lt;- max(6, width)\n        string &lt;- paste0(substr(string, 1, width - 3), \"...\")\n    }\n    string\n}\nnormalize_txt &lt;- function(x) {\n  x|&gt;\n    stringi::stri_trans_general(\"Latin-ASCII\")|&gt;\n    tolower()|&gt;\n    trimws()\n}\n\nicd10_broad &lt;- function(x) {\nx &lt;- tolower(x)\ntidytable::case_when(\nstringr::str_detect(x, \"organic|organico|demenc|alzheimer|parkinson|delirium|cerebral\") ~ \"F0 Organic\",\nstringr::str_detect(x, \"psicoactiva|alcohol|marihuana|canabis|cannabis|cocain|opio|opiace|benzodiazep|sustancias\") ~ \"F1 Substance use\",\nstringr::str_detect(x, \"esquizofren|psicotip|delirant|psicosis\") ~ \"F2 Psychotic\",\nstringr::str_detect(x, \"estado de animo|afectiv|depres|bipolar|maniaco|distimia|hipoman\") ~ \"F3 Mood\",\nstringr::str_detect(x, \"neurotic|ansiedad|fobi|panico|obsesivo|compulsiv|estres|adaptaci|somatoform|somatiz\") ~ \"F4 Anxiety/Stress/Somatoform\",\nstringr::str_detect(x, \"comportamiento.*fisiolog|alimentari|anorex|bulim|sueñ|insomni|disfuncion sexual\") ~ \"F5 Physio/Eating/Sleep/Sexual\",\nstringr::str_detect(x, stringr::regex(\"personalidad|comportamiento del adulto|antisocial|limite|evitativ|habit|habitos|impuls|control de los impulsos|control\\\\s+de\\\\s+impulsos\", ignore_case = TRUE)) ~ \"F6 Personality/Adult behaviour\",\nstringr::str_detect(x, \"retraso mental|discapacidad intelectual|intelectual\") ~ \"F7 Intellectual disability\",\nstringr::str_detect(x, \"desarrollo psicolog|autism|asperger|lenguaje|aprendizaje|espectro autista|tdah|t\\\\s*d\\\\s*a\\\\s*h\") ~ \"F8/9 Neurodevelopment/Child\",\nTRUE ~ \"Other/unspecified\"\n)\n}\ndsmiv_broad &lt;- function(x) {\nx &lt;- tolower(x)\ntidytable::case_when(\nstringr::str_detect(x, \"sustancia|alcohol|marihuana|cannabis|cocain|opio|opiace|benzodiazep\") ~ \"Substance-related\",\nstringr::str_detect(x, \"esquizofren|psicosis|psicot\") ~ \"Psychotic\",\nstringr::str_detect(x, \"estado de animo|afectiv|depres|bipolar|maniaco|distimia|hipoman\") ~ \"Mood\",\nstringr::str_detect(x, \"ansiedad|fobi|panico|obsesivo|compulsiv|estres|adaptaci\") ~ \"Anxiety/Stress/Adjustment\",\nstringr::str_detect(x, \"somatoform|somatiz|disociativ|conversion\") ~ \"Somatoform/Dissociative\",\nstringr::str_detect(x, \"alimentari|anorex|bulim|sueñ|insomni|disfuncion sexual|para[f|f]ilia|sexual\") ~ \"Eating/Sleep/Sexual\",\nstringr::str_detect(x, \"personalidad|antisocial|limite|borderline|paranoide|evitativ|dependient|narcis\") ~ \"Personality\",\nstringr::str_detect(x, \"retraso mental|discapacidad intelectual|intelectual\") ~ \"Intellectual disability\",\nstringr::str_detect(x, \"desarrollo|autism|asperger|infancia|tdah|t\\\\s*d\\\\s*a\\\\s*h|lenguaje|aprendizaje\") ~ \"Neurodevelopment/Childhood-onset\",\nTRUE ~ \"Other/unspecified\"\n)\n}\n\npair_str &lt;- function(main, sub) {\n  main &lt;- as.character(main)\n  sub  &lt;- as.character(sub)\n  both_na &lt;- is.na(main) & is.na(sub)\n\n  out &lt;- paste0(\n    tidytable::coalesce(main, \"NA\"),\n    \"::\",\n    tidytable::coalesce(sub,  \"NA\")\n  )\n\n  out[both_na] &lt;- NA_character_\n  out\n}\n\n# ── Helpers ────────────────────────────────────────────────────────────\nmode_pick_int &lt;- function(x){\n  x &lt;- x[!is.na(x)]\n  if(length(x)==0) return(NA_integer_)\n  tx &lt;- sort(table(x), decreasing = TRUE)\n  as.integer(names(tx)[1L])\n}\n\nsubkey_to_label &lt;- function(x){\n  y &lt;- gsub(\"_\",\" \", tolower(x))\n  y &lt;- gsub(\"amphetamine type stimulants\",\"amphetamine-type stimulants\", y)\n  y &lt;- gsub(\"tranquilizers hypnotics\",\"tranquilizers/hypnotics\", y)\n  y\n}\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n# ── Encryption ────────────────────────────────────────────────────────\n\n# Pack: [24-byte nonce][ciphertext] -&gt; hex\nencrypt_chr &lt;- function(x, key) {\n    vapply(x, function(v) {\n        if (is.na(v)) return(NA_character_)\n        ct &lt;- sodium::data_encrypt(charToRaw(as.character(v)), key)\n        nonce &lt;- attr(ct, \"nonce\")                 # 24 bytes\n        sodium::bin2hex(c(nonce, ct))              # pack nonce + ct\n    }, FUN.VALUE = character(1))\n}\n\n# Unpack: hex -&gt; [nonce|ciphertext], restore attr(nonce), then decrypt\ndecrypt_chr &lt;- function(x, key) {\n    vapply(x, function(v) {\n        if (is.na(v)) return(NA_character_)\n        buf &lt;- sodium::hex2bin(v)\n        if (length(buf) &lt; 25L) stop(\"Ciphertext too short or corrupted.\")\n        nonce &lt;- buf[1:24]\n        ct    &lt;- buf[-(1:24)]\n        attr(ct, \"nonce\") &lt;- nonce\n        rawToChar(sodium::data_decrypt(ct, key))\n    }, FUN.VALUE = character(1))\n}\n\n# Function to encrypt a character vector\nencrypt_column &lt;- function(x, key) {\n  sapply(x, function(item) {\n    if (is.na(item) || item == \"\") {\n      return(NA_character_)\n    }\n    encrypted_raw &lt;- sodium::data_encrypt(charToRaw(item), key)\n    base64enc::base64encode(encrypted_raw)  # Convert to base64 for storage\n  }, USE.NAMES = FALSE)\n}\n\ndecrypt_column &lt;- function(x, key) {\n  sapply(x, function(item) {\n    if (is.na(item)) return(NA_character_)\n    encrypted_raw &lt;- base64enc::base64decode(item)\n    rawToChar(sodium::data_decrypt(encrypted_raw, key))\n  }, USE.NAMES = FALSE)\n}\n\n\nError in contrib.url(repos, \"source\") : \n  trying to use CRAN without setting a mirror\n* pak version:\n- 0.8.0.1\n* Version information:\n- pak platform: x86_64-w64-mingw32 (current: x86_64-w64-mingw32, compatible)\n- pak repository: - (local install?)\n* Optional packages installed:\n- pillar\n* Library path:\n- G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32\n- C:/Program Files/R/R-4.4.1/library\n* pak is installed at G:/My Drive/Alvacast/SISTRAT 2023/renv/library/windows/R-4.4/x86_64-w64-mingw32/pak.\n* Dependency versions:\n- callr      3.7.6      \n- cli        3.6.2      \n- curl       5.2.1      \n- desc       1.4.3      \n- filelock   1.0.3      \n- jsonlite   1.8.8      \n- lpSolve    5.6.23.9000\n- pkgbuild   1.4.4      \n- pkgcache   2.2.2.9000 \n- pkgdepends 0.7.2.9000 \n- pkgsearch  3.1.3.9000 \n- processx   3.8.4      \n- ps         1.7.6      \n- R6         2.5.1      \n- zip        2.3.1      \n* Dependencies can be loaded\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe previous document (Step 2) resolved temporal inconsistencies by correcting overlapping treatment dates, imputing missing discharge dates, and handling implausible negative treatment durations.\nThis document (Step 3) focuses on resolving inconsistencies in user-invariant characteristics—attributes that should remain constant for an individual across all their treatment episodes. We triangulated data from multiple sources (C1-C6 agreements, hospital records, mortality registry, etc.) to deduce the most accurate values for: * Sex (sex_rec): Resolved conflicts using external data, pregnancy status, program type, ICD-10 diagnoses, gender identity, and probabilistic imputation. * Nationality (nationality_cons): Consolidated all reported nationalities for users with conflicting records. * Starting Substance (sus_ini_mod_mvv): Determined the most vulnerable starting substance (e.g., cocaine paste &gt; cocaine powder &gt; alcohol) for users with multiple reported substances. * Age of Onset (age_subs_onset_rec2, age_primary_onset_rec2): Developed a complex algorithm using external data to resolve conflicting or missing ages for the onset of any substance use and the primary substance use, establishing logical bounds (e.g., onset must precede admission age). * To protect privacy, we encrypted SENDA ID, center name and municipality using the sodium package (v 1.4.0). * We also built a basic longitudinal structure: Sorted by adm_date within each patient and use lead() to link to the next episode; Converted dates to numeric (days since 1970, with 2025-05-28 for ongoing cases) to compute diff_bet_treat; Flagged short gaps (less_60d_diff, less_45d_diff) and referral episodes; Summarized between-episode changes; and applied a helper to shorten and ASCII-normalize names for Stata 16 compatibility.\nAlthough presented as distinct stages, these cleaning steps are interdependent. For instance, resolving a user’s sex was necessary to validate their participation in gender-specific programs. Throughout this document, we use the terms “rows”, “cases”, “observations”, or “treatment episodes” interchangeably to refer to entries in the dataset."
  },
  {
    "objectID": "Duplicates_25_3.html#data-editing-deductive-imputation",
    "href": "Duplicates_25_3.html#data-editing-deductive-imputation",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "1. Data Editing / Deductive Imputation",
    "text": "1. Data Editing / Deductive Imputation\n\n1.1. DSM/ICD-10\nSome cases did not have a primary diagnosis in DSM-IV notation but have a secondary (n= 603) or tertiary but no secondary (n= 20).\nThe data uses a nested structure for main and sub-diagnostic categories. When an episode had a main diagnosis but a missing sub-diagnosis, we inserted ‘NA’ as a placeholder (“NA_placeholder_”). We then removed duplicate entries among the second or third pair of main and sub-diagnoses. After this cleaning step, the diagnoses for each episode were concatenated.\nThe replacement of DSM-IV diagnoses with ICD-10 codes is not recommended for our analysis yet. We lack documentation on the source of any intersection between these classification systems, and 31 sub-diagnoses have no direct equivalents between the two systems. This inconsistency would compromise the validity of our diagnostic categorization and subsequent analyses..\nThe main diagnoses and sub-diagnoses for ICD-10 and DSM-IV classification systems were combined into the mod_psiq_cie_10 and mod_psiq_dsm_iv columns, respectively. In the future (step 4), they should be separated by column.\nAdditionally, the columns with suffixes _instudy (detects any “in study”), _no_dg (detects any “no disorder”), and _dg (detects any valid diagnostic) enable the identification of records where categories such as “sin trastorno” (no disorder) and “en estudio” (under study) can be removed, as these designations provide no clinical value when they occur alongside established diagnoses _dg).\n\n\nCode\n# - Count how often a sub-diagnosis exists while the main diagnosis is missing (or marked “en estudio”/“sin trastorno”), for both DSM-IV and ICD-10.\n# - Learn a “lookup” from sub-diagnosis to main-diagnosis by observing valid main–sub pairs in your data (for DSM-IV and ICD-10 separately).\n# - Use that lookup to “repair/standardize” main diagnoses when the sub-diagnosis is informative (not NA, not “en estudio”, not “sin trastorno”).\n# - Insert a placeholder (“NA_placeholder”) when a main diagnosis exists but the sub-diagnosis is missing, to preserve the pair structure.\n# - Remove duplicate diagnoses across the 2nd and 3rd diagnosis pairs so that repeated main–sub pairs do not get double-counted when concatenated.\n# - Concatenate (main::sub) pairs into a single per-episode string for ICD-10 (mod_psiq_cie_10) and DSM-IV (mod_psiq_dsm_iv).\n# - Create helper flags to identify rows with any “en estudio”, “sin trastorno”, or at least one valid diagnosis.\n\nnames_dg_dsmiv&lt;-\nc(\"diagnostico_trs_psiquiatrico_dsm_iv\", \"diagnostico_trs_psiquiatrico_sub_dsm_iv\", \n\"x2_diagnostico_trs_psiquiatrico_dsm_iv\", \"x2_diagnostico_trs_psiquiatrico_sub_dsm_iv\", \n\"x3_diagnostico_trs_psiquiatrico_dsm_iv\", \"x3_diagnostico_trs_psiquiatrico_sub_dsm_iv\")\nnames_dg_icd10&lt;- c(\"diagnostico_trs_psiquiatrico_cie_10\", \"diagnostico_trs_psiquiatrico_sub_cie_10\", \n\"x2_diagnostico_trs_psiquiatrico_cie_10\", \"x2_diagnostico_trs_psiquiatrico_sub_cie_10\", \n\"x3_diagnostico_trs_psiquiatrico_cie_10\", \"x3_diagnostico_trs_psiquiatrico_sub_cie_10\", \n\"diagnostico_trastorno_psiquiatrico_cie_10_al_egreso\")\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  #dg_trs_psiq_sub_cie_10 x2_dg_trs_psiq_sub_cie_10 x3_dg_trs_psiq_sub_cie_10\ncat(paste0(\"Cases with sub-diagnostics but without the main, DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, second dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x2_diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, third dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x3_diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ncat(paste0(\"Cases with sub-diagnostics but without the main, ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(diagnostico_trs_psiquiatrico_cie_10) & !is.na(diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, second dg., ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x2_diagnostico_trs_psiquiatrico_cie_10) & !is.na(x2_diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, third dg., ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x3_diagnostico_trs_psiquiatrico_cie_10) & !is.na(x3_diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; nrow()))\n\n# 3 cases with sub-diagnostics\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  #dg_trs_psiq_sub_cie_10 x2_dg_trs_psiq_sub_cie_10 x3_dg_trs_psiq_sub_cie_10\ncat(paste0(\"Cases with sub-diagnostics but without the main, DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, second dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x2_diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, third dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter(is.na(x3_diagnostico_trs_psiquiatrico_dsm_iv) & !is.na(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; nrow()))\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(diagnostico_trs_psiquiatrico_cie_10) |\n    diagnostico_trs_psiquiatrico_cie_10 == \"en estudio\" |\n    diagnostico_trs_psiquiatrico_cie_10 == \"sin trastorno\") & !is.na(diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; \n  nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), second dg., ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(x2_diagnostico_trs_psiquiatrico_cie_10) |\n    x2_diagnostico_trs_psiquiatrico_cie_10 == \"en estudio\" |\n    x2_diagnostico_trs_psiquiatrico_cie_10 == \"sin trastorno\") & !is.na(x2_diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; \n  nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), third dg., ICD-10: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(x3_diagnostico_trs_psiquiatrico_cie_10) |\n    x3_diagnostico_trs_psiquiatrico_cie_10 == \"en estudio\" |\n    x3_diagnostico_trs_psiquiatrico_cie_10 == \"sin trastorno\") & !is.na(x3_diagnostico_trs_psiquiatrico_sub_cie_10))|&gt; select(c(\"hash_key\",any_of(names_dg_icd10)))|&gt; \n  nrow()))\n\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(diagnostico_trs_psiquiatrico_dsm_iv) |\n    diagnostico_trs_psiquiatrico_dsm_iv == \"en estudio\" |\n    diagnostico_trs_psiquiatrico_dsm_iv == \"sin trastorno\") & !is.na(diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; \n  nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), second dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(x2_diagnostico_trs_psiquiatrico_dsm_iv) |\n    x2_diagnostico_trs_psiquiatrico_dsm_iv == \"en estudio\" |\n    x2_diagnostico_trs_psiquiatrico_dsm_iv == \"sin trastorno\") & !is.na(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; \n  nrow()))\ncat(paste0(\"Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), third dg., DSM-IV: \",\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; filter((is.na(x3_diagnostico_trs_psiquiatrico_dsm_iv) |\n    x3_diagnostico_trs_psiquiatrico_dsm_iv == \"en estudio\" |\n    x3_diagnostico_trs_psiquiatrico_dsm_iv == \"sin trastorno\") & !is.na(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; select(c(\"hash_key\",any_of(names_dg_dsmiv)))|&gt; \n  nrow())) \n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ninvisible(\"Primero solucionar el problema de arriba: clasificaciones con en estudio, pero la subclasificación con diagnóstico (agregarle como condición que la subclas tenga también no_NAs\")\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ncat(\"to standardize the main category with the DSM-IV subcategory\\n\")\ndg_trs_psiq_dsm_iv_sub_tab&lt;-\n  SISTRAT23_c1_2010_2024_df_prev1n|&gt;\n  tidytable::mutate(dsm_concat= paste0(diagnostico_trs_psiquiatrico_dsm_iv, \"_\", diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; \n  tidytable::mutate(x2_dsm_concat= paste0(x2_diagnostico_trs_psiquiatrico_dsm_iv, \"_\", x2_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; \n  tidytable::mutate(x3_dsm_concat= paste0(x3_diagnostico_trs_psiquiatrico_dsm_iv, \"_\", x3_diagnostico_trs_psiquiatrico_sub_dsm_iv))|&gt; \n  tidytable::select(ends_with(\"dsm_concat\"))|&gt; \n  tidytable::pivot_longer(\n    cols = everything(),\n    names_to = \"concat_type\",\n    values_to = \"concat_value\"\n  )|&gt;\n  tidytable::select(-concat_type)|&gt; \n  janitor::tabyl(concat_value)|&gt; \n  data.frame()|&gt;\n  tidytable::arrange(desc(n))|&gt; \n  tidytable::select(concat_value)|&gt; \n  #only useful links\n  tidytable::filter(!grepl(\"_NA$\", concat_value))|&gt;\n  tidytable::filter(!grepl(\"^NA_\", concat_value))|&gt;\n  tidytable::filter(!grepl(\"en estudio\", concat_value))|&gt;\n  tidytable::filter(!grepl(\"sin trastorno\", concat_value))|&gt; \n  tidytable::separate(concat_value, into = c(\"main\", \"sub\"), sep = \"_\", extra = \"merge\")\n\n  ambiguous_subs &lt;- dg_trs_psiq_dsm_iv_sub_tab|&gt;\n    tidytable::count(sub, name = \"n_mains\")|&gt;\n    tidytable::filter(n_mains &gt; 1)\n  \n  if (nrow(ambiguous_subs) &gt; 0) {\n    stop(\"DSM-IV: Ambiguous sub-diagnoses found:\\n\", \n         paste(ambiguous_subs$sub, collapse = \"\\n\"),\n         call. = FALSE)\n  }\ndg_trs_psiq_dsm_iv_sub_tab &lt;- dg_trs_psiq_dsm_iv_sub_tab|&gt;\n  tidytable::add_count(sub, main, name = \"n\")|&gt;\n  tidytable::arrange(sub, tidytable::desc(n))|&gt;\n  tidytable::distinct(sub, .keep_all = TRUE)|&gt;\n  tidytable::select(-n)\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ncat(\"to standardize the main category with the ICD-10 subcategory\\n\")\n\n# Given errors (SEP 2025), ambiguous mappings in ICD10\ncanonical_mapping &lt;- tribble(\n  ~sub, ~correct_main,\n  \"episodios depresivos\", \"trastornos del humor (afectivos)\",\n  \"otros trastornos de la personalidad y del comportamiento del adulto\", \"trastornos de la personalidad y del comportamiento del adulto\",\n  \"reacciones a estres grave y trastornos de adaptacion\", \"trastornos neuroticos, secundarios a situaciones estresantes y somatomorfos\",\n  \"trastornos de los habitos y del control de los impulsos\", \"trastornos de los habitos y del control de los impulsos\"\n)\ndg_trs_psiq_icd10_sub_tab &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1n|&gt;\n  tidytable::mutate(\n    icd_concat = paste0(diagnostico_trs_psiquiatrico_cie_10, \"_\", diagnostico_trs_psiquiatrico_sub_cie_10),\n    x2_icd_concat = paste0(x2_diagnostico_trs_psiquiatrico_cie_10, \"_\", x2_diagnostico_trs_psiquiatrico_sub_cie_10),\n    x3_icd_concat = paste0(x3_diagnostico_trs_psiquiatrico_cie_10, \"_\", x3_diagnostico_trs_psiquiatrico_sub_cie_10)\n  )|&gt;\n  tidytable::select(ends_with(\"icd_concat\"))|&gt;\n  tidytable::pivot_longer(cols = everything(), names_to = \"concat_type\", values_to = \"concat_value\")|&gt;\n  tidytable::select(concat_value)|&gt;\n  janitor::tabyl(concat_value)|&gt;  # gives: concat_value, n, percent\n  tidytable::filter(\n    !grepl(\"_NA$|^NA_|en estudio|sin trastorno\", concat_value, ignore.case = TRUE),\n    !is.na(concat_value)\n  )|&gt;\n  tidytable::separate(concat_value, into = c(\"main\", \"sub\"), sep = \"_\", extra = \"merge\")|&gt;\n  tidytable::left_join(canonical_mapping, by = \"sub\")|&gt;\n  tidytable::mutate(main = ifelse(!is.na(correct_main), correct_main, main))|&gt;\n  tidytable::select(-correct_main)|&gt;\n  # 👇 CRITICAL: Re-aggregate by standardized (main, sub)\n  tidytable::group_by(main, sub)|&gt;\n  tidytable::summarise(n = sum(n), .groups = \"drop\")|&gt;\n  tidytable::mutate(percent = n / sum(n))\n\n# Check ambiguous codes\n  ambiguous_icd_10_subs &lt;- dg_trs_psiq_icd10_sub_tab|&gt;\n      tidytable::count(sub, name = \"n_mains\")|&gt;\n      tidytable::filter(n_mains &gt; 1)\n    \n    if (nrow(ambiguous_icd_10_subs) &gt; 0) {\n      stop(\"ICD-10: Ambiguous sub-diagnoses found:\\n\", \n           paste(ambiguous_icd_10_subs$sub, collapse = \"\\n\"),\n           call. = FALSE)\n    }\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ncat(\"remove redundancies and duplicates in diagnoses\\n\")\n#_______________#_____________________#______________#\n#_______________#_____________________#______________#\n#_______________#_____________________#______________#\n\ninvisible(\"Put placeholder to make replacements\")\nSISTRAT23_c1_2010_2024_df_prev1n_mod1&lt;-\nSISTRAT23_c1_2010_2024_df_prev1n|&gt; \n  # SEP 2025:\n  # If the diagnostic is not in study or confirmed not having any and is not an empty cell, then \n  # it will look to the main diagnostic given the sub-dg.\n  # It is all about constructing from SUB to MAIN\n    tidytable::mutate(dg_trs_psiq_dsm_iv= tidytable::case_when(\n    !is.na(diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n      !diagnostico_trs_psiquiatrico_sub_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~\n      # Perform the lookup here\n      dg_trs_psiq_dsm_iv_sub_tab$main[match(diagnostico_trs_psiquiatrico_sub_dsm_iv, dg_trs_psiq_dsm_iv_sub_tab$sub)],\n    TRUE ~ diagnostico_trs_psiquiatrico_dsm_iv # Keep the original value otherwise\n    #to explore differences and origin\n  ))|&gt; #filter(is.na(dg_trs_psiq_dsm_iv), !is.na(diagnostico_trs_psiquiatrico_dsm_iv))|&gt; select(c(\"hash_key\",\"dg_trs_psiq_dsm_iv\",\"dg_trs_psiq_sub_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; View()\n  tidytable::mutate(x2_dg_trs_psiq_dsm_iv= tidytable::case_when(\n    !is.na(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n    !x2_diagnostico_trs_psiquiatrico_sub_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~\n      dg_trs_psiq_dsm_iv_sub_tab$main[match(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv, dg_trs_psiq_dsm_iv_sub_tab$sub)],\n    TRUE ~ x2_diagnostico_trs_psiquiatrico_dsm_iv \n  ))|&gt; #filter(x2_dg_trs_psiq_dsm_iv!=x2_diagnostico_trs_psiquiatrico_dsm_iv)|&gt; select(c(\"hash_key\",\"x2_dg_trs_psiq_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; glimpse()\n  tidytable::mutate(x3_dg_trs_psiq_dsm_iv= tidytable::case_when(\n    !is.na(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n    !x3_diagnostico_trs_psiquiatrico_sub_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~\n      dg_trs_psiq_dsm_iv_sub_tab$main[match(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv, dg_trs_psiq_dsm_iv_sub_tab$sub)],\n    TRUE ~ x3_diagnostico_trs_psiquiatrico_dsm_iv \n  ))|&gt; #filter(x3_dg_trs_psiq_dsm_iv!=x3_diagnostico_trs_psiquiatrico_dsm_iv)|&gt; select(c(\"hash_key\",\"x3_dg_trs_psiq_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; glimpse()\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  #now with ICD-10 classifications\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  tidytable::mutate(dg_trs_psiq_cie_10= tidytable::case_when(\n    !is.na(diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !diagnostico_trs_psiquiatrico_sub_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~\n      coalesce(\n          dg_trs_psiq_icd10_sub_tab$main[match(diagnostico_trs_psiquiatrico_sub_cie_10, dg_trs_psiq_icd10_sub_tab$sub)],\n          diagnostico_trs_psiquiatrico_cie_10\n        ),\n      #dg_trs_psiq_icd10_sub_tab$main[match(diagnostico_trs_psiquiatrico_sub_cie_10, dg_trs_psiq_icd10_sub_tab$sub)],\n    TRUE ~ diagnostico_trs_psiquiatrico_cie_10 \n  ))|&gt; #filter(dg_trs_psiq_cie_10!=diagnostico_trs_psiquiatrico_cie_10)|&gt; select(c(\"hash_key\",\"dg_trs_psiq_cie_10\", any_of(names_dg_icd10)))|&gt; glimpse()\n  tidytable::mutate(x2_dg_trs_psiq_cie_10= tidytable::case_when(\n    !is.na(x2_diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !x2_diagnostico_trs_psiquiatrico_sub_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~\n      dg_trs_psiq_icd10_sub_tab$main[match(x2_diagnostico_trs_psiquiatrico_sub_cie_10, dg_trs_psiq_icd10_sub_tab$sub)],\n    TRUE ~ x2_diagnostico_trs_psiquiatrico_cie_10 \n  ))|&gt; #filter(x2_dg_trs_psiq_cie_10!=x2_diagnostico_trs_psiquiatrico_cie_10)|&gt; select(c(\"hash_key\",\"x2_dg_trs_psiq_cie_10\", any_of(names_dg_icd10)))|&gt; glimpse()\n  tidytable::mutate(x3_dg_trs_psiq_cie_10= tidytable::case_when(\n    !is.na(x3_diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !x3_diagnostico_trs_psiquiatrico_sub_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~\n      dg_trs_psiq_icd10_sub_tab$main[match(x3_diagnostico_trs_psiquiatrico_sub_cie_10, dg_trs_psiq_icd10_sub_tab$sub)],\n    TRUE ~ x3_diagnostico_trs_psiquiatrico_cie_10 \n  ))|&gt; #filter(x3_dg_trs_psiq_cie_10!=x3_diagnostico_trs_psiquiatrico_cie_10)|&gt; select(c(\"hash_key\",\"x3_dg_trs_psiq_cie_10\", any_of(names_dg_icd10)))|&gt; glimpse()\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  #in case of main dg but no sub-dg, DSM-IV: this empty field will be respected in the future in case replacing diagnoses\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  tidytable::mutate(dg_trs_psiq_sub_dsm_iv= tidytable::case_when(\n    is.na(diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n    !is.na(dg_trs_psiq_dsm_iv) &\n    !diagnostico_trs_psiquiatrico_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~ \n      \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ diagnostico_trs_psiquiatrico_sub_dsm_iv # Keep the original value otherwise\n  ))|&gt; #filter(dg_trs_psiq_sub_dsm_iv==\"NA_placeholder\")|&gt; select(c(\"hash_key\",\"dg_trs_psiq_sub_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; glimpse()\n  tidytable::mutate(x2_dg_trs_psiq_sub_dsm_iv= tidytable::case_when(\n    is.na(x2_diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n    !is.na(x2_dg_trs_psiq_dsm_iv) &\n    !x2_diagnostico_trs_psiquiatrico_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~ \n    \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ x2_diagnostico_trs_psiquiatrico_sub_dsm_iv # Keep the original value otherwise\n  ))|&gt; #filter(x2_dg_trs_psiq_sub_dsm_iv==\"NA_placeholder\")|&gt; select(c(\"hash_key\",\"x2_dg_trs_psiq_sub_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; glimpse()\n  tidytable::mutate(x3_dg_trs_psiq_sub_dsm_iv= tidytable::case_when(\n    is.na(x3_diagnostico_trs_psiquiatrico_sub_dsm_iv) &\n    !is.na(x3_dg_trs_psiq_dsm_iv) &\n    !x3_diagnostico_trs_psiquiatrico_dsm_iv %in% c(\"en estudio\", \"sin trastorno\") ~ \n    \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ x3_diagnostico_trs_psiquiatrico_sub_dsm_iv # Keep the original value otherwise\n  ))|&gt; #filter(x3_dg_trs_psiq_sub_dsm_iv==\"NA_placeholder\")|&gt; select(c(\"hash_key\",\"x3_dg_trs_psiq_sub_dsm_iv\", any_of(names_dg_dsmiv)))|&gt; glimpse()  \n  tidytable::mutate(dg_trs_psiq_sub_cie_10= tidytable::case_when(\n    is.na(diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !is.na(dg_trs_psiq_cie_10) &\n    !diagnostico_trs_psiquiatrico_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~ \n    \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ diagnostico_trs_psiquiatrico_sub_cie_10 # Keep the original value otherwise\n  ))|&gt; \n  tidytable::mutate(x2_dg_trs_psiq_sub_cie_10= tidytable::case_when(\n    is.na(x2_diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !is.na(x2_dg_trs_psiq_cie_10) &\n    !x2_diagnostico_trs_psiquiatrico_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~\n    \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ x2_diagnostico_trs_psiquiatrico_sub_cie_10 # Keep the original value otherwise\n  ))|&gt; \n  tidytable::mutate(x3_dg_trs_psiq_sub_cie_10= tidytable::case_when(\n    is.na(x3_diagnostico_trs_psiquiatrico_sub_cie_10) &\n    !is.na(x3_dg_trs_psiq_cie_10) &\n    !x3_diagnostico_trs_psiquiatrico_cie_10 %in% c(\"en estudio\", \"sin trastorno\") ~\n    \"NA_placeholder\", # Or whatever value you want to assign\n    TRUE ~ x3_diagnostico_trs_psiquiatrico_sub_cie_10 # Keep the original value otherwise\n  ))|&gt; #filter(x3_dg_trs_psiq_sub_cie_10==\"NA_placeholder\")|&gt; select(c(\"hash_key\",\"x3_dg_trs_psiq_cie_10\", any_of(names_dg_icd10)))|&gt; glimpse()  \n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  # Collapse and separate main (ICD-10)\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  # First create combined diagnosis pairs for comparison\n  tidytable::mutate(\n    # Create diagnosis pairs for comparison\n    diag_pair_1 = paste(dg_trs_psiq_cie_10, \n                        dg_trs_psiq_sub_cie_10, sep = \"::\"),\n    diag_pair_2 = paste(x2_dg_trs_psiq_cie_10, \n                        x2_dg_trs_psiq_sub_cie_10, sep = \"::\"),\n    diag_pair_3 = paste(x3_dg_trs_psiq_cie_10, \n                        x3_dg_trs_psiq_sub_cie_10, sep = \"::\"),\n    # Now flag duplicates for removal\n    # SEP2025: If second pair exists and its different than pair 1, keep it\n    keep_pair_2 = !is.na(diag_pair_2) & (is.na(diag_pair_1) | diag_pair_2 != diag_pair_1),\n    # SEP2025: If third pair exists and its different than pair 1 and 2 or anyone of these two do not exist, keep it\n    keep_pair_3 = !is.na(diag_pair_3) & \n      (is.na(diag_pair_1) | diag_pair_3 != diag_pair_1) & \n      (is.na(diag_pair_2) | diag_pair_3 != diag_pair_2)\n  )|&gt;\n  # Apply the duplicate filtering\n  tidytable::mutate(\n    # Set the filtered columns based on duplicate flags\n    # prevents the same diagnosis from being counted multiple times when we combine them into the final concatenated field\n    x2_diag_filtered = tidytable::if_else(keep_pair_2, x2_dg_trs_psiq_cie_10, NA_character_),\n    x2_subdiag_filtered = tidytable::if_else(keep_pair_2, x2_dg_trs_psiq_sub_cie_10, NA_character_),\n    x3_diag_filtered = tidytable::if_else(keep_pair_3, x3_dg_trs_psiq_cie_10, NA_character_),\n    x3_subdiag_filtered = tidytable::if_else(keep_pair_3, x3_dg_trs_psiq_sub_cie_10, NA_character_)\n  )|&gt; \n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  # Collapse and separate main (NOW FOR DSM-IV DIAGNOSES)\n  #:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n  # First create combined diagnosis pairs for comparison\n  mutate(\n    # Create diagnosis pairs for comparison\n    dsm_diag_pair_1 = paste(dg_trs_psiq_dsm_iv, \n                        dg_trs_psiq_sub_dsm_iv, sep = \"::\"),\n    dsm_diag_pair_2 = paste(x2_dg_trs_psiq_dsm_iv, \n                        x2_dg_trs_psiq_sub_dsm_iv, sep = \"::\"),\n    dsm_diag_pair_3 = paste(x3_dg_trs_psiq_dsm_iv, \n                        x3_dg_trs_psiq_sub_dsm_iv, sep = \"::\"),\n    # Now flag duplicates for removal\n    # SEP2025: If second pair exists and its different than pair 1, keep it\n    dsm_keep_pair_2 = !is.na(dsm_diag_pair_2) & (is.na(dsm_diag_pair_1) | dsm_diag_pair_2 != dsm_diag_pair_1),\n    # SEP2025: If third pair exists and its different than pair 1 and 2 or anyone of these two do not exist, keep it\n    dsm_keep_pair_3 = !is.na(dsm_diag_pair_3) & \n      (is.na(dsm_diag_pair_1) | dsm_diag_pair_3 != dsm_diag_pair_1) & \n      (is.na(dsm_diag_pair_2) | dsm_diag_pair_3 != dsm_diag_pair_2)\n  )|&gt;\n  # Apply the duplicate filtering\n  mutate(\n    # Set the filtered columns based on duplicate flags\n    # prevents the same diagnosis from being counted multiple times when we combine them into the final concatenated field\n    dsm_x2_diag_filtered = if_else(dsm_keep_pair_2, x2_dg_trs_psiq_dsm_iv, NA_character_),\n    dsm_x2_subdiag_filtered = if_else(dsm_keep_pair_2, x2_dg_trs_psiq_sub_dsm_iv, NA_character_),\n    dsm_x3_diag_filtered = if_else(dsm_keep_pair_3, x3_dg_trs_psiq_dsm_iv, NA_character_),\n    dsm_x3_subdiag_filtered = if_else(dsm_keep_pair_3, x3_dg_trs_psiq_sub_dsm_iv, NA_character_)\n  )\n\ninvisible(\"To check inconsistencies so far\")\n# SISTRAT23_c1_2010_2024_df_prev1n_mod1|&gt; filter(!is.na(x2_diag_filtered))|&gt; select(\"diagnostico_trs_psiquiatrico_dsm_iv\", \"diagnostico_trs_psiquiatrico_sub_dsm_iv\", \"x2_diagnostico_trs_psiquiatrico_dsm_iv\", \"x2_diagnostico_trs_psiquiatrico_sub_dsm_iv\", \"x3_diagnostico_trs_psiquiatrico_dsm_iv\", \"x3_diagnostico_trs_psiquiatrico_sub_dsm_iv\", \"diagnostico_trs_psiquiatrico_cie_10\", \"diagnostico_trs_psiquiatrico_sub_cie_10\", \"x2_diagnostico_trs_psiquiatrico_cie_10\", \"x2_diagnostico_trs_psiquiatrico_sub_cie_10\", \"x3_diagnostico_trs_psiquiatrico_cie_10\", \"x3_diagnostico_trs_psiquiatrico_sub_cie_10\", \"diagnostico_trastorno_psiquiatrico_cie_10_al_egreso\",\"dg_trs_psiq_dsm_iv\", \"x2_dg_trs_psiq_dsm_iv\", \"x3_dg_trs_psiq_dsm_iv\", \"dg_trs_psiq_cie_10\", \"x2_dg_trs_psiq_cie_10\", \"x3_dg_trs_psiq_cie_10\", \"dg_trs_psiq_sub_dsm_iv\", \"x2_dg_trs_psiq_sub_dsm_iv\", \"x3_dg_trs_psiq_sub_dsm_iv\", \"dg_trs_psiq_sub_cie_10\", \"x2_dg_trs_psiq_sub_cie_10\", \"x3_dg_trs_psiq_sub_cie_10\", \"diag_pair_1\", \"diag_pair_2\", \"diag_pair_3\", \"keep_pair_2\", \"keep_pair_3\", \"x2_diag_filtered\", \"x2_subdiag_filtered\", \"x3_diag_filtered\", \"x3_subdiag_filtered\")|&gt; sample_n_with_seed(50, seed=2125)|&gt; data.frame()|&gt;  rio::export(\"_out/test_icd_10.xlsx\")\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\nsub_dsm_iv_to_cie_10_comp_table &lt;- rio::import(paste0(wdpath,\"cons/_input/sub_dsm_iv_to_cie_10_comp_table.xlsx\"))|&gt; \n  # minusc, we changed tildes\n  tidytable::mutate(across(where(is.character), \n                ~stringi::stri_trans_general(., \"Latin-ASCII\")))  \ninvisible(\"Is not very useful to replace DSM-IV for ICD-10 codes. We dont know the source of the homologation and 31 sub-diagnostics are not homologued\")\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ncat(\"displace empty diagnoses\\n\")\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\ninvisible(\"to avoid printing the output\")\n\n#SEP 2025\n#-Builds up to three “main::sub” strings (diag1–diag3) for ICD-10 using the already-filtered x2_/x3_ fields. Only build pairs when the main is informative (not NA, not “en estudio”/“sin trastorno”\n#-Collapses them into a single semicolon-separated field mod_psiq_cie_10.\n#-Cleans up temporary columns.\n\nexclude_main &lt;- c(\"en estudio\", \"sin trastorno\")\nexclude_sub  &lt;- c(\"en estudio\", \"sin trastorno\", \"NA_placeholder\")\nsub_for_pair &lt;- function(x) ifelse(is.na(x) | x %in% exclude_sub, \"NA\", x)\n\n# First operation for mod_psiq_cie_10\nSISTRAT23_c1_2010_2024_df_prev1n_mod1 &lt;- SISTRAT23_c1_2010_2024_df_prev1n_mod1|&gt;\n  mutate(\n    p1 = if_else(!is.na(dg_trs_psiq_cie_10) & !(dg_trs_psiq_cie_10 %in% exclude_main),\n                paste0(dg_trs_psiq_cie_10, \"::\", sub_for_pair(dg_trs_psiq_sub_cie_10)),\n                NA_character_),\n    p2 = if_else(!is.na(x2_diag_filtered) & !(x2_diag_filtered %in% exclude_main),\n                paste0(x2_diag_filtered, \"::\", sub_for_pair(x2_subdiag_filtered)),\n                NA_character_),\n    p3 = if_else(!is.na(x3_diag_filtered) & !(x3_diag_filtered %in% exclude_main),\n                paste0(x3_diag_filtered, \"::\", sub_for_pair(x3_subdiag_filtered)),\n                NA_character_)\n  )|&gt;\n  mutate(\n    mod_psiq_cie_10 = pmap_chr(\n      list(p1, p2, p3),\n      ~ {\n        tmp &lt;- c(...)\n        tmp &lt;- tmp[!is.na(tmp)]\n        if (length(tmp)) paste(tmp, collapse = \"; \") else NA_character_\n      }\n    )\n  )|&gt;\n  select(-p1, -p2, -p3)\n\n# Second operation for mod_psiq_dsm_iv\nSISTRAT23_c1_2010_2024_df_prev1n_mod1 &lt;- SISTRAT23_c1_2010_2024_df_prev1n_mod1|&gt;\n  mutate(\n    p1 = if_else(!is.na(dg_trs_psiq_dsm_iv) & !(dg_trs_psiq_dsm_iv %in% exclude_main),\n                paste0(dg_trs_psiq_dsm_iv, \"::\", sub_for_pair(dg_trs_psiq_sub_dsm_iv)),\n                NA_character_),\n    p2 = if_else(!is.na(dsm_x2_diag_filtered) & !(dsm_x2_diag_filtered %in% exclude_main),\n                paste0(x2_diag_filtered, \"::\", sub_for_pair(x2_subdiag_filtered)),\n                NA_character_),\n    p3 = if_else(!is.na(dsm_x3_diag_filtered) & !(dsm_x3_diag_filtered %in% exclude_main),\n                paste0(dsm_x3_diag_filtered, \"::\", sub_for_pair(dsm_x3_subdiag_filtered)),\n                NA_character_)\n  )|&gt;\n  mutate(\n    mod_psiq_dsm_iv = pmap_chr(\n      list(p1, p2, p3),\n      ~ {\n        tmp &lt;- c(...)\n        tmp &lt;- tmp[!is.na(tmp)]\n        if (length(tmp)) paste(tmp, collapse = \"; \") else NA_character_\n      }\n    )\n  )|&gt;\n  select(-p1, -p2, -p3)\n# Remove memory\ngc()\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\ncat(\"merge clean diagnoses\\n\")\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\n# Columns to scan\ncie_cols &lt;- c(\"dg_trs_psiq_cie_10\", \"x2_diag_filtered\", \"x3_diag_filtered\")\ndsm_cols &lt;- c(\"dg_trs_psiq_dsm_iv\", \"dsm_x2_diag_filtered\", \"dsm_x3_diag_filtered\")\nexclude_vals &lt;- c(\"en estudio\", \"sin trastorno\")\nnorm_diag &lt;- function(x) {\n  x &lt;- normalize_txt(x)                # your normalizer (lowercase, accents, trim)\n  ifelse(is.na(x) | trimws(x) == \"\", NA_character_, x)\n}\n\nSISTRAT23_c1_2010_2024_df_prev1n_mod2 &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1n_mod1|&gt;\n  # 0) normalize once to compare cleanly\n  tidytable::mutate(\n    across(tidytable::all_of(c(cie_cols, dsm_cols)), norm_diag)\n  )|&gt;\n  # 1) compute raw \"any\" signals\n  tidytable::mutate(\n    # ICD-10 signals\n    cie_any_valid   = rowSums(tidytable::across(\n      tidytable::all_of(cie_cols),\n      ~ tidytable::coalesce(!(.x %in% exclude_vals) & !is.na(.x), FALSE)\n    )) &gt; 0,\n    cie_any_instudy = rowSums(tidytable::across(\n      tidytable::all_of(cie_cols),\n      ~ tidytable::coalesce(.x == \"en estudio\", FALSE)\n    )) &gt; 0,\n\n    # DSM-IV signals\n    dsm_any_valid   = rowSums(tidytable::across(\n      tidytable::all_of(dsm_cols),\n      ~ tidytable::coalesce(!(.x %in% exclude_vals) & !is.na(.x), FALSE)\n    )) &gt; 0,\n    dsm_any_instudy = rowSums(tidytable::across(\n      tidytable::all_of(dsm_cols),\n      ~ tidytable::coalesce(.x == \"en estudio\", FALSE)\n    )) &gt; 0\n  )|&gt;\n  # 2) TRIAGE (mutually exclusive per system)\n  # TRIAGE (mutually exclusive):\n  # 1) If there is any valid dx -&gt; dg=TRUE, instudy=FALSE, no_dg=FALSE\n  # 2) else if any \"en estudio\" -&gt; instudy=TRUE, dg=FALSE, no_dg=FALSE\n  # 3) else -&gt; no_dg=TRUE, dg=FALSE, instudy=FALSE\n  tidytable::mutate(\n    # ICD-10\n    dg_psiq_cie_10_dg       = cie_any_valid,\n    dg_psiq_cie_10_instudy  = tidytable::if_else(cie_any_valid, FALSE, cie_any_instudy),\n    dg_psiq_cie_10_no_dg    = !(dg_psiq_cie_10_dg | dg_psiq_cie_10_instudy),\n\n    # DSM-IV\n    dg_psiq_dsm_iv_dg       = dsm_any_valid,\n    dg_psiq_dsm_iv_instudy  = tidytable::if_else(dsm_any_valid, FALSE, dsm_any_instudy),\n    dg_psiq_dsm_iv_no_dg    = !(dg_psiq_dsm_iv_dg | dg_psiq_dsm_iv_instudy)\n  )|&gt;\n  # 3) clean helpers\n  tidytable::select(-cie_any_valid, -cie_any_instudy, -dsm_any_valid, -dsm_any_instudy)|&gt;  \n  # drop helper columns only if you’re done with them\n  tidytable::select(-tidytable::contains(\"_pair_\"), -tidytable::ends_with(\"_filtered\"))|&gt;\n  # broad categories (normalize both)\n  tidytable::mutate(\n    cie10_main_norm = normalize_txt(dg_trs_psiq_cie_10),\n    dsmiv_main_norm = normalize_txt(dg_trs_psiq_dsm_iv),\n    cie10_broad_cat = tidytable::if_else(\n      !is.na(cie10_main_norm) & !(cie10_main_norm %in% exclude_vals),\n      icd10_broad(cie10_main_norm), NA_character_),\n    dsmiv_broad_cat = tidytable::if_else(\n      !is.na(dsmiv_main_norm) & !(dsmiv_main_norm %in% exclude_vals),\n      dsmiv_broad(dsmiv_main_norm), NA_character_)\n  )\n\n#Clean memory\ngc()\n\nSISTRAT23_c1_2010_2024_df_prev1n_mod2|&gt; select(-(1:30))|&gt; sample_n_with_seed(50, seed=2125)|&gt; data.frame()|&gt;  rio::export(\"_out/test_icd_10_2.xlsx\")\n\n\nCases with sub-diagnostics but without the main, DSM-IV: 0Cases with sub-diagnostics but without the main, second dg., DSM-IV: 0Cases with sub-diagnostics but without the main, third dg., DSM-IV: 3Cases with sub-diagnostics but without the main, ICD-10: 0Cases with sub-diagnostics but without the main, second dg., ICD-10: 0Cases with sub-diagnostics but without the main, third dg., ICD-10: 0Cases with sub-diagnostics but without the main, DSM-IV: 0Cases with sub-diagnostics but without the main, second dg., DSM-IV: 0Cases with sub-diagnostics but without the main, third dg., DSM-IV: 3Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), ICD-10: 3Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), second dg., ICD-10: 0Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), third dg., ICD-10: 0Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), DSM-IV: 2Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), second dg., DSM-IV: 0Cases with sub-diagnostics but without the main, or the main in study or with explicit non-classification (sin trastorno), third dg., DSM-IV: 4to standardize the main category with the DSM-IV subcategory\nto standardize the main category with the ICD-10 subcategory\nremove redundancies and duplicates in diagnoses\ndisplace empty diagnoses\n             used    (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    5214344   278.5    9072005   484.5    9072005   484.5\nVcells 1847332020 14094.1 2793554712 21313.2 1873238641 14291.7\nmerge clean diagnoses\n             used    (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    5215882   278.6    9072005   484.5    9072005   484.5\nVcells 1848927589 14106.2 2793554712 21313.2 1876015956 14312.9\n\n\n\n\n1.2. Ethnicity\nTo generate a more inclusive approach to ethnic identification and assuming that ethnicity is invariable per person, all ethnicity records associated with each individual were consolidated from the original dataset (SISTRAT23_c1_2010_2024_df), preserving the diversity of self-identifications through semicolon-separated values. We excluded non-reported ethnicity data (inclusive_historical_ethnicity_by_run). We also added ethnicity data from C2 to C6. This variable is called ethnicity_c1_c6_historic.\n\n\nCode\ninclusive_historical_ethnicity_by_run&lt;-\nSISTRAT23_c1_2010_2024_df|&gt; \n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia))|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt;filter(grepl(\";\",etnias_distinct))\n\nc2_inclusive_historical_ethnicity_by_run&lt;-\nCONS_C2_25_df|&gt; \n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia))|&gt; \n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n\nc3_inclusive_historical_ethnicity_by_run&lt;-\nCONS_C3_25_df|&gt; \n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia))|&gt; \n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n\nc4_inclusive_historical_ethnicity_by_run&lt;-\nCONS_C4_25_df|&gt; \n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia))|&gt; \n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n\nc5_inclusive_historical_ethnicity_by_run&lt;-\nCONS_C5_25_df|&gt; \n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia))|&gt; \n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n\nc6_inclusive_historical_ethnicity_by_run&lt;-\n  if(tidytable::filter(CONS_C6_25_df, pais_nacimiento==\"no pertenece\")|&gt; nrow()&gt;0){\nCONS_C6_25_df|&gt;\n  tidytable::filter(pais_nacimiento!=\"no pertenece\", !is.na(pais_nacimiento), pais_nacimiento!=\"chile\")|&gt;\n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(pais_nacimiento), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n  } else {\n  CONS_C6_25_df|&gt;\n  tidytable::filter(etnia!=\"no pertenece\", !is.na(etnia), etnia!=\"chile\")|&gt;\n  tidytable::group_by(HASH_KEY)|&gt;\n  tidytable::summarise(etnias_distinct = paste(unique(etnia), collapse = \"; \"))|&gt;\n  tidytable::ungroup() #|&gt; filter(grepl(\";\",etnias_distinct))\n}\n\nSISTRAT23_c1_2010_2024_df_prev1o&lt;-\nSISTRAT23_c1_2010_2024_df_prev1n_mod2|&gt; \n    (\\(df) {\n    cat(paste0(\"5.Number of cases after normalization of data editing: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5.Number of patients after normalization of data editing: \", formatC(nrow(distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    df\n  })()|&gt;\n  tidytable::left_join(inclusive_historical_ethnicity_by_run, by=\"hash_key\", multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive\"=\"etnias_distinct\")|&gt; \n  tidytable::left_join(c2_inclusive_historical_ethnicity_by_run, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive_c2\"=\"etnias_distinct\")|&gt; \n  tidytable::left_join(c3_inclusive_historical_ethnicity_by_run, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive_c3\"=\"etnias_distinct\")|&gt; \n  tidytable::left_join(c4_inclusive_historical_ethnicity_by_run, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive_c4\"=\"etnias_distinct\")|&gt; \n  tidytable::left_join(c5_inclusive_historical_ethnicity_by_run, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive_c5\"=\"etnias_distinct\")|&gt; \n  tidytable::left_join(c6_inclusive_historical_ethnicity_by_run, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"ethnicity_inclusive_c6\"=\"etnias_distinct\")|&gt; \n    (\\(df) {\n    cat(paste0(\"5. After normalization and data editing, obs.: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5. After normalization and data editing, RUNs: \", formatC(nrow(distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    if (nrow(df) &gt; nrow(SISTRAT23_c1_2010_2024_df_prev1n_mod2))stop(\"Error: Added treatment episodes in the process\")\n    df\n  })()\n\n\nSISTRAT23_c1_2010_2024_df_prev1o&lt;-\n# First, split each ethnicity column by \"; \", extract unique values, and combine into a new column\nSISTRAT23_c1_2010_2024_df_prev1o|&gt;\n  tidytable::rowwise()|&gt;\n  tidytable::mutate(\n    ethnicity_c1_c6_historic = {\n      # Get all columns starting with \"ethnicity_inclusive_\"\n      # Use the names of the dataframe directly\n      all_cols &lt;- names(SISTRAT23_c1_2010_2024_df_prev1o)\n      eth_cols &lt;- c(\"ethnicity_inclusive\", \n                   grep(\"^ethnicity_inclusive_\", all_cols, value = TRUE))\n      \n      # Extract values from these columns that exist\n      eth_values &lt;- c()\n      for (col in eth_cols) {\n        if (col %in% all_cols) {\n          val &lt;- get(col)\n          if (!is.na(val)) eth_values &lt;- c(eth_values, val)\n        }\n      }\n      \n      # Split each value by semicolon and flatten\n      if (length(eth_values) &gt; 0) {\n        all_eth &lt;- unlist(strsplit(eth_values, \"\\\\s*;\\\\s*\"))\n        paste(unique(all_eth), collapse = \"; \")\n      } else {\n        NA_character_\n      }\n    }\n  )|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::select(-any_of((tidytable::starts_with(\"ethnicity_inclusive\"))))\n\n\n5.Number of cases after normalization of data editing: 173,728 \n5.Number of patients after normalization of data editing: 121,299 \n5. After normalization and data editing, obs.: 173,728 \n5. After normalization and data editing, RUNs: 121,299"
  },
  {
    "objectID": "Duplicates_25_3.html#more-than-one-value-within-user-concerning-user-invariant-variables",
    "href": "Duplicates_25_3.html#more-than-one-value-within-user-concerning-user-invariant-variables",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "2. More than One Value within User, Concerning User-Invariant Variables",
    "text": "2. More than One Value within User, Concerning User-Invariant Variables\nWe need to obtain sociodemographic categories that are usually invariant for a given individual. Although this assumption is highly debatable, it allows us to detect inequalities stemming from these distinctions and their associations with social roles and stigmatization. For this purpose, we used external databases linked to SENDA agreements 2 through 6, together with hospitalization and Prosecutor’s Office databases.\n\n2.1. Sex\n\nSex (sexo_2) (patients= 562). Among patients with conflicting sex values, we assigned administrative sex = female if there was strong evidence such as participation in a women-only program or recorded pregnancy; otherwise we relied on concordant external records, and left cases ‘undetermined’ when evidence was inconclusive.\n\nThe primary approach differs depending on the availability of external data (count_not_na). The system first checks for clear agreement between internal (c1_perc_mujer) and external (perc_fem_ext) data. If both sources indicate a strong majority (&gt;50%) for the same sex, that sex is assigned (Cases 6.a.a.1, 6.a.a.2). In cases of disagreement or ambiguity (e.g., one source shows a tie at 50%, or sources point to different sexes), the decision relies on comparing the quantity of records in each source (total vs. count_not_na). Generally, the source with more records is given higher weight.\nWhen Only Internal Data is Available (count_not_na == 0), the decision relies solely on the internal data proportion (c1_perc_mujer) and the total number of internal records (total), and consider ties.\n\n\nCode\nwdpath&lt;-paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\nbpmn::bpmn(paste0(wdpath, \"cons/_input/diagram_inconsistent_sex.bpmn\"))\n\n\n\n\n\n\n\n\nCode\ninvalid_sex_by_patient&lt;-\nSISTRAT23_c1_2010_2024_df_prev1o|&gt;  group_by(hash_key)|&gt; summarise(sexo_por_hash = n_distinct(sexo), miss_sexo = sum(is.na(sexo), na.rm=T), tot_obs = n())|&gt; ungroup()|&gt; mutate(perc_miss_sexo = miss_sexo/tot_obs)|&gt; filter(sexo_por_hash&gt;1|perc_miss_sexo==1)|&gt; pull(hash_key)\n\ninvisible(\"======================================================\")  \ninvalid_sex_hashs_hosp&lt;-  \nHOSP_filter_df|&gt; \n    filter(run %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        message(paste0(\"Hospital, Entries: \", nrow(df)))\n        message(paste0(\"Hospital, RUNs: \", distinct(df, run)|&gt; nrow()))\n        df\n    })()|&gt;\n    group_by(run)|&gt;\n    summarise(femenino = sum(sexo==2, na.rm=T),masculino = sum(sexo==1, na.rm=T), total=n())|&gt;\n    ungroup()|&gt;\n    mutate(hosp_perc_fem = femenino / total, hosp_perc_masc = masculino / total)|&gt;\n  (\\(df) {\n    message(paste0(\"Unambiguous values: \", nrow(filter(df, hosp_perc_masc&gt;.5|hosp_perc_fem&gt;.5)|&gt;  distinct(run))))\n    select(df, -any_of(c(\"hosp_perc_masc\", \"hosp_perc_fem\", \"total\")))\n  })()\n\n\nHospital, Entries: 1773\n\n\nHospital, RUNs: 408\n\n\nUnambiguous values: 406\n\n\nCode\n# Hospital, Entries: 1656\n# Hospital, RUNs: 371\n#SEP 2025\n# Hospital, Entries: 1773\n# Hospital, RUNs: 408\n# Unambiguous values: 395\n\n\ninvisible(\"======================================================\")\ninvalid_sex_top&lt;-  \nSISTRAT23_top_2015_2024_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        message(paste0(\"TOP, Entries: \", nrow(df)))\n        message(paste0(\"TOP, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow()))\n        df\n    })()|&gt;\n    ungroup()|&gt; \n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"mujer\", na.rm=T),masculino = sum(sexo==\"hombre\", na.rm=T), total=n())|&gt;\n    ungroup()|&gt;\n    mutate(top_perc_fem = femenino / total, top_perc_masc = masculino / total)|&gt;\n  (\\(df) {\n    message(paste0(\"Unambiguous values: \", nrow(filter(df, top_perc_masc&gt;.5|top_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n    select(df, -any_of(c(\"top_perc_masc\", \"top_perc_fem\", \"total\")))\n  })()\n\n\nTOP, Entries: 1769\n\n\nTOP, RUNs: 354\n\n\nUnambiguous values: 325\n\n\nCode\n# TOP, Entries: 1518\n# TOP, RUNs: 310\n#SEP 2025\n# TOP, Entries: 1769\n# TOP, RUNs: 354\n\ninvisible(\"======================================================\")\ninvalid_sex_c2&lt;-  \nCONS_C2_25_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        message(paste0(\"C2, Entries: \", nrow(df)))\n        message(paste0(\"C2, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow()))\n        df\n    })()|&gt;  \n    ungroup()|&gt;\n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"femenino\", na.rm=T),masculino = sum(sexo==\"masculino\", na.rm=T), total=n())|&gt;\n    ungroup()|&gt;\n    mutate(c2_perc_fem = femenino / total, c2_perc_masc = masculino / total)|&gt;\n  (\\(df) {\n    message(paste0(\"Unambiguous values: \", nrow(filter(df, c2_perc_masc&gt;.5|c2_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n    select(df, -any_of(c(\"c2_perc_masc\", \"c2_perc_fem\", \"total\")))\n  })()\n\n\nC2, Entries: 2\n\n\nC2, RUNs: 2\n\n\nUnambiguous values: 2\n\n\nCode\n# C2, Entries: 0\n# C2, RUNs: 0\n# SEP 2025\n# C2, Entries: 2\n# C2, RUNs: 2\n# Unambiguous values: 2\n\ninvisible(\"======================================================\")\ninvalid_sex_c3&lt;-  \nCONS_C3_25_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        message(paste0(\"C3, Entries: \", nrow(df)))\n        message(paste0(\"C3, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow()))\n        df\n    })()|&gt;  \n    ungroup()|&gt;\n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"mujer\", na.rm=T),masculino = sum(sexo==\"hombre\", na.rm=T), total=n())|&gt;\n    ungroup()|&gt;\n    mutate(c3_perc_fem = femenino / total, c3_perc_masc = masculino / total)|&gt;\n  (\\(df) {\n    message(paste0(\"Unambiguous values: \", nrow(filter(df, c3_perc_masc&gt;.5|c3_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n    select(df, -any_of(c(\"c3_perc_masc\", \"c3_perc_fem\", \"total\")))\n  })()\n\n\nC3, Entries: 8\n\n\nC3, RUNs: 4\n\n\nUnambiguous values: 4\n\n\nCode\n# C3, Entries: 4\n# C3, RUNs: 4\n# SEP 2025\n# C3, Entries: 8\n# C3, RUNs: 4\n# Unambiguous values: 4\n\ninvisible(\"======================================================\")\ninvalid_sex_c4&lt;-  \nCONS_C4_25_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"C4, Entries: \", nrow(df))))\n        (message(paste0(\"C4, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    ungroup()|&gt;\n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"mujer\", na.rm=T),masculino = sum(sexo==\"hombre\", na.rm=T), total=n())|&gt;\n      mutate(c4_perc_fem = femenino / total, c4_perc_masc = masculino / total)|&gt;\n    (\\(df) {\n      message(paste0(\"Unambiguous values: \", nrow(filter(df, c4_perc_masc&gt;.5|c4_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n      select(df, -any_of(c(\"c4_perc_masc\", \"c4_perc_fem\", \"total\")))\n    })()\n\n\nC4, Entries: 4\n\n\nC4, RUNs: 2\n\n\nUnambiguous values: 2\n\n\nCode\n# C4, Entries: 2\n# C4, RUNs: 1\n#SEP2025\n# C4, Entries: 4\n# C4, RUNs: 2\n# Unambiguous values: 2\n\ninvisible(\"======================================================\")\ninvalid_sex_c5&lt;-  \nCONS_C5_25_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"C5, Entries: \", nrow(df))))\n        (message(paste0(\"C5, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;\n    ungroup()|&gt;\n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"femenino\", na.rm=T),masculino = sum(sexo==\"masculino\", na.rm=T), total=n())|&gt;\n      mutate(c5_perc_fem = femenino / total, c5_perc_masc = masculino / total)|&gt;\n    (\\(df) {\n      message(paste0(\"Unambiguous values: \", nrow(filter(df, c5_perc_masc&gt;.5|c5_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n      select(df, -any_of(c(\"c5_perc_masc\", \"c5_perc_fem\", \"total\")))\n    })()\n\n\nC5, Entries: 2\n\n\nC5, RUNs: 2\n\n\nUnambiguous values: 2\n\n\nCode\n# C5, Entries: 1\n# C5, RUNs: 1\n# SEP 2025\n# C5, Entries: 2\n# C5, RUNs: 2\n# Unambiguous values: 2\n\ninvisible(\"======================================================\")\ninvalid_sex_c6&lt;-  \nCONS_C6_25_df|&gt;\n    filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"C6, Entries: \", nrow(df))))\n        (message(paste0(\"C6, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;\n    ungroup()|&gt;\n    group_by(HASH_KEY)|&gt;\n    summarise(femenino = sum(sexo==\"mujer\", na.rm=T),masculino = sum(sexo==\"hombre\", na.rm=T), total=n())|&gt;\n      mutate(c6_perc_fem = femenino / total, c6_perc_masc = masculino / total)|&gt;\n    (\\(df) {\n      message(paste0(\"Unambiguous values: \", nrow(filter(df, c6_perc_masc&gt;.5|c6_perc_fem&gt;.5)|&gt;  distinct(HASH_KEY))))\n      select(df, -any_of(c(\"c6_perc_masc\", \"c6_perc_fem\", \"total\")))\n    })()\n\n\nC6, Entries: 4\n\n\nC6, RUNs: 4\n\n\nUnambiguous values: 4\n\n\nCode\n# C6, Entries: 1\n# C6, RUNs: 1\n# SEP 2025\n# C6, Entries: 4\n# C6, RUNs: 4\n# Unambiguous values: 4\n\ninvisible(\"======================================================\")\ninvalid_sex_mortality&lt;-  \nmortality|&gt;\n    filter(hashkey %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"Mortality, Entries: \", nrow(df))))\n        (message(paste0(\"Mortality, RUNs: \", distinct(df, hashkey)|&gt; nrow())))\n        df\n    })()|&gt;  \n    distinct(hashkey, sexo)|&gt;\n    ungroup()|&gt; \n  rename(\"m_sexo\"=\"sexo\")\n\n\nMortality, Entries: 14\n\n\nMortality, RUNs: 14\n\n\nCode\n# Mortality, Entries: 15\n# Mortality, RUNs: 15\n# SEP 2025\n# Mortality, Entries: 14\n# Mortality, RUNs: 14\n\ninvisible(\"======================================================\")\ninvalid_sex_may23_PO_office&lt;-  \nOLD_NEW_SISTRAT23_c1_2010_2024_df2|&gt;\n  tidylog::right_join(Base_fiscalia_v2, by=c(\"HASH_KEY.y\"=\"rut_enc_saf\"))|&gt; \n  select(\"HASH_KEY.x\",\"HASH_KEY.y\", \"sexo.y\")|&gt; \n  filter(HASH_KEY.x %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"PO Office, Entries: \", nrow(df))))\n        (message(paste0(\"PO Office, RUNs: \", distinct(df, HASH_KEY.x)|&gt; nrow())))\n        df\n    })()|&gt;  \n    group_by(HASH_KEY.x)|&gt;\n    summarise(femenino = sum(grepl(\"FEM\", sexo.y)),masculino = sum(grepl(\"MASC\", sexo.y)), total=n())|&gt; \n    ungroup()|&gt; \n    mutate(po_perc_fem = femenino / total, po_perc_masc = masculino / total)|&gt; \n    filter(po_perc_masc&gt;.5|po_perc_fem&gt;.5)|&gt;\n    (\\(df) {\n        (message(paste0(\"PO Office, only clear sexes, RUNs: \", distinct(df, HASH_KEY.x)|&gt; nrow())))\n        df\n    })()\n\n\nright_join: added 5 columns (sexo.x, fec_nacimiento_simple, sexo.y, avg_birth_date_po, n_dis_birth_date_po)\n\n\n        &gt; rows only in OLD_NEW_SISTRAT23_c1_20.. (   56,867)\n        &gt; rows only in Base_fiscalia_v2              30,256\n        &gt; matched rows                            1,164,249    (includes duplicates)\n        &gt;                                        ===========\n        &gt; rows total                              1,194,505\nPO Office, Entries: 18515\nPO Office, RUNs: 483\nPO Office, only clear sexes, RUNs: 480\n\n\nCode\n# PO Office, Entries: 18515\n# NULL\n# PO Office, RUNs: 483\n# NULL    \n# PO Office, only clear sexes, RUNs: 294\n# NULL\n\ninvisible(\"Given that there may be many sex records by hash, we got a percentage by HASH\")\ninvisible(\"We got only the unambiguous records\")\ninvalid_sex_may23_PO_office_alt&lt;-  \nOLD_NEW_SISTRAT23_c1_2010_2024_df2_alt|&gt;\n  #discard overlappings in HASHs\n  tidytable::filter(!HASH_KEY %in% OLD_NEW_SISTRAT23_c1_2010_2024_df2$HASH_KEY.x)|&gt; \n  #join with PO Office\n  tidylog::right_join(Base_fiscalia_v2, by=c(\"HASH_KEY_target\"=\"rut_enc_saf\"), multiple=\"first\")|&gt; \n  #select variables of interest\n  tidytable::select(\"HASH_KEY\",\"HASH_KEY_target\", \"sexo.y\",\"avg_birth_date_po\")|&gt; \n  #filter incosistent birth dates only\n  tidytable::filter(HASH_KEY %in% invalid_sex_by_patient)|&gt;\n    (\\(df) {\n        (message(paste0(\"PO Office (alt., Aug 2025, not deterministically matched), Entries: \", nrow(df))))\n        (message(paste0(\"PO Office (alt., Aug 2025, not deterministically matched), RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(femenino = sum(grepl(\"FEM\", sexo.y)),masculino = sum(grepl(\"MASC\", sexo.y)), total=n())|&gt; \n    tidytable::ungroup()|&gt; \n    tidytable::mutate(po_perc_fem = femenino / total, po_perc_masc = masculino / total)|&gt; \n    tidytable::filter(po_perc_masc&gt;.5|po_perc_fem&gt;.5)|&gt;\n    (\\(df) {\n        (message(paste0(\"PO Office (alt), only clear sexes, RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()\n\n\nright_join: added 5 columns (sexo.x, fec_nacimiento_simple, sexo.y, avg_birth_date_po, n_dis_birth_date_po) &gt; rows only in tidytable::filter(OLD_N.. ( 1,858) &gt; rows only in Base_fiscalia_v2 524,344 &gt; matched rows 30,694 (includes duplicates) &gt; ========= &gt; rows total 555,038 PO Office (alt., Aug 2025, not deterministically matched), Entries: 15\nPO Office (alt., Aug 2025, not deterministically matched), RUNs: 7\nPO Office (alt), only clear sexes, RUNs: 7\n\n\nCode\n# PO Office (alt., Aug 2025, not deterministically matched), Entries: 15\n# PO Office (alt., Aug 2025, not deterministically matched), RUNs: 7\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ninvalid_sex_ext_info&lt;-\nSISTRAT23_c1_2010_2024_df_prev1o|&gt;\n  tidytable::filter(hash_key %in% invalid_sex_by_patient)|&gt;\n  tidytable::select(hash_key, sexo)|&gt; \n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(c1_hombre = sum(grepl(\"hom\", sexo), na.rm=T),c1_mujer = sum(grepl(\"muj\", sexo), na.rm=T), total=n())|&gt; \n  tidytable::ungroup()|&gt; \n  tidytable::select(hash_key, c1_hombre, c1_mujer, total)|&gt; \n  tidylog::left_join(invalid_sex_hashs_hosp, by=c(\"hash_key\"=\"run\"), multiple=\"first\")|&gt;\n  tidytable::select(hash_key, c1_hombre, c1_mujer, total, femenino, masculino)|&gt;\n  tidytable::rename(\"h_masc\"=\"masculino\", \"h_fem\"=\"femenino\")|&gt; \n  tidylog::left_join(invalid_sex_top, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"top_masc\"=\"masculino\", \"top_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_c2, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"c2_masc\"=\"masculino\", \"c2_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_c3, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"c3_masc\"=\"masculino\", \"c3_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_c4, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"c4_masc\"=\"masculino\", \"c4_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_c5, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"c5_masc\"=\"masculino\", \"c5_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_c6, by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"c6_masc\"=\"masculino\", \"c6_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_mortality, by=c(\"hash_key\"=\"hashkey\"), multiple=\"first\")|&gt;\n  tidytable::mutate(mort_fem= if_else(m_sexo==2,1,0))|&gt;\n  tidytable::select(-m_sexo)|&gt; \n  tidylog::left_join(invalid_sex_may23_PO_office[,c(\"HASH_KEY.x\",\"femenino\", \"masculino\")], by=c(\"hash_key\"=\"HASH_KEY.x\"), multiple=\"first\")|&gt;\n  tidytable::rename(\"po_masc\"=\"masculino\", \"po_fem\"=\"femenino\")|&gt;\n  tidylog::left_join(invalid_sex_may23_PO_office_alt[,c(\"HASH_KEY\",\"femenino\", \"masculino\")], by=c(\"hash_key\"=\"HASH_KEY\"), multiple=\"first\")|&gt; \n  tidytable::select(-total)|&gt;\n  tidytable::rename(\"po_alt_masc\"=\"masculino\", \"po_alt_fem\"=\"femenino\")|&gt;\n      (\\(df) {\n        (message(paste0(\"Invalid sex that have at least one external sex, Entries: \", nrow(df))))\n        (message(paste0(\"Invalid sex that have at least one external sex, RUNs: \", tidytable::distinct(df, hash_key)|&gt; nrow())))\n        df\n    })()|&gt; \n  (\\(df) {\n    tidytable::mutate(df, count_not_na= rowSums(select(df, 2:ncol(df)), na.rm=T))#|&gt; \n    #tidytable::mutate(count_fem= rowSums(select(df, c(\"c1_mujer\", \"\", \"\", )))))|&gt;\n    #tidytable::mutate(count_masc= rowSums(!is.na(select(df, c(\"c1_mujer\", \"\", \"\", )))))\n  })()|&gt; \n  tidytable::select(hash_key, count_not_na, everything())|&gt; #count_fem, count_masc\n  tidytable::rowwise()|&gt;\n  tidytable::mutate(count_fem = sum(c1_mujer, c2_fem, c3_fem, c4_fem, c5_fem, c6_fem, po_fem, po_alt_fem, h_fem, top_fem, na.rm=T))|&gt;\n  tidytable::mutate(count_masc = sum(c1_hombre, c2_masc, c3_masc, c4_masc, c5_masc, c6_masc, po_masc, po_alt_masc, h_masc, top_masc, na.rm=T))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::mutate(perc_fem_ext= count_fem/count_not_na, perc_masc_ext= count_masc/count_not_na)\n\n\nleft_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::select(tidyt.. 154 &gt; rows only in invalid_sex_hashs_hosp ( 0) &gt; matched rows 408 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyt.. 208 &gt; rows only in invalid_sex_top ( 0) &gt; matched rows 354 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 560 &gt; rows only in invalid_sex_c2 ( 0) &gt; matched rows 2 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 558 &gt; rows only in invalid_sex_c3 ( 0) &gt; matched rows 4 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 560 &gt; rows only in invalid_sex_c4 ( 0) &gt; matched rows 2 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 560 &gt; rows only in invalid_sex_c5 ( 0) &gt; matched rows 2 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 558 &gt; rows only in invalid_sex_c6 ( 0) &gt; matched rows 4 &gt; ===== &gt; rows total 562 left_join: added one column (m_sexo) &gt; rows only in tidytable::rename(tidyl.. 548 &gt; rows only in invalid_sex_mortality ( 0) &gt; matched rows 14 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::select(tidyt.. 82 &gt; rows only in invalid_sex_may23_PO_of.. ( 0) &gt; matched rows 480 &gt; ===== &gt; rows total 562 left_join: added 2 columns (femenino, masculino) &gt; rows only in tidytable::rename(tidyl.. 555 &gt; rows only in invalid_sex_may23_PO_of.. ( 0) &gt; matched rows 7 &gt; ===== &gt; rows total 562 Invalid sex that have at least one external sex, Entries: 562\nInvalid sex that have at least one external sex, RUNs: 562\n\n\nCode\nstopifnot(invalid_sex_ext_info|&gt; group_by(hash_key)|&gt; summarise(n= n())|&gt; filter(n&gt;1)|&gt; nrow()==0)\n\ninvalid_sex_ext_info[, c(\"hash_key\", \"count_not_na\", \"count_fem\", \"count_masc\", \"perc_fem_ext\", \"perc_masc_ext\")]|&gt; mutate(hash_key= as.numeric(factor(hash_key)))|&gt;  rio::export(paste0(getwd(),\"/_out/invalid_sex_ext_info.xlsx\"))\n\nmessage(paste0(\"Inconsistent sex: \", length(invalid_sex_by_patient)))\n\n\nInconsistent sex: 562\n\n\nCode\nmessage(paste0(\"HASHs with predominant sex: \",\ninvalid_sex_ext_info[, c(\"hash_key\", \"count_not_na\", \"count_fem\", \"count_masc\", \"perc_fem_ext\", \"perc_masc_ext\")]|&gt; filter(perc_fem_ext&gt;0.5| perc_masc_ext&gt;.5)|&gt; nrow(),\" (\",\nscales::percent(invalid_sex_ext_info[, c(\"hash_key\", \"count_not_na\", \"count_fem\", \"count_masc\", \"perc_fem_ext\", \"perc_masc_ext\")]|&gt; filter(perc_fem_ext&gt;0.5| perc_masc_ext&gt;.5)|&gt; nrow()/length(invalid_sex_by_patient)),\")\"\n))\n\n\nHASHs with predominant sex: 542 (96%)\n\n\nCode\n#HASHs with predominant sex: 542 (96%)\n\n\ninvalid_sex_ext_info_nondet&lt;- \ninvalid_sex_ext_info[, c(\"hash_key\", \"count_not_na\", \"count_fem\", \"count_masc\", \"perc_fem_ext\", \"perc_masc_ext\")]|&gt; filter(perc_fem_ext&lt;=0.5& perc_masc_ext&lt;=.5)\n#00788d541c22e1960d361c4dc856d47d0b566be564313df58b32e1149d05ab31\n\ninvalid_sex_ext_info$decision &lt;- ifelse(invalid_sex_ext_info$perc_fem_ext &gt;.5 | invalid_sex_ext_info$perc_masc_ext &gt;.5, \"det\",\"nondet\")\n\n# Hospital, Entries: 1773\n# Hospital, RUNs: 408\n# Unambiguous values: 406\n# TOP, Entries: 1769\n# TOP, RUNs: 354\n# Unambiguous values: 325\n# C2, Entries: 2\n# C2, RUNs: 2\n# Unambiguous values: 2\n# C3, Entries: 8\n# C3, RUNs: 4\n# Unambiguous values: 4\n# C4, Entries: 4\n# C4, RUNs: 2\n# Unambiguous values: 2\n# C5, Entries: 2\n# C5, RUNs: 2\n# Unambiguous values: 2\n# C6, Entries: 4\n# C6, RUNs: 4\n# Unambiguous values: 4\n# Mortality, Entries: 14\n# Mortality, RUNs: 14\n\n\nFor patients whose sex remained undetermined (n= 20) after the initial classifications, we used pregnancy status and program type information to aid in the final determination. We also checked information of this kind in C1 to C6 databases (about pregnancy status). At last, we also used gender identity as a proxy.\nWhere conflicting sex values existed, we derived an administrative sex field using concordant external records; women-only program participation and recorded pregnancy were treated as strong evidence; ICD-10 sex-specific codes were considered supportive only. Records with inconclusive evidence remained ‘undetermined’. Gender identity was recorded separately and never used to overwrite administrative sex.\n\n\nCode\nc1_6_sex_ext_data&lt;-\n  #group by RUN and count records of pregnancy and type of program=women\ngroup_by(subset(SISTRAT23_c1_2010_2024_df_prev1o, hash_key %in% c(invalid_sex_ext_info_nondet$hash_key)), hash_key)|&gt; summarise(n_embarazada= sum(pregnant==\"si\", na.rm=T), n_emb_egr= sum(pregnant_disch==\"si\", na.rm=T), n_prog_mujeres= sum(grepl(\"^m\",plan_type),na.rm=T),.groups=\"drop_last\")|&gt;\n  #\n  mutate(pregnancy_c2= ifelse(hash_key %in% (filter(CONS_C2_25_df, a_setratadeunamujerembaraza==\"si\" | ha_estado_embarazada_egreso==\"si\")|&gt; pull(HASH_KEY)),1,0))|&gt;\n  #\n  mutate(pregnancy_c3= ifelse(hash_key %in% (filter(CONS_C3_25_df, se_trata_de_una_mujer_embarazada==\"si\" | ha_estado_embarazada_egreso==\"si\")|&gt; pull(HASH_KEY)),1,0))|&gt;\n  #\n  mutate(pregnancy_c4= ifelse(hash_key %in% (filter(CONS_C4_25_df, se_trata_de_una_mujer_embarazada==\"si\" | ha_estado_embarazada_egreso==\"si\")|&gt; pull(HASH_KEY)),1,0))|&gt;\n  #\n  mutate(pregnancy_c5= ifelse(hash_key %in% (filter(CONS_C5_25_df, embarazo==\"si\" | ha_estado_embarazada_egreso==\"si\")|&gt; pull(HASH_KEY)),1,0))|&gt;\n  #\n  mutate(pregnancy_c6= ifelse(hash_key %in% (filter(CONS_C6_25_df, se_trata_de_una_mujer_embarazada==\"si\" | ha_estado_embarazada_egreso==\"si\")|&gt; pull(HASH_KEY)),1,0))\n#c2 to c6 didnt add info\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\ninvalid_sex_ext_info_nondet[, c(\"hash_key\", \"count_not_na\", \"count_fem\", \"count_masc\", \"perc_fem_ext\", \"perc_masc_ext\")]|&gt;\nleft_join(c1_6_sex_ext_data, by=\"hash_key\")|&gt; \n  mutate(ext_data_woman= ifelse(n_embarazada&gt;0|n_emb_egr&gt;0|n_prog_mujeres&gt;0,1,0))|&gt; \n  mutate(ext_data_woman2= ifelse(pregnancy_c2&gt;0|pregnancy_c3&gt;0|pregnancy_c4&gt;0|pregnancy_c5&gt;0|pregnancy_c6&gt;0,1,0))|&gt; \n    (\\(df) {\n    message(paste0(\"Non-determined sex with pregnancy status: \", filter(df, ext_data_woman==1|ext_data_woman2==1)|&gt; nrow()))\n      filter(df, ext_data_woman==1|ext_data_woman2==1)|&gt; pull(hash_key) -&gt;&gt; hashs_invalid_sex_nondet_pregnant\n  })()\n\n\nNon-determined sex with pregnancy status: 4\n\n\nCode\n#Non-determined sex with pregnancy status: 4\n\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\ninfer_sex_icd10 &lt;- function(icd_codes) {\n  # Enhanced female-specific ICD-10 patterns\n  female_patterns &lt;- c(\n    \"^O\",              # Pregnancy/childbirth (O00-O99)\n    \"^C5[1-8]\",        # Female genital cancers (C51-C58)\n    \"^D0[6-7]\",        # CIS female genital (D06-D07)\n    \"^D2[4-8]\",        # Benign female neoplasms (D24-D28)\n    \"^N7[0-7]\",        # PID (N70-N77)\n    \"^N8[0-9]|^N9[0-8]\", # Non-inflammatory disorders (N80-N98)\n    \"^Q5[0-2]\",        # Congenital female anomalies (Q50-Q52)\n    \"^Z12\\\\.4\",        # Female cancer screening\n    \"^Z3[0-9]\"         # Reproductive health encounters (Z30-Z39)\n  )\n  \n  # Enhanced male-specific ICD-10 patterns\n  male_patterns &lt;- c(\n    \"^N[4-5][0-9]\",    # Male genital disorders (N40-N51)\n    \"^C6[0-3]\",        # Male genital cancers (C60-C63)\n    \"^D29\",            # Benign male neoplasms\n    \"^Q5[3-5]\",        # Congenital male anomalies (Q53-Q55)\n    \"^Z12\\\\.5\",        # Prostate screening\n    \"^Z41\\\\.2\",        # Vasectomy\n    \"^Z90\\\\.7\"         # Acquired absence of male genital\n  )\n  \n  # Check matches\n  is_female &lt;- map_lgl(icd_codes, ~ any(stringr::str_detect(.x, female_patterns)))\n  is_male &lt;- map_lgl(icd_codes, ~ any(stringr::str_detect(.x, male_patterns)))\n  \n  case_when(\n    is_female & !is_male ~ \"Female\",\n    is_male & !is_female ~ \"Male\",\n    is_female & is_male ~ \"Conflict\",\n    TRUE ~ \"nondet\"\n  )\n}\n\ncat(\"Classification based on ICD-10 diagnoses in hospitalizations\")\nHOSP_filter_df|&gt; \n  mutate(sex= infer_sex_icd10(diag1))|&gt; \n  janitor::tabyl(sex)\n#   sex      n     percent\n# Female  59075 0.252376375\n#  Male   2030 0.008672434\n# nondet 172970 0.738951191\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\nHOSP_filter_df|&gt; \n    filter(run %in% setdiff(invalid_sex_ext_info_nondet$hash_key, hashs_invalid_sex_nondet_pregnant))|&gt;\n    mutate(sex= infer_sex_icd10(diag1))|&gt; \n    (\\(df) {\n        (message(paste0(\"Hospital, suggested sex (w/o pregnancy status), Entries: \", nrow(df))))\n        (message(paste0(\"Hospital, suggested sex (w/o pregnancy status), RUNs: \", distinct(df, run)|&gt; nrow())))\n        df\n    })()|&gt;\n    select(run, sex)|&gt;\n    summarise(female_icd10= sum(sex==\"Female\", na.rm=T), male_icd10= sum(sex==\"Male\", na.rm=T), .by= run,.groups=\"drop_last\")|&gt;\n    filter(female_icd10&gt;0|male_icd10&gt;0)|&gt; \n      (\\(df) {\n    cat(paste0(\"Cases with undetermined sex, lacking pregnancy information, but having available hospitalization records with ICD-10 diagnoses: \", nrow(df),\"\\n\"))\n    filter(df, female_icd10&gt;0)|&gt; pull(run) -&gt;&gt; hashs_invalid_sex_woman_ask_non_pregnant_but_icd10\n    filter(df, male_icd10&gt;0)|&gt; pull(run) -&gt;&gt; hashs_invalid_sex_man_ask_not_pregnant_but_icd10\n  })()\n\n\nHospital, suggested sex (w/o pregnancy status), Entries: 16\n\n\nHospital, suggested sex (w/o pregnancy status), RUNs: 7\n\n\nCode\n# Hospital, suggested sex (w/o pregnancy status), Entries: 16\n# Hospital, suggested sex (w/o pregnancy status), RUNs: 7\n#Cases with undetermined sex, lacking pregnancy information, but having available hospitalization records with ICD-10 diagnoses: 4\n\n\nClassification based on ICD-10 diagnoses in hospitalizations    sex      n     percent\n Female  59075 0.252376375\n   Male   2030 0.008672434\n nondet 172970 0.738951191\nCases with undetermined sex, lacking pregnancy information, but having available hospitalization records with ICD-10 diagnoses: 4\n\n\nUndetermined sex classifications were retained, recognizing that for these records, inferring sex from external data might be unreliable.\nWe retained ‘undetermined’ where evidence was inconclusive (n= 12). Discrepancies may reflect data entry differences, changes in recorded gender identity, or linkage uncertainty. The remaining cases were classified using probabilistic imputation using missRanger (predictive mean matching).\n\n\nCode\n#for HASHs with undetermined sex, we used records\nc1_inconsistent_sex_genid_10_24&lt;- \nSISTRAT23_c1_2010_2024_df_prev1o|&gt; \n  filter(hash_key %in% setdiff(invalid_sex_ext_info_nondet$hash_key, c(hashs_invalid_sex_nondet_pregnant, hashs_invalid_sex_woman_ask_non_pregnant_but_icd10, hashs_invalid_sex_man_ask_not_pregnant_but_icd10)))|&gt; \n  select(hash_key, identidad_de_genero)|&gt; \n  group_by(hash_key)|&gt; \n  summarise(prop_fem_genid=sum(grepl(\"fem\",identidad_de_genero),na.rm=T)/sum(!is.na(identidad_de_genero), na.rm=T), prop_masc_genid=sum(grepl(\"masc\",identidad_de_genero),na.rm=T)/sum(!is.na(identidad_de_genero), na.rm=T))|&gt;\n  ungroup()|&gt; \n  mutate(prop_fem_genid= ifelse(is.nan(prop_fem_genid),0, prop_fem_genid), prop_masc_genid= ifelse(is.nan(prop_masc_genid),0, prop_masc_genid))|&gt; \n  filter(prop_fem_genid&gt;0.5|prop_masc_genid&gt;0.5)|&gt; \n    (\\(df) {\n        cat(paste0(\"Undetermined records in sex, with defined gender id: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n        df\n    })()\n  #Undetermined records in sex, with defined gender id: 6 \n\nmessage(paste0(\"Candidate hashs for probabilistic imputation: \",\nsetdiff(invalid_sex_ext_info_nondet$hash_key, \n    c(hashs_invalid_sex_nondet_pregnant, \n    hashs_invalid_sex_woman_ask_non_pregnant_but_icd10, \n    hashs_invalid_sex_man_ask_not_pregnant_but_icd10, \n    c1_inconsistent_sex_genid_10_24$hash_key))|&gt; \nlength()))\n\n\nCandidate hashs for probabilistic imputation: 6\n\n\nCode\n#Candidate hashs for probabilistic imputation: 6\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n# 0.a) Pick holdout rows (exclude your truncated set)\nset.seed(2125)\nholdout_sex_rn &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1o|&gt;\n  #sep 2025, dont add imputations here, because this are the \"clean\" candidates for accuracy indexes\n  #corrected to get processed days in treatment also valid\n  tidytable::filter(!is.na(sexo), \n  !hash_key %in% setdiff(invalid_sex_ext_info_nondet$hash_key, c(hashs_invalid_sex_nondet_pregnant, hashs_invalid_sex_woman_ask_non_pregnant_but_icd10, hashs_invalid_sex_man_ask_not_pregnant_but_icd10, c1_inconsistent_sex_genid_10_24$hash_key)))|&gt;\n  tidytable::slice_sample(n = 1000)|&gt;\n  tidytable::pull(rn)\n\n# 0.b) Build mr_in and MASK the holdout on the log target\nmr_in_sex &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1o|&gt;\n  tidytable::mutate(sexo_imp= ifelse(hash_key %in% \n        setdiff(invalid_sex_ext_info_nondet$hash_key, \n        c(hashs_invalid_sex_nondet_pregnant, \n          hashs_invalid_sex_woman_ask_non_pregnant_but_icd10, \n          hashs_invalid_sex_man_ask_not_pregnant_but_icd10, \n          c1_inconsistent_sex_genid_10_24$hash_key)),NA, sexo))|&gt;\n  tidytable::mutate(sexo_imp= ifelse(rn %in% holdout_sex_rn, NA, sexo_imp))\n\n# 0.c) Impute through missranger\nset.seed(2125)\nmr_fit_sex &lt;- missRanger::missRanger(\n  data      = mr_in_sex,\n  formula   = sexo_imp ~ . -rn -hash_key -sexo,\n  pmm.k     = 9,\n  num.trees = 2e2,#3e3\n  keep_forests = F,#too heavy\n  maxiter   = 5,\n  mtry      = function(p) max(5L, floor(p/3L)),\n  seed      = 2125,\n  returnOOB = TRUE,\n  verbose   = 1\n)\n\n\nMissing value imputation by random forests\n\n\nCode\n# Estimated remaining time: 51 seconds.\n\n# 0.d) Predictive performance: OOB\noob_err_sex &lt;- attr(mr_fit_sex, \"oob\")[[\"sexo_imp\"]]   # misclassification rate\n#misclassification error rate\ncat(sprintf(\"OOB accuracy (sexo_imp): %.1f%%\\n\", 100 * (1 - oob_err_sex)))\n#OOB accuracy (sexo_imp): 89.4%\n\neval_tbl_sex &lt;- mr_fit_sex|&gt;\n  dplyr::filter(rn %in% holdout_sex_rn)|&gt;\n  dplyr::mutate(\n    sexo     = factor(sexo, levels = c(\"hombre\",\"mujer\")),\n    sexo_imp = factor(sexo_imp, levels = c(\"hombre\",\"mujer\"))\n  )\n\n# 0.e) Holdout\n# --- Holdout evaluation (days) ---\neval_tbl_sex &lt;-\n  mr_fit_sex|&gt;\n  filter(rn %in% holdout_sex_rn)|&gt; \n  mutate(\n  sexo      = factor(sexo, levels = c(\"hombre\",\"mujer\"), labels = c(\"hombre\",\"mujer\")),\n  sexo_imp  = factor(sexo_imp, levels = c(1,2), labels = c(\"hombre\",\"mujer\"))\n)\n\ntab &lt;- table(truth = eval_tbl_sex$sexo, pred = eval_tbl_sex$sexo_imp)\n\n# 0.f) Metrics and perfomance\nmetrics_from_table &lt;- function(tab) {\n  TP &lt;- tab[\"mujer\",\"mujer\"]\n  FN &lt;- tab[\"mujer\",\"hombre\"]\n  FP &lt;- tab[\"hombre\",\"mujer\"]\n  TN &lt;- tab[\"hombre\",\"hombre\"]\n  N  &lt;- sum(tab)\n  \n  accuracy &lt;- (TP + TN) / N\n  sensitivity &lt;- if ((TP+FN)&gt;0) TP / (TP + FN) else NA_real_\n  specificity &lt;- if ((TN+FP)&gt;0) TN / (TN + FP) else NA_real_\n  precision   &lt;- if ((TP+FP)&gt;0) TP / (TP + FP) else NA_real_\n  f1 &lt;- if (!is.na(precision) && !is.na(sensitivity) && (precision + sensitivity)&gt;0) 2*precision*sensitivity/(precision+sensitivity) else NA_real_\n  balanced &lt;- mean(c(sensitivity, specificity), na.rm = TRUE)\n  \n  c(accuracy = accuracy, sensitivity = sensitivity, specificity = specificity,\n    precision = precision, F1 = f1, balanced_accuracy = balanced)\n}\n\nset.seed(2125)\nR &lt;- 2000\nboots &lt;- replicate(R, {\n  samp &lt;- eval_tbl_sex[sample.int(nrow(eval_tbl_sex), replace = TRUE), , drop = FALSE]\n  tab &lt;- table(truth = samp$sexo, pred = samp$sexo_imp)\n  metrics_from_table(tab)\n}, simplify = \"array\")\n\n# 95% bootstrap CIs (percentile)\nci &lt;- apply(boots, 1, function(x) quantile(x, probs = c(0.025, 0.975), na.rm = TRUE))\nres &lt;- tibble::tibble(\n  metric = names(metrics_from_table(table(truth = eval_tbl_sex$sexo, pred = eval_tbl_sex$sexo_imp))),\n  estimate = unname(metrics_from_table(table(truth = eval_tbl_sex$sexo, pred = eval_tbl_sex$sexo_imp))),\n  ci_lower = ci[1,],\n  ci_upper = ci[2,]\n)\n\nknitr::kable(res, \"markdown\", caption= \"Predictive performance\", digits=2)\n#Reasonable discrimination but relatively low positive predictive value for the mujer class.\n\nprob_imputation_sex&lt;- \nmr_fit_sex|&gt;\nfilter(hash_key %in% setdiff(invalid_sex_ext_info_nondet$hash_key, \n      c(hashs_invalid_sex_nondet_pregnant, \n        hashs_invalid_sex_woman_ask_non_pregnant_but_icd10, \n        hashs_invalid_sex_man_ask_not_pregnant_but_icd10, \n        c1_inconsistent_sex_genid_10_24$hash_key)))|&gt;\ngroup_by(hash_key)|&gt; \nsummarise(perc_fem_imp= sum(sexo_imp==2, na.rm=T)/ n())|&gt;\nungroup()|&gt;\nfilter(!perc_fem_imp==.5)|&gt;\nmutate(sexo_imp= ifelse(perc_fem_imp&gt;.5, \"mujer\", \"hombre\"))\n\n#Remove imputation databases\nrm(list = intersect(ls(), c(\"mr_fit_sex\",\"mr_fit\")))\n\n\nUndetermined records in sex, with defined gender id: 6 \n\nSkip constant features for imputation:  nombre_usuario\nVariables to impute:        sexo_imp\nVariables used to impute:   TABLE, codigo_identificacion, tipo_de_programa, tipo_de_plan, senda, n_meses_en_tratamiento, n_meses_en_senda, origen_de_ingreso, nacionalidad, estado_conyugal, numero_de_hijos, condicion_ocupacional, con_quien_vive, sustancia_principal, edad_inicio_sustancia_principal, via_administracion_sustancia_principal, diagnostico_trs_consumo_sustancia, fecha_ingreso_a_tratamiento, TABLE_rec, birth_date, adm_date, OBS, adm_date_num, adm_date_rec, adm_date_rec_num, adm_age, birth_date_rec, adm_age_rec, plan_type, dit_earl_drop, tr_compliance, occupation_condition, sub_dep_icd10_status, adm_motive, macrozone_center, yr_block, dit_earl_drop_rec0, tr_compliance_rec0, tr_compliance_rec, tr_compliance_rec5, adm_date_rec2, tr_compliance_rec6, adm_age_rec2, adm_date_num_rec2, dit_earl_drop_rec, adm_age_rec3, dg_psiq_cie_10_dg, dg_psiq_cie_10_instudy, dg_psiq_cie_10_no_dg, dg_psiq_dsm_iv_dg, dg_psiq_dsm_iv_instudy, dg_psiq_dsm_iv_no_dg, sexo_imp\n\niter 1 \n\n  |                                                                            \n  |                                                                      |   0%Growing trees.. Progress: 40%. Estimated remaining time: 47 seconds.\nGrowing trees.. Progress: 78%. Estimated remaining time: 17 seconds.\n\n  |                                                                            \n  |======================================================================| 100%\niter 2 \n\n  |                                                                            \n  |                                                                      |   0%Growing trees.. Progress: 39%. Estimated remaining time: 49 seconds.\nGrowing trees.. Progress: 79%. Estimated remaining time: 16 seconds.\n\n  |                                                                            \n  |======================================================================| 100%\niter 3 \n\n  |                                                                            \n  |                                                                      |   0%Growing trees.. Progress: 40%. Estimated remaining time: 46 seconds.\nGrowing trees.. Progress: 81%. Estimated remaining time: 15 seconds.\n\n  |                                                                            \n  |======================================================================| 100%\nOOB accuracy (sexo_imp): 89.3%\n\n\n\nPredictive performance\n\n\nmetric\nestimate\nci_lower\nci_upper\n\n\n\n\naccuracy\n0.75\n0.72\n0.77\n\n\nsensitivity\n0.65\n0.59\n0.70\n\n\nspecificity\n0.78\n0.75\n0.81\n\n\nprecision\n0.50\n0.45\n0.56\n\n\nF1\n0.57\n0.52\n0.62\n\n\nbalanced_accuracy\n0.71\n0.68\n0.75\n\n\n\n\n\nThe imputation obtained a reasonable discrimination but relatively low positive predictive value for the “mujer” category. However, we must consider that the target of imputed values are only 4 HASHes.\n\n\nCode\n# 1) Key sets by source (female / male) ---\next_fem_keys &lt;- subset(invalid_sex_ext_info, decision == \"det\"& perc_fem_ext&gt;.5)$hash_key\next_masc_keys &lt;- subset(invalid_sex_ext_info, decision == \"det\" & perc_masc_ext&gt;.5)$hash_key  \n\npreg_keys      &lt;- hashs_invalid_sex_nondet_pregnant\n\nicd10_fem_keys &lt;- hashs_invalid_sex_woman_ask_non_pregnant_but_icd10\nicd10_masc_keys&lt;- hashs_invalid_sex_man_ask_not_pregnant_but_icd10  # hombre\n\ngenid_masc_keys &lt;- subset(c1_inconsistent_sex_genid_10_24, prop_masc_genid &gt; .5)$hash_key\ngenid_fem_keys  &lt;- subset(c1_inconsistent_sex_genid_10_24, prop_fem_genid &gt; .5)$hash_key\n\nimp_masc_keys &lt;- subset(prob_imputation_sex, sexo_imp == \"hombre\")$hash_key\nimp_fem_keys  &lt;- subset(prob_imputation_sex, sexo_imp == \"mujer\")$hash_key\n\n# 2) Integrate into main table: create sex_rec + annotate OBS ---\nSISTRAT23_c1_2010_2024_df_prev1p &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1o|&gt;\n  (\\(df) {\n    cat(paste0(\"6.Number of cases before resolving inconsistencies in sex: \",\n               formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"6.Number of patients before resolving inconsistencies in sex: \",\n               formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    df\n  })()|&gt;\n  # Start with original value; OBS as character to safely append text\n  tidytable::mutate(\n    sex_rec = sexo,\n    OBS     = as.character(OBS)\n  )|&gt;\n  # 6.1 External majority vote (C1–C6/Hosp/Mort/PO/Top)\n  (\\(df) {\n    cond_ext &lt;- (df$hash_key %in% c(ext_fem_keys, ext_masc_keys))\n      tidytable::mutate(df,\n        sex_rec = tidytable::case_when(\n          cond_ext & hash_key %in% ext_fem_keys  ~ \"mujer\",\n          cond_ext & hash_key %in% ext_masc_keys ~ \"hombre\",\n          TRUE ~ sex_rec\n        ),\n        OBS = ifelse(cond_ext,\n                     paste0(dplyr::coalesce(OBS, \"\"),\n                            \";6.1.sex_rec via external majority\"),OBS))\n  })()|&gt;\n  # 6.2 Pregnancy signals → mujer\n  (\\(df) {\n    cond_preg &lt;- (df$hash_key %in% preg_keys)\n      tidytable::mutate(df,\n        sex_rec = ifelse(cond_preg, \"mujer\", sex_rec),\n        OBS     = ifelse(cond_preg,\n                         paste0(dplyr::coalesce(OBS, \"\"),\n                                \";6.2.sex_rec via pregnancy\"),OBS))\n  })()|&gt;\n  # 6.3 ICD-10 inference from hospitalizations\n  (\\(df) {\n    cond_icd &lt;- (df$hash_key %in% c(icd10_fem_keys, icd10_masc_keys))\n      tidytable::mutate(df,\n        sex_rec = dplyr::case_when(\n          cond_icd & hash_key %in% icd10_fem_keys   ~ \"mujer\",\n          cond_icd & hash_key %in% icd10_masc_keys  ~ \"hombre\",\n          TRUE ~ sex_rec\n        ),\n        OBS = ifelse(cond_icd,\n                     paste0(dplyr::coalesce(OBS, \"\"),\n                            \";6.3.sex_rec via ICD-10 (hospitalization)\"),OBS))\n  })()|&gt;\n  # 6.4 Gender identity majority\n  (\\(df) {\n    cond_genid &lt;- (df$hash_key %in% c(genid_fem_keys, genid_masc_keys))\n      tidytable::mutate(df,\n        sex_rec = dplyr::case_when(\n          cond_genid & hash_key %in% genid_fem_keys   ~ \"mujer\",\n          cond_genid & hash_key %in% genid_masc_keys  ~ \"hombre\",\n          TRUE ~ sex_rec\n        ),\n        OBS = ifelse(cond_genid,\n                     paste0(dplyr::coalesce(OBS, \"\"),\n                            \";6.4.sex_rec via gender identity\"),OBS))\n  })()|&gt;\n  # 6.5 Probabilistic imputation (leftovers only)\n  (\\(df) {\n    cond_imp &lt;- (df$hash_key %in% c(imp_fem_keys, imp_masc_keys))\n      tidytable::mutate(df,\n        sex_rec = dplyr::case_when(\n          cond_imp & hash_key %in% imp_fem_keys   ~ \"mujer\",\n          cond_imp & hash_key %in% imp_masc_keys  ~ \"hombre\",\n          TRUE ~ sex_rec\n        ),\n        OBS = ifelse(cond_imp,\n                     paste0(dplyr::coalesce(OBS, \"\"),\n                            \";6.5.sex_rec via probabilistic imputation\"),OBS))\n  })()|&gt;\n  # Final sanity log\n  (\\(df) {\n    cat(paste0(\"6. After resolving inconsistencies in sex, obs.: \",\n               formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"6. After resolving inconsistencies in sex, RUNs: \",\n               formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    if (nrow(df) &gt; nrow(SISTRAT23_c1_2010_2024_df_prev1o))\n      stop(\"Error: Added treatment episodes in the process\")\n    df\n  })()\n\nSISTRAT23_c1_2010_2024_df_prev1p$OBS &lt;- gsub(\";;+\", \";\", SISTRAT23_c1_2010_2024_df_prev1p$OBS)\n\n\n6.Number of cases before resolving inconsistencies in sex: 173,728 \n6.Number of patients before resolving inconsistencies in sex: 121,299 \n6. After resolving inconsistencies in sex, obs.: 173,728 \n6. After resolving inconsistencies in sex, RUNs: 121,299 \n\n\nThe database resulting from these changes was named SISTRAT23_c1_2010_2024_df_prev1p, and the new variable containing the recoded sex information is called sex_rec.\n\n\n2.2. Nationality\n\nNationality (nacionalidad) (n= 162). We created a column called nationality_cons showing what those inconsistent nationalities are for each affected patient.\n\n\n\nCode\ninvisible(\"no tiene perdidos, la mayoría son de chile.  Por tanto, si es distinto a Chile, reemplazarlo\")\n\ninvalid_nationality_by_patient&lt;-\nSISTRAT23_c1_2010_2024_df_prev1p|&gt;  group_by(hash_key)|&gt; summarise(nacionalidades_por_hash = n_distinct(nacionalidad), distinto_chile = sum(nacionalidad!=\"chile\", na.rm=T), tot_obs = n())|&gt; ungroup()|&gt; mutate(perc_extranjero = distinto_chile/tot_obs)|&gt; filter(nacionalidades_por_hash&gt;1)|&gt; pull(hash_key)\n\nmultiple_nationalities&lt;- \nSISTRAT23_c1_2010_2024_df_prev1p|&gt; select(hash_key, nacionalidad)|&gt;  filter(hash_key %in% invalid_nationality_by_patient)|&gt; \n  summarise(nacionalidad_distinct = paste(sort(unique(nacionalidad)), collapse = \"; \"), .by=\"hash_key\")|&gt;\n  ungroup()\n\n\n\n\n2.3. Starting substance\nStarting Substance (first_sub_used) (n= 16,106). For users that had only two treatments but a different starting substance, or in cases or users that had ties within most recent database or within the most recent value, we added a second and a third variable called sus_ini_2 and sus_ini_3 that contains a second starting substance. We also made sus_ini_mvv for starting substances of the most vulnerable, or higher-risk (operational ranking in our context) value reported (Cocaine paste base &gt; Cocaine hydrochloride &gt; Alcohol &gt; Marijuana &gt; Other).\n\n\nCode\ninvalid_start_subs_hash_key&lt;- \n  SISTRAT23_c1_2010_2024_df_prev1p|&gt; summarise(sus_ini_por_hash = n_distinct(first_sub_used),.by=hash_key, .groups=\"drop_last\")|&gt; filter(sus_ini_por_hash&gt;1)|&gt; pull(hash_key)\n\nmessage(paste0(\"Patients with more than one starting substance: \",length(invalid_start_subs_hash_key)))\n\n\nPatients with more than one starting substance: 16106\n\n\nCode\n#Patients with more than one starting substance: 16106\n\ncat(\"Number of distinct starting substances\\n\")\nSISTRAT23_c1_2010_2024_df_prev1p|&gt; summarise(sus_ini_por_hash = n_distinct(first_sub_used),.by=hash_key, .groups=\"drop_last\")|&gt; filter(sus_ini_por_hash&gt;1)|&gt; pull(sus_ini_por_hash)|&gt; summary()\n#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 2.000   2.000   2.000   2.147   2.000   5.00\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \ninvisible(\"======================================================\")\ninvalid_start_subs_c2&lt;-  \n    CONS_C2_25_df|&gt;\n    tidytable::filter(HASH_KEY %in% invalid_start_subs_hash_key)|&gt;\n    (\\(df) {\n        (message(paste0(\"C2, Entries: \", nrow(df))))\n        (message(paste0(\"C2, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::select(HASH_KEY, sustancia_de_inicio)|&gt;\n    tidytable::rename(\"start_sub\"=2)|&gt; \n    tidytable::mutate(start_sub= tidytable::case_when(grepl(\"coca\",start_sub)~ \"cocaine powder\", grepl(\"crack|pasta\",start_sub)~ \"cocaine paste\", grepl(\"marihuana\",start_sub)~ \"marijuana\", grepl(\"anfeta|extasis|fenil|estimul\",start_sub)~ \"amphetamine-type stimulants\", grepl(\"alucin|lsd|hongos\",start_sub)~ \"hallucinogens\", grepl(\"opi|hero|metadona\",start_sub)~ \"opioids\", grepl(\"sedante|hipnotico|tranquiliz\",start_sub)~ \"tranquilizers/hypnotics\", grepl(\"inhalable\",start_sub)~ \"inhalants\", grepl(\"esteroid|otros\",start_sub)~\"others\", grepl(\"especif|cip-crc|sin consumo\",start_sub)~ NA_character_, TRUE~start_sub))|&gt;\n    tidytable::ungroup()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(\n    alcohol                     = sum(start_sub == \"alcohol\", na.rm=T),\n    amphetamine_type_stimulants = sum(start_sub == \"amphetamine-type stimulants\", na.rm=T),\n    cocaine_paste               = sum(start_sub == \"cocaine paste\", na.rm=T),\n    cocaine_powder              = sum(start_sub == \"cocaine powder\", na.rm=T),\n    hallucinogens               = sum(start_sub == \"hallucinogens\", na.rm=T),\n    inhalants                   = sum(start_sub == \"inhalants\", na.rm=T),\n    marijuana                   = sum(start_sub == \"marijuana\", na.rm=T),\n    opioids                     = sum(start_sub == \"opioids\", na.rm=T),\n    others                      = sum(start_sub == \"others\", na.rm=T),\n    tranquilizers_hypnotics     = sum(start_sub == \"tranquilizers/hypnotics\", na.rm=T),\n    total                       = n(),       # total records per hash_key\n    .groups = \"drop\"\n  )\n\n\nC2, Entries: 253\n\n\nC2, RUNs: 112\n\n\nCode\ninvisible(\"======================================================\")\ninvalid_start_subs_c3&lt;-  \n    CONS_C3_25_df|&gt;\n    tidytable::filter(HASH_KEY %in% invalid_start_subs_hash_key)|&gt;\n    (\\(df) {\n        (message(paste0(\"C3, Entries: \", nrow(df))))\n        (message(paste0(\"C3, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::select(HASH_KEY, sustancia_de_inicio)|&gt;\n    tidytable::rename(\"start_sub\"=2)|&gt; \n    tidytable::mutate(start_sub= tidytable::case_when(grepl(\"coca\",start_sub)~ \"cocaine powder\", grepl(\"crack|pasta\",start_sub)~ \"cocaine paste\", grepl(\"marihuana\",start_sub)~ \"marijuana\", grepl(\"anfeta|extasis|fenil|estimul\",start_sub)~ \"amphetamine-type stimulants\", grepl(\"alucin|lsd|hongos\",start_sub)~ \"hallucinogens\", grepl(\"opi|hero|metadona\",start_sub)~ \"opioids\", grepl(\"sedante|hipnotico|tranquiliz\",start_sub)~ \"tranquilizers/hypnotics\", grepl(\"inhalable\",start_sub)~ \"inhalants\", grepl(\"esteroid|otros\",start_sub)~\"others\", grepl(\"especif|cip-crc|sin consumo\",start_sub)~ NA_character_, TRUE~start_sub))|&gt;\n    tidytable::ungroup()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(\n    alcohol                     = sum(start_sub == \"alcohol\", na.rm=T),\n    amphetamine_type_stimulants = sum(start_sub == \"amphetamine-type stimulants\", na.rm=T),\n    cocaine_paste               = sum(start_sub == \"cocaine paste\", na.rm=T),\n    cocaine_powder              = sum(start_sub == \"cocaine powder\", na.rm=T),\n    hallucinogens               = sum(start_sub == \"hallucinogens\", na.rm=T),\n    inhalants                   = sum(start_sub == \"inhalants\", na.rm=T),\n    marijuana                   = sum(start_sub == \"marijuana\", na.rm=T),\n    opioids                     = sum(start_sub == \"opioids\", na.rm=T),\n    others                      = sum(start_sub == \"others\", na.rm=T),\n    tranquilizers_hypnotics     = sum(start_sub == \"tranquilizers/hypnotics\", na.rm=T),\n    total                       = n(),       # total records per hash_key\n    .groups = \"drop\"\n  )\n\n\nC3, Entries: 288\n\n\nC3, RUNs: 187\n\n\nCode\ninvisible(\"======================================================\")\ninvalid_start_subs_c4&lt;-  \n    CONS_C4_25_df|&gt;\n    tidytable::filter(HASH_KEY %in% invalid_start_subs_hash_key)|&gt;\n    (\\(df) {\n        (message(paste0(\"C4, Entries: \", nrow(df))))\n        (message(paste0(\"C4, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::select(HASH_KEY, sustancia_de_inicio)|&gt;\n    tidytable::rename(\"start_sub\"=2)|&gt; \n    tidytable::mutate(start_sub= tidytable::case_when(grepl(\"coca\",start_sub)~ \"cocaine powder\", grepl(\"crack|pasta\",start_sub)~ \"cocaine paste\", grepl(\"marihuana\",start_sub)~ \"marijuana\", grepl(\"anfeta|extasis|fenil|estimul\",start_sub)~ \"amphetamine-type stimulants\", grepl(\"alucin|lsd|hongos\",start_sub)~ \"hallucinogens\", grepl(\"opi|hero|metadona\",start_sub)~ \"opioids\", grepl(\"sedante|hipnotico|tranquiliz\",start_sub)~ \"tranquilizers/hypnotics\", grepl(\"inhalable\",start_sub)~ \"inhalants\", grepl(\"esteroid|otros\",start_sub)~\"others\", grepl(\"especif|cip-crc|sin consumo\",start_sub)~ NA_character_, TRUE~start_sub))|&gt;\n    tidytable::ungroup()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(\n    alcohol                     = sum(start_sub == \"alcohol\", na.rm=T),\n    amphetamine_type_stimulants = sum(start_sub == \"amphetamine-type stimulants\", na.rm=T),\n    cocaine_paste               = sum(start_sub == \"cocaine paste\", na.rm=T),\n    cocaine_powder              = sum(start_sub == \"cocaine powder\", na.rm=T),\n    hallucinogens               = sum(start_sub == \"hallucinogens\", na.rm=T),\n    inhalants                   = sum(start_sub == \"inhalants\", na.rm=T),\n    marijuana                   = sum(start_sub == \"marijuana\", na.rm=T),\n    opioids                     = sum(start_sub == \"opioids\", na.rm=T),\n    others                      = sum(start_sub == \"others\", na.rm=T),\n    tranquilizers_hypnotics     = sum(start_sub == \"tranquilizers/hypnotics\", na.rm=T),\n    total                       = n(),       # total records per hash_key\n    .groups = \"drop\"\n  )\n\n\nC4, Entries: 149\n\n\nC4, RUNs: 106\n\n\nCode\ninvisible(\"======================================================\")\ninvalid_start_subs_c5&lt;-  \n    CONS_C5_25_df|&gt;\n    tidytable::filter(HASH_KEY %in% invalid_start_subs_hash_key)|&gt;\n    (\\(df) {\n        (message(paste0(\"C5, Entries: \", nrow(df))))\n        (message(paste0(\"C5, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::select(HASH_KEY, sustancia_inicial)|&gt;\n    tidytable::rename(\"start_sub\"=2)|&gt; \n    tidytable::mutate(start_sub= tidytable::case_when(grepl(\"coca\",start_sub)~ \"cocaine powder\", grepl(\"crack|pasta\",start_sub)~ \"cocaine paste\", grepl(\"marihuana\",start_sub)~ \"marijuana\", grepl(\"anfeta|extasis|fenil|estimul\",start_sub)~ \"amphetamine-type stimulants\", grepl(\"alucin|lsd|hongos\",start_sub)~ \"hallucinogens\", grepl(\"opi|hero|metadona\",start_sub)~ \"opioids\", grepl(\"sedante|hipnotico|tranquiliz\",start_sub)~ \"tranquilizers/hypnotics\", grepl(\"inhalable\",start_sub)~ \"inhalants\", grepl(\"esteroid|otros\",start_sub)~\"others\", grepl(\"especif|cip-crc|sin consumo\",start_sub)~ NA_character_, TRUE~start_sub))|&gt;\n    tidytable::ungroup()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(\n    alcohol                     = sum(start_sub == \"alcohol\", na.rm=T),\n    amphetamine_type_stimulants = sum(start_sub == \"amphetamine-type stimulants\", na.rm=T),\n    cocaine_paste               = sum(start_sub == \"cocaine paste\", na.rm=T),\n    cocaine_powder              = sum(start_sub == \"cocaine powder\", na.rm=T),\n    hallucinogens               = sum(start_sub == \"hallucinogens\", na.rm=T),\n    inhalants                   = sum(start_sub == \"inhalants\", na.rm=T),\n    marijuana                   = sum(start_sub == \"marijuana\", na.rm=T),\n    opioids                     = sum(start_sub == \"opioids\", na.rm=T),\n    others                      = sum(start_sub == \"others\", na.rm=T),\n    tranquilizers_hypnotics     = sum(start_sub == \"tranquilizers/hypnotics\", na.rm=T),\n    total                       = n(),       # total records per hash_key\n    .groups = \"drop\"\n  )\n\n\nC5, Entries: 73\n\n\nC5, RUNs: 53\n\n\nCode\ninvisible(\"======================================================\")\ninvalid_start_subs_c6&lt;-  \nCONS_C6_25_df|&gt;\n    tidytable::filter(HASH_KEY %in% invalid_start_subs_hash_key)|&gt;\n    (\\(df) {\n        (message(paste0(\"C6, Entries: \", nrow(df))))\n        (message(paste0(\"C6, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::select(HASH_KEY, sustancia_de_inicio)|&gt;\n    tidytable::rename(\"start_sub\"=2)|&gt; \n    tidytable::mutate(start_sub= tidytable::case_when(grepl(\"coca\",start_sub)~ \"cocaine powder\", grepl(\"crack|pasta\",start_sub)~ \"cocaine paste\", grepl(\"marihuana\",start_sub)~ \"marijuana\", grepl(\"anfeta|extasis|fenil|estimul\",start_sub)~ \"amphetamine-type stimulants\", grepl(\"alucin|lsd|hongos\",start_sub)~ \"hallucinogens\", grepl(\"opi|hero|metadona\",start_sub)~ \"opioids\", grepl(\"sedante|hipnotico|tranquiliz\",start_sub)~ \"tranquilizers/hypnotics\", grepl(\"inhalable\",start_sub)~ \"inhalants\", grepl(\"esteroid|otros\",start_sub)~\"others\", grepl(\"especif|cip-crc|sin consumo\",start_sub)~ NA_character_, TRUE~start_sub))|&gt;\n    tidytable::ungroup()|&gt; \n    tidytable::group_by(HASH_KEY)|&gt;\n    tidytable::summarise(\n    alcohol                     = sum(start_sub == \"alcohol\", na.rm=T),\n    amphetamine_type_stimulants = sum(start_sub == \"amphetamine-type stimulants\", na.rm=T),\n    cocaine_paste               = sum(start_sub == \"cocaine paste\", na.rm=T),\n    cocaine_powder              = sum(start_sub == \"cocaine powder\", na.rm=T),\n    hallucinogens               = sum(start_sub == \"hallucinogens\", na.rm=T),\n    inhalants                   = sum(start_sub == \"inhalants\", na.rm=T),\n    marijuana                   = sum(start_sub == \"marijuana\", na.rm=T),\n    opioids                     = sum(start_sub == \"opioids\", na.rm=T),\n    others                      = sum(start_sub == \"others\", na.rm=T),\n    tranquilizers_hypnotics     = sum(start_sub == \"tranquilizers/hypnotics\", na.rm=T),\n    total                       = n(),       # total records per hash_key\n    .groups = \"drop\"\n  )\n\n\nC6, Entries: 73\n\n\nC6, RUNs: 61\n\n\nCode\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \ninvisible(\"Generar jerarquías de sustancias de inicio\")\n#attr(table(SISTRAT23_c1_2010_2024_df_prev1p$first_sub_used),\"names\")|&gt; dput()\n\nsubstances &lt;- c(\n  \"alcohol\",\n  \"amphetamine_type_stimulants\",\n  \"cocaine_paste\",\n  \"cocaine_powder\",\n  \"hallucinogens\",\n  \"inhalants\",\n  \"marijuana\",\n  \"opioids\",\n  \"others\",\n  \"tranquilizers_hypnotics\"\n)\n\ncat(\"Make counts by RUN and top substances in case of more than one initial substance\\n\")\n\ninvalid_start_subs_ext_info &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1p|&gt;\n  tidytable::filter(hash_key %in% invalid_start_subs_hash_key)|&gt;\n  tidytable::select(hash_key, first_sub_used)|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(\n    alcohol                     = sum(first_sub_used == \"alcohol\", na.rm = TRUE),\n    amphetamine_type_stimulants = sum(first_sub_used == \"amphetamine-type stimulants\", na.rm = TRUE),\n    cocaine_paste               = sum(first_sub_used == \"cocaine paste\", na.rm = TRUE),\n    cocaine_powder              = sum(first_sub_used == \"cocaine powder\", na.rm = TRUE),\n    hallucinogens               = sum(first_sub_used == \"hallucinogens\", na.rm = TRUE),\n    inhalants                   = sum(first_sub_used == \"inhalants\", na.rm = TRUE),\n    marijuana                   = sum(first_sub_used == \"marijuana\", na.rm = TRUE),\n    opioids                     = sum(first_sub_used == \"opioids\", na.rm = TRUE),\n    others                      = sum(first_sub_used == \"others\", na.rm = TRUE),\n    tranquilizers_hypnotics     = sum(first_sub_used == \"tranquilizers/hypnotics\", na.rm = TRUE),\n    total                       = dplyr::n(),\n    .groups = \"drop\"\n  )|&gt;\n  tidylog::left_join(invalid_start_subs_c2, by = c(\"hash_key\" = \"HASH_KEY\"), multiple = \"first\", suffix = c(\"\", \"_c2\"))|&gt;\n  tidylog::left_join(invalid_start_subs_c3, by = c(\"hash_key\" = \"HASH_KEY\"), multiple = \"first\", suffix = c(\"\", \"_c3\"))|&gt;\n  tidylog::left_join(invalid_start_subs_c4, by = c(\"hash_key\" = \"HASH_KEY\"), multiple = \"first\", suffix = c(\"\", \"_c4\"))|&gt;\n  tidylog::left_join(invalid_start_subs_c5, by = c(\"hash_key\" = \"HASH_KEY\"), multiple = \"first\", suffix = c(\"\", \"_c5\"))|&gt;\n  tidylog::left_join(invalid_start_subs_c6, by = c(\"hash_key\" = \"HASH_KEY\"), multiple = \"first\", suffix = c(\"\", \"_c6\"))|&gt;\n  (\\(df) {\n    # Canonical labels\n    substances &lt;- c(\n      \"alcohol\",\n      \"amphetamine_type_stimulants\",\n      \"cocaine_paste\",\n      \"cocaine_powder\",\n      \"hallucinogens\",\n      \"inhalants\",\n      \"marijuana\",\n      \"opioids\",\n      \"others\",\n      \"tranquilizers_hypnotics\"\n    )\n\n    df2 &lt;- as.data.frame(df, stringsAsFactors = FALSE)\n\n    # Detect any susini text columns like c2_susini_1 … c6_susini_k\n    susini_cols &lt;- grep(\"^c[2-6]_susini_\\\\d+$\", names(df2), value = TRUE)\n    if (length(susini_cols) &gt; 0) {\n      df2[susini_cols] &lt;- lapply(df2[susini_cols], function(x) tolower(trimws(x)))\n    }\n\n    # n_&lt;substance&gt; from susini text columns (0 if none exist)\n    for (sub in substances) {\n      safe_nm &lt;- paste0(\"n_\", make.names(sub))\n      if (length(susini_cols) &gt; 0) {\n        df2[[safe_nm]] &lt;- rowSums(df2[susini_cols] == sub, na.rm = TRUE)\n      } else {\n        df2[[safe_nm]] &lt;- 0L\n      }\n    }\n\n    # tot_&lt;substance&gt; = base + susini counts (base may be missing; treat as 0)\n    tot_cols &lt;- character(0)\n    for (sub in substances) {\n      base_nm &lt;- sub\n      susi_nm &lt;- paste0(\"n_\", make.names(sub))\n      tot_nm  &lt;- paste0(\"tot_\", make.names(sub))\n      base_vec &lt;- if (base_nm %in% names(df2)) df2[[base_nm]] else 0L\n      df2[[tot_nm]] &lt;- base_vec + df2[[susi_nm]]\n      tot_cols &lt;- c(tot_cols, tot_nm)\n    }\n\n    # Map total column names -&gt; human labels\n    name_map &lt;- setNames(substances, tot_cols)\n\n    # Top 3 labels by totals with stable tie-break (count desc, then label asc)\n    top3 &lt;- t(apply(df2[tot_cols], 1, function(x) {\n      pos_idx &lt;- which(x &gt; 0)\n      if (length(pos_idx) == 0) return(rep(NA_character_, 3))\n      pos_names &lt;- names(x)[pos_idx]\n      labels    &lt;- name_map[pos_names]\n      ord &lt;- order(-x[pos_idx], labels)  # desc by count, then A–Z\n      pick_names &lt;- pos_names[ord][seq_len(min(3, length(pos_idx)))]\n      c(name_map[pick_names], rep(NA_character_, 3 - length(pick_names)))\n    }))\n    colnames(top3) &lt;- paste0(\"sus_ini_\", 1:3)\n\n    # Corresponding counts\n    top3_n &lt;- t(apply(df2[tot_cols], 1, function(x) {\n      pos_idx &lt;- which(x &gt; 0)\n      if (length(pos_idx) == 0) return(rep(NA_integer_, 3))\n      pos_names &lt;- names(x)[pos_idx]\n      labels    &lt;- name_map[pos_names]\n      ord &lt;- order(-x[pos_idx], labels)\n      pick_names &lt;- pos_names[ord][seq_len(min(3, length(pos_idx)))]\n      c(as.integer(x[pick_names]), rep(NA_integer_, 3 - length(pick_names)))\n    }))\n    colnames(top3_n) &lt;- paste0(\"sus_ini_\", 1:3, \"_n\")\n\n    # Bind the results and return\n    df2 &lt;- cbind(df2,\n                 as.data.frame(top3,  stringsAsFactors = FALSE),\n                 as.data.frame(top3_n, stringsAsFactors = FALSE))\n    df2\n  })()\n\n\nleft_join: added 11 columns (alcohol_c2, amphetamine_type_stimulants_c2, cocaine_paste_c2, cocaine_powder_c2, hallucinogens_c2, …)\n\n\n       &gt; rows only in tidytable::summarise(ti..  15,994\n       &gt; rows only in invalid_start_subs_c2     (     0)\n       &gt; matched rows                               112\n       &gt;                                        ========\n       &gt; rows total                              16,106\nleft_join: added 11 columns (alcohol_c3, amphetamine_type_stimulants_c3, cocaine_paste_c3, cocaine_powder_c3, hallucinogens_c3, …) &gt; rows only in tidylog::left_join(tidy.. 15,919 &gt; rows only in invalid_start_subs_c3 ( 0) &gt; matched rows 187 &gt; ======== &gt; rows total 16,106 left_join: added 11 columns (alcohol_c4, amphetamine_type_stimulants_c4, cocaine_paste_c4, cocaine_powder_c4, hallucinogens_c4, …) &gt; rows only in tidylog::left_join(tidy.. 16,000 &gt; rows only in invalid_start_subs_c4 ( 0) &gt; matched rows 106 &gt; ======== &gt; rows total 16,106 left_join: added 11 columns (alcohol_c5, amphetamine_type_stimulants_c5, cocaine_paste_c5, cocaine_powder_c5, hallucinogens_c5, …) &gt; rows only in tidylog::left_join(tidy.. 16,053 &gt; rows only in invalid_start_subs_c5 ( 0) &gt; matched rows 53 &gt; ======== &gt; rows total 16,106 left_join: added 11 columns (alcohol_c6, amphetamine_type_stimulants_c6, cocaine_paste_c6, cocaine_powder_c6, hallucinogens_c6, …) &gt; rows only in tidylog::left_join(tidy.. 16,045 &gt; rows only in invalid_start_subs_c6 ( 0) &gt; matched rows 61 &gt; ======== &gt; rows total 16,106\n\n\nNumber of distinct starting substances\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.000   2.000   2.147   2.000   5.000 \nMake counts by RUN and top substances in case of more than one initial substance\n\n\nNow we generated the criteria of the most vulnerable variable.\n\n\nCode\ninvisible(\"buscar criterio de mvv\")\n#sus_ini_1, sus_ini_2, sus_ini_3, sus_ini_1_n, sus_ini_2_n, sus_ini_3_n\n\nSISTRAT23_c1_2010_2024_df_prev1q &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1p|&gt;\n  (\\(df) {\n    cat(paste0(\n      \"7.Number of cases before resolving inconsistencies in nationality & starting substance: \",\n      formatC(nrow(df), big.mark = \",\")\n    ), \"\\n\")\n    cat(paste0(\n      \"7.Number of patients before resolving inconsistencies in nationality & starting substance: \",\n      formatC(nrow(tidytable::distinct(df, hash_key)), big.mark = \",\")\n    ), \"\\n\")\n    df\n  })()|&gt;\n  tidytable::left_join(multiple_nationalities, multiple = \"first\")|&gt;\n  tidytable::mutate(\n    nationality_cons = tidytable::case_when(\n      !is.na(nacionalidad_distinct) ~ nacionalidad_distinct,\n      TRUE ~ nacionalidad\n    )\n  )|&gt;\n  tidytable::select(-nacionalidad_distinct)|&gt;\n  (\\(df) {\n    cat(paste0(\n      \"7.Number of cases before resolving inconsistencies in starting substance: \",\n      formatC(nrow(df), big.mark = \",\")\n    ), \"\\n\")\n    cat(paste0(\n      \"7.Number of patients before resolving inconsistencies in starting substance: \",\n      formatC(nrow(tidytable::distinct(df, hash_key)), big.mark = \",\")\n    ), \"\\n\")\n    df\n  })()|&gt;\n  # Join only hash_key + sus_ini_1/2/3 from invalid_start_subs_ext_info\n  tidytable::left_join(\n    tidytable::select(\n      invalid_start_subs_ext_info,\n      hash_key,\n      tidytable::all_of(paste0(\"sus_ini_\", 1:3))\n    ),\n    multiple = \"first\"\n  )|&gt;\n  # Normalize to lower case (and keep NAs as NA)\n  tidytable::mutate(\n    first_sub_used = tolower(first_sub_used),\n    sus_ini_1      = tolower(gsub(\"_\",\" \", sus_ini_1)),\n    sus_ini_2      = tolower(gsub(\"_\",\" \", sus_ini_2)),\n    sus_ini_3      = tolower(gsub(\"_\",\" \", sus_ini_3))\n  )|&gt;\n  # Row-wise flags (NA-safe) across first_sub_used & sus_ini_1/2/3\n  tidytable::mutate(\n    has_paste =\n      (!is.na(first_sub_used) & grepl(\"past\",   first_sub_used)) |\n      (!is.na(sus_ini_1)      & sus_ini_1 == \"cocaine paste\")   |\n      (!is.na(sus_ini_2)      & sus_ini_2 == \"cocaine paste\")   |\n      (!is.na(sus_ini_3)      & sus_ini_3 == \"cocaine paste\"),\n    has_powder =\n      (!is.na(first_sub_used) & grepl(\"powder\", first_sub_used)) |\n      (!is.na(sus_ini_1)      & sus_ini_1 == \"cocaine powder\")  |\n      (!is.na(sus_ini_2)      & sus_ini_2 == \"cocaine powder\")  |\n      (!is.na(sus_ini_3)      & sus_ini_3 == \"cocaine powder\"),\n    has_alcohol =\n      (!is.na(first_sub_used) & grepl(\"alcohol\", first_sub_used)) |\n      (!is.na(sus_ini_1)      & sus_ini_1 == \"alcohol\")          |\n      (!is.na(sus_ini_2)      & sus_ini_2 == \"alcohol\")          |\n      (!is.na(sus_ini_3)      & sus_ini_3 == \"alcohol\"),\n    has_marijuana =\n      (!is.na(first_sub_used) & grepl(\"marij\", first_sub_used))   |\n      (!is.na(sus_ini_1)      & sus_ini_1 == \"marijuana\")         |\n      (!is.na(sus_ini_2)      & sus_ini_2 == \"marijuana\")         |\n      (!is.na(sus_ini_3)      & sus_ini_3 == \"marijuana\"),\n    has_others =\n      (!is.na(first_sub_used) &\n         !grepl(\"alcohol|past|powder|marij\", first_sub_used))     |\n      (!is.na(sus_ini_1)      & sus_ini_1 == \"others\")            |\n      (!is.na(sus_ini_2)      & sus_ini_2 == \"others\")            |\n      (!is.na(sus_ini_3)      & sus_ini_3 == \"others\")\n  )|&gt;\n  # Pick the most vulnerable reported substance (paste &gt; powder &gt; alcohol &gt; marijuana &gt; others)\n  tidytable::mutate(\n    sus_ini_mod_mvv = tidytable::case_when(\n      has_paste     ~ \"cocaine paste\",\n      has_powder    ~ \"cocaine powder\",\n      has_alcohol   ~ \"alcohol\",\n      has_marijuana ~ \"marijuana\",\n      has_others    ~ \"others\",\n      TRUE ~ NA_character_\n    ),\n    sus_ini_mod_mvv = factor(\n      sus_ini_mod_mvv,\n      levels = c(\"cocaine paste\", \"cocaine powder\", \"alcohol\", \"marijuana\", \"others\")\n    )\n  )|&gt;\n  # Safety checks + message\n  (\\(df) {\n    cat(paste0(\n      \"7. After resolving inconsistencies in nationality & starting substance, obs.: \",\n      formatC(nrow(df), big.mark = \",\")\n    ), \"\\n\")\n    cat(paste0(\n      \"7. After resolving inconsistencies in nationality & starting substance, RUNs: \",\n      formatC(nrow(tidytable::distinct(df, hash_key)), big.mark = \",\")\n    ), \"\\n\")\n    if (nrow(df) &gt; nrow(SISTRAT23_c1_2010_2024_df_prev1p))\n      stop(\"Error: Added treatment episodes in the process\")\n    df\n  })()|&gt;\n  # Drop helpers and the sus_ini_* columns if you don't want them downstream\n  tidytable::select(\n    -tidytable::any_of(c(\"has_paste\", \"has_powder\", \"has_alcohol\", \"has_marijuana\", \"has_others\"))\n    #-tidytable::any_of(c(\"sus_ini_1\", \"sus_ini_2\", \"sus_ini_3\"))\n  )\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:  \n#starting substance\n#Segunda Sustancia de Inicio(Sólo más frecuentes) Second Starting Substance\n#Tercera Sustancia de Inicio(Sólo más frecuentes) Third Starting Substance\n#Sustancia de Inicio (Sólo más frecuentes)    Starting Substance (Only more frequent)\n\nif (!\"adm_age_rec3\" %in% colnames(SISTRAT23_c1_2010_2024_df_prev1q)) {\n  SISTRAT23_c1_2010_2024_df_prev1q$adm_age_rec3 &lt;- round(\n    lubridate::time_length(\n      lubridate::interval(\n        SISTRAT23_c1_2010_2024_df_prev1q$birth_date_rec, \n        SISTRAT23_c1_2010_2024_df_prev1q$adm_date_rec2\n      ), \n      \"years\"\n    ),\n    3\n  )\n}\n\n\n7.Number of cases before resolving inconsistencies in nationality & starting substance: 173,728 \n7.Number of patients before resolving inconsistencies in nationality & starting substance: 121,299 \n7.Number of cases before resolving inconsistencies in starting substance: 173,728 \n7.Number of patients before resolving inconsistencies in starting substance: 121,299 \n7. After resolving inconsistencies in nationality & starting substance, obs.: 173,728 \n7. After resolving inconsistencies in nationality & starting substance, RUNs: 121,299"
  },
  {
    "objectID": "Duplicates_25_3.html#last-user-invariant-variables-age-of-onset-of-substance-use",
    "href": "Duplicates_25_3.html#last-user-invariant-variables-age-of-onset-of-substance-use",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "3. Last user-invariant variables= Age of onset of substance use",
    "text": "3. Last user-invariant variables= Age of onset of substance use\nSeveral respondent-invariant variables showed multiple values for the same person across duplicated records, so we triangulated sources to resolve ambiguities. Recall bias—especially among individuals with sustained substance use—likely contributes to imprecision in reported ages.\n\nAge at onset of any drug use (age_subs_onset) (records = 62,141), had too many distinct values per patient (n = 21,949).\nAge at onset of primary substance (age_prim_subs_onset) (records = 69,281), had too many distinct values per user (n = 25,098).\n\nFirst, we discarded cases with ages of onset occurring at or after the age at admission (age_subs_onset n = 1). We also discarded invalid ages of onset for primary substance (age_prim_subs_onset n = 6).\nCases with a primary substance age of onset that preceded the age of substance use onset were discarded.\nFor context, summary statistics:\n\nage_subs_onset= median: 15 (IQR: 14–18), mean: 16.37, range: 5–74, missing: 10,897.\nage_prim_subs_onset= median: 18 (IQR: 15–23), mean: 20.24, range: 5–75, missing: 603.\n\n\n\n\nCode\nSISTRAT23_c1_2010_2024_df_prev1q|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(min_adm_age_rec3= min(adm_age_rec3, na.rm=T))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::mutate(\n    age_subs_onset_rec= tidytable::case_when(\n      min_adm_age_rec3 &lt;= age_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_subs_onset)\n    )\n  )|&gt;\n  tidytable::mutate(\n    age_prim_subs_onset_rec= tidytable::case_when(\n      min_adm_age_rec3 &lt;= age_prim_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_prim_subs_onset)\n    )\n  )|&gt;\n  tidytable::mutate(\n    age_prim_subs_onset_rec= tidytable::case_when(\n      age_prim_subs_onset &lt; age_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_prim_subs_onset)\n    )\n  )|&gt;\n  (\\(df) {\n    assign(x= \"SISTRAT23_c1_2010_2024_df_prev1r\", value= df, envir= .GlobalEnv)\n    })()\n\n\nWe created the variables age_subs_onset_rec and age_prim_subs_onset_rec in the SISTRAT23_c1_2010_2024_df_prev1r database. We replaced missing values with admission ages for records where the age of first substance use was less than or equal to the minimum admission age by HASH. Additionally, we corrected cases where the age of primary substance use onset was lower than the age of first substance use. The following table shows the amount of ages that varies within each user.\n\n\n\nCode\nprueba_age_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_subs_onset_por_hash= tidytable::n_distinct(age_subs_onset))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_subs_onset_por_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\nprueba_age_prim_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_prim_subs_onset_por_hash= tidytable::n_distinct(age_prim_subs_onset))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_prim_subs_onset_por_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\nage_subs_onset_summ &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n   tidytable::filter(hash_key %in% tidytable::pull(prueba_age_subs_onset))|&gt;\n    tidytable::group_by(hash_key)|&gt;\n    tidytable::add_count()|&gt;\n    tidytable::summarise(\n      n = mean(n),\n      age_subs_onset_p25 = quantile(age_subs_onset, 0.25, na.rm = TRUE),\n      age_subs_onset_p50 = quantile(age_subs_onset, 0.50, na.rm = TRUE),\n      age_subs_onset_p75 = quantile(age_subs_onset, 0.75, na.rm = TRUE),\n      age_subs_onset_sd  = sd(age_subs_onset, na.rm = TRUE),\n      min_val   = min(age_subs_onset, na.rm = TRUE),\n      max_val   = max(age_subs_onset, na.rm = TRUE),\n      mean_val  = mean(age_subs_onset, na.rm = TRUE)\n    )|&gt;\n    tidytable::mutate(ranges = abs(max_val - min_val))|&gt;\n    tidytable::ungroup()|&gt;\n    tidytable::mutate(\n      diff_p25_p50 = abs(age_subs_onset_p50 - age_subs_onset_p25),\n      diff_p75_p50 = abs(age_subs_onset_p50 - age_subs_onset_p75),\n      min_mean     = abs(min_val - mean_val),\n      max_mean     = abs(max_val - mean_val)\n    )|&gt;\n    tidytable::summarise(\n      avg_n        = mean(n),\n      sd_n         = sd(n),\n      avg_p25_p50  = mean(diff_p25_p50),\n      avg_p75_p50  = mean(diff_p75_p50),\n      avg_sd       = mean(age_subs_onset_sd, na.rm = TRUE),\n      avg_min_mean = mean(min_mean, na.rm = TRUE),\n      avg_max_mean = mean(max_mean, na.rm = TRUE),\n      avg_ranges   = mean(ranges, na.rm = TRUE),\n      sd_ranges    = sd(ranges, na.rm = TRUE),\n      p75_ranges   = quantile(ranges, 0.75, na.rm = TRUE),\n      p90_ranges   = quantile(ranges, 0.90, na.rm = TRUE)\n    )|&gt;\n    (\\(df) round(df, 2))()\n\nage_prim_subs_onset_summ &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n   tidytable::filter(hash_key %in% tidytable::pull(prueba_age_prim_subs_onset))|&gt;\n    tidytable::group_by(hash_key)|&gt;\n    tidytable::add_count()|&gt;\n    tidytable::summarise(\n      n = mean(n),\n      age_prim_subs_onset_p25 = quantile(age_prim_subs_onset, 0.25, na.rm = TRUE),\n      age_prim_subs_onset_p50 = quantile(age_prim_subs_onset, 0.50, na.rm = TRUE),\n      age_prim_subs_onset_p75 = quantile(age_prim_subs_onset, 0.75, na.rm = TRUE),\n      age_prim_subs_onset_sd  = sd(age_prim_subs_onset, na.rm = TRUE),\n      min_val   = min(age_prim_subs_onset, na.rm = TRUE),\n      max_val   = max(age_prim_subs_onset, na.rm = TRUE),\n      mean_val  = mean(age_prim_subs_onset, na.rm = TRUE)\n    )|&gt;\n    tidytable::mutate(ranges = abs(max_val - min_val))|&gt;\n    tidytable::ungroup()|&gt;\n    tidytable::mutate(\n      diff_p25_p50 = abs(age_prim_subs_onset_p50 - age_prim_subs_onset_p25),\n      diff_p75_p50 = abs(age_prim_subs_onset_p50 - age_prim_subs_onset_p75),\n      min_mean     = abs(min_val - mean_val),\n      max_mean     = abs(max_val - mean_val)\n    )|&gt;\n    tidytable::summarise(\n      avg_n        = mean(n),\n      sd_n         = sd(n),\n      avg_p25_p50  = mean(diff_p25_p50),\n      avg_p75_p50  = mean(diff_p75_p50),\n      avg_sd       = mean(age_prim_subs_onset_sd, na.rm = TRUE),\n      avg_min_mean = mean(min_mean, na.rm = TRUE),\n      avg_max_mean = mean(max_mean, na.rm = TRUE),\n      avg_ranges   = mean(ranges, na.rm = TRUE),\n      sd_ranges    = sd(ranges, na.rm = TRUE),\n      p75_ranges   = quantile(ranges, 0.75, na.rm = TRUE),\n      p90_ranges   = quantile(ranges, 0.90, na.rm = TRUE)\n    )|&gt;\n    (\\(df) round(df, 2))()\n\nrbind(cbind(Variable=\"Age of the Onset of Drug Use\", age_subs_onset_summ), \n      cbind(Variable=\"Age of the Onset of Drug Use Primary Substance\", age_prim_subs_onset_summ))|&gt;\n    DT::datatable(\n      caption= \"Table 2. Distribution of differences in years within users with inconsistent ages of onset\",\n      colnames= c(\"Variables\",\"Avg. Cases per User\", \"Std.Dev. Cases per User\",\"Avg. Diff. Perc 25-50\", \"Avg. Diff. Perc 75-50\",\"Avg. Std.Dev\",\"Avg. Diff. Min-Mean\",\"Avg. Diff. Max-Mean\",\"Avg. Range\", \"Std.Dev. Range\",\"Perc 75 Range\",\"Perc 90 Range\"),\n      options= list(\n        pageLength= 25,\n        scrollX= TRUE,\n        scrollY= \"150px\",\n        dom= 'Brt')\n    )\n\n\n\n\n\n\n\nThe data presented in the table reveals a notable variability in the age of onset for both drug use and primary substance use. The significant standard deviations in the “Age of the Onset of Drug Use” (1.23) and “Age of the Onset of Drug Use Primary Substance” (1.22), combined with the wide ranges shown in “Avg. Range” (4.05 and 6.22) and “Std.Dev. Range” (5.13 and 6.54), indicate that the ages reported by users were not consistent. To address this lack of consistency and establish a more reliable and stable value for the age of onset, we decided to use external databases (Agreements C2 to C6) as a source for this critical variable. This approach ensures that our analysis is based on more dependable and standardized data.\nHASHes with inconsistnt onset ages were grouped in invalid_age_sub_and_prim_sub_onset, and miss_age_sub_and_prim_sub_onset, for missing values (or eliminated due to inconsistencies with admission age).\n\n\nCode\n# cx_n: Number of CX records for this HASH_KEY (all rows after filtering).\n# cx_age_subs_onset: Mean of edad_inicio_consumo across this HASH_KEY’s CX records (years; numeric).\n# cx_age_prim_subs_onset: Mean of edad_inicio_sustancia_principal across this HASH_KEY’s CX records (years; numeric).\n# cx_mode_prim_sub: The most frequent normalized primary substance label for this HASH_KEY (after recoding prim_sub). Tie-breaker: alphabetical by label.\n# cx_mode_prim_sub_n: Count of rows for this HASH_KEY with cx_mode_prim_sub.\n# cx_mode_prim_sub_prop: Proportion of that mode within all non-missing prim_sub rows for this HASH_KEY (cx_mode_prim_sub_n / total non-missing prim_sub).\n# cx_age_prim_subs_onset_mean_: Mean edad_inicio_sustancia_principal for rows of that specific normalized primary substance within this HASH_KEY (years; numeric)\n\ninvisible(\"Include inconsistent onset ages\")\ninconsistent_age_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_subs_onset_by_hash= tidytable::n_distinct(age_subs_onset_rec))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_subs_onset_by_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\ninconsistent_age_prim_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key, primary_sub)|&gt;\n  tidytable::mutate(age_prim_subs_onset_by_hash_primsub= tidytable::n_distinct(age_prim_subs_onset_rec))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_prim_subs_onset_by_hash_primsub&gt;1)|&gt;\n  tidytable::distinct(hash_key, rn)\n#27835\n\ninvalid_age_sub_and_prim_sub_onset &lt;- unique(c(inconsistent_age_subs_onset$hash_key, inconsistent_age_prim_subs_onset$hash_key))\n\ninvisible(\"Include missing onset ages\")\nprueba_age_prim_subs_onset_miss &lt;-SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(na_per_hash = sum(is.na(age_prim_subs_onset_rec)),\n    total = n())|&gt;\n  tidytable::mutate(perc_miss= na_per_hash/total)|&gt;\n  tidytable::filter(perc_miss==1)|&gt; \n  tidytable::ungroup()\nprueba_age_subs_onset_miss &lt;-SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(na_per_hash = sum(is.na(age_subs_onset_rec)),\n    total = n())|&gt;\n  tidytable::mutate(perc_miss= na_per_hash/total)|&gt;\n  tidytable::filter(perc_miss==1)|&gt; \n  tidytable::ungroup()\n\nmiss_age_sub_and_prim_sub_onset&lt;- \nunique(c(prueba_age_subs_onset_miss$hash_key,prueba_age_prim_subs_onset_miss$hash_key))\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c2&lt;-\n    CONS_C2_25_df|&gt;\n    tidytable::filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset, miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df){\n        message(paste0(\"C2, Entries: \", nrow(df)))\n        message(paste0(\"C2, RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow()))\n        df})()|&gt;\n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub\n      ))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n          tidytable::summarise(\n            c2_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n            c2_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c2_n= tidytable::n())|&gt;\n          tidytable::ungroup()|&gt;\n          # Join the mode (most frequent primary substance) with its count and proportion\n          tidytable::left_join(\n            tidytable::filter(df, !is.na(prim_sub))|&gt;\n            tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n            tidytable::summarise(\n              c2_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n              c2_prim_sub_n= tidytable::n())|&gt;\n            tidytable::group_by(HASH_KEY)|&gt;\n            tidytable::mutate(c2_total_n= sum(c2_prim_sub_n))|&gt;\n            tidytable::arrange(HASH_KEY, -c2_prim_sub_n, prim_sub)|&gt;\n            tidytable::slice_head(n=1)|&gt;\n            tidytable::transmute(\n                HASH_KEY,\n                c2_mode_prim_sub= prim_sub,\n                c2_mode_prim_sub_n= c2_prim_sub_n,\n                c2_mode_prim_sub_prop= c2_prim_sub_n/c2_total_n),\n              by=\"HASH_KEY\")|&gt;\n          # Join wide columns: per-primary-substance mean onset age\n          tidytable::left_join(\n            tidytable::filter(df, !is.na(prim_sub))|&gt;\n            tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n            tidytable::summarise(\n                c2_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n            tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n            tidytable::mutate(col_name= paste0(\"c2_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n            tidytable::select(HASH_KEY, col_name, c2_age_prim_subs_onset_mean)|&gt;\n            tidytable::pivot_wider(names_from= col_name, values_from= c2_age_prim_subs_onset_mean),\n              by=\"HASH_KEY\")})()\n\n\nC2, Entries: 418\n\n\nC2, RUNs: 168\n\n\nCode\n# C2, Entries: 418\n# C2, RUNs: 168\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c3&lt;-  \nCONS_C3_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df){\n      message(paste0(\"C3, Entries: \", nrow(df)))\n      message(paste0(\"C3, RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow()))\n      df})()|&gt;\n  tidytable::rename(prim_sub=sustancia_principal)|&gt;\n  tidytable::mutate(\n    prim_sub= tidytable::case_when(\n      grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n      grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n      grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n      grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n      grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n      grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n      grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n      grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n      grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n      grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n      TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c3_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c3_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c3_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c3_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c3_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c3_total_n= sum(c3_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c3_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c3_mode_prim_sub= prim_sub,\n            c3_mode_prim_sub_n= c3_prim_sub_n,\n            c3_mode_prim_sub_prop= c3_prim_sub_n/c3_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c3_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c3_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c3_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c3_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC3, Entries: 495\n\n\nC3, RUNs: 326\n\n\nCode\n# C3, Entries: 495\n# C3, RUNs: 326\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c4&lt;-  \nCONS_C4_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n      (message(paste0(\"C4, Entries: \", nrow(df))))\n      (message(paste0(\"C4, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n      df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c4_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c4_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c4_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c4_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c4_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c4_total_n= sum(c4_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c4_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c4_mode_prim_sub= prim_sub,\n            c4_mode_prim_sub_n= c4_prim_sub_n,\n            c4_mode_prim_sub_prop= c4_prim_sub_n/c4_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c4_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c4_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c4_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c4_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC4, Entries: 236\n\n\nC4, RUNs: 162\n\n\nCode\n# C4, Entries: 236\n# C4, RUNs: 162\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c5&lt;-  \nCONS_C5_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n        (message(paste0(\"C5, Entries: \", nrow(df))))\n        (message(paste0(\"C5, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c5_age_subs_onset= mean(as.numeric(edad_inicio_sustancia_inicial), na.rm=TRUE),\n          c5_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c5_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c5_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c5_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c5_total_n= sum(c5_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c5_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c5_mode_prim_sub= prim_sub,\n            c5_mode_prim_sub_n= c5_prim_sub_n,\n            c5_mode_prim_sub_prop= c5_prim_sub_n/c5_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c5_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c5_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c5_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c5_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC5, Entries: 129\n\n\nC5, RUNs: 90\n\n\nCode\n# C5, Entries: 129\n# C5, RUNs: 90\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c6&lt;-  \nCONS_C6_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n        (message(paste0(\"C6, Entries: \", nrow(df))))\n        (message(paste0(\"C6, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c6_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c6_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c6_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c6_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c6_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c6_total_n= sum(c6_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c6_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c6_mode_prim_sub= prim_sub,\n            c6_mode_prim_sub_n= c6_prim_sub_n,\n            c6_mode_prim_sub_prop= c6_prim_sub_n/c6_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c6_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c6_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c6_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c6_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC6, Entries: 148\n\n\nC6, RUNs: 112\n\n\nCode\n# C6, Entries: 148\n# C6, RUNs: 112\n\n\nFor missing age of onset of substance use or invalid, we contrasted with external sources.\n\n\nCode\ninvisible(\"handle the edge case of groups with only missing data, ensuring your final data frame is clean and doesn't contain unexpected Inf or -Inf values.\")\ninvalid_age_onset_ext_info&lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::filter(hash_key%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n  (\\(df){\n    # Overall per-hash_key stats (NA-safe)\n    # age_subs_onset stats (C1)\n    #handle the edge case of groups with only missing data, ensuring your final data frame is clean and doesn't contain unexpected Inf or -Inf values.\n    overall&lt;- df|&gt;\n      tidytable::group_by(hash_key)|&gt;\n      tidytable::summarise(\n        c1_n= tidytable::n(),\n        c1_age_subs_onset_mean= if(all(is.na(age_subs_onset_rec))) NA_real_ else mean(as.numeric(age_subs_onset_rec), na.rm=TRUE),\n        c1_age_subs_onset_min = if(all(is.na(age_subs_onset_rec))) NA_real_ else min(as.numeric(age_subs_onset_rec),  na.rm=TRUE),\n        c1_age_subs_onset_max = if(all(is.na(age_subs_onset_rec))) NA_real_ else max(as.numeric(age_subs_onset_rec),  na.rm=TRUE),\n        c1_age_subs_onset_ndist= tidytable::n_distinct(age_subs_onset_rec, na.rm=TRUE),\n\n        c1_age_prim_subs_onset_mean= if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else mean(as.numeric(age_prim_subs_onset_rec), na.rm=TRUE),\n        c1_age_prim_subs_onset_min = if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else min(as.numeric(age_prim_subs_onset_rec),  na.rm=TRUE),\n        c1_age_prim_subs_onset_max = if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else max(as.numeric(age_prim_subs_onset_rec),  na.rm=TRUE),\n        c1_age_prim_subs_onset_ndist= tidytable::n_distinct(age_prim_subs_onset_rec, na.rm=TRUE)\n      )|&gt;\n      tidytable::ungroup()\n\n    # Per-primary_sub stats per hash_key\n    by_sub&lt;- df|&gt;\n      tidytable::filter(!is.na(primary_sub))|&gt;\n      tidytable::group_by(hash_key, primary_sub)|&gt;\n      tidytable::summarise(\n        c1_age_prim_subs_onset_rec_mean= if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else mean(as.numeric(age_prim_subs_onset_rec), na.rm=TRUE),\n        c1_min_adm_age_by_substance= min(as.numeric(adm_age_rec3), na.rm=TRUE),\n        c1_prim_sub_n= tidytable::n()\n      )|&gt;\n      tidytable::ungroup()|&gt;\n      # Safe key for column names\n      tidytable::mutate(primary_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(primary_sub)))\n\n    # Wide: per-substance mean\n    wide_means&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_age_prim_subs_onset_rec_mean_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_age_prim_subs_onset_rec_mean)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_age_prim_subs_onset_rec_mean)\n\n    # Wide: per-substance counts\n    wide_counts&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_prim_sub_n_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_prim_sub_n)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_prim_sub_n)\n\n    # Wide: per-substance minimum admission age\n    wide_min_adm_age&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_min_adm_age_by_subs_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_min_adm_age_by_substance)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_min_adm_age_by_substance)\n\n    overall|&gt;\n      tidytable::left_join(wide_min_adm_age, by=\"hash_key\")|&gt;\n      tidytable::left_join(wide_means, by=\"hash_key\")|&gt;\n      tidytable::left_join(wide_counts, by=\"hash_key\")\n  })()|&gt; \n# add a count to check if theres more than one primary substance\n tidytable::rowwise()|&gt;\n  # Create a new column 'total_substance_use'\n  tidytable::mutate(total_substance_use = sum(\n    tidytable::c_across(c(\n      c1_prim_sub_n_cocaine_paste,\n      c1_prim_sub_n_alcohol,\n      c1_prim_sub_n_cocaine_powder,\n      c1_prim_sub_n_opioids,\n      c1_prim_sub_n_marijuana,\n      c1_prim_sub_n_amphetamine_type_stimulants,\n      c1_prim_sub_n_tranquilizers_hypnotics,\n      c1_prim_sub_n_inhalants,\n      c1_prim_sub_n_dissociatives,\n      c1_prim_sub_n_others,\n      c1_prim_sub_n_hallucinogens\n    )),na.rm = TRUE\n  ))|&gt;\n  # Ungroup the data frame to return it to a normal data frame format\n  tidytable::ungroup()|&gt;\n  tidytable::mutate(multiple_prim_sub= ifelse(total_substance_use&gt;1,1,0))\n\n\n\nmessage(paste0(\"We calculated summaries for inconsistent or missing ages (patients= \", formatC(nrow(invalid_age_onset_ext_info), big.mark=\",\"),\")\"))\n\n\nWe calculated summaries for inconsistent or missing ages (patients= 33,898)\n\n\nCode\n#We calculated summaries for inconsistent or missing ages (patients= 33,898)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\ninvalid_age_onset_ext_info_w_c2c6 &lt;- \n  invalid_age_onset_ext_info|&gt;\n  tidytable::left_join(tidytable::distinct(SISTRAT23_c1_2010_2024_df_prev1r[, c(\"hash_key\", \"min_adm_age_rec3\")], .keep_all = TRUE), by=\"hash_key\", multiple = \"first\")|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c2, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c3, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c4, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c5, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c6, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  (\\(df) {\n      stopifnot(nrow(df) == nrow(invalid_age_onset_ext_info))\n      df\n  })()\n\ninvalid_age_onset_ext_info_w_c2c6|&gt;\n  tidytable::mutate(hash_key= as.numeric(factor(hash_key)))|&gt;\n  rio::export(paste0(getwd(),\"/_out/inconsistent_subs_use_onset_any_prim_sub_w_c2c6.xlsx\"))\n\n\nWe implemented an algorithm to resolve inconsistencies in substance use onset age:\n\n\nCode\nwdpath&lt;-paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\nbpmn::bpmn(paste0(wdpath, \"cons/_input/diagram_age_onset.bpmn\"))\n\n\n\n\nFigure 1. Decision Tree for the Users with more than one value in a User-Invariant Variable\n\n\n1. Pooled Potential Candidates - For each individual, we gathered all potential onset ages from: - Any substance: Columns labeled _age_subs_onset - Primary substance: Columns labeled _age_prim_subs_onset_mean_[substance]\n2. Established Validity Boundaries - Universal Rules: - Minimum age: 5 years - Maximum age: 80 years - Substance-Specific Rules: - Any substance: Onset age &lt; (min_adm_age_rec3 - 1) - Primary substance: - Onset age &lt; Minimum treatment admission age for that substance - Onset age ≥ Onset age of all other substances (must be same or later)\n3. Filter Valid Candidates - Discarded values violating: - Universal age boundaries [5-80] - Substance-specific rules above - Missing values\n4. Resolve Conflicts - Selected final value from remaining candidates: 1. Mode: Most frequently occurring value. Example: If ages [12, 12, 14] remain → select 12 2. Tiebreaker: Median if no clear mode. Example: If ages [12, 14, 14] remain → select 14 3. Unresolved: If no valid candidates remain\n5. Label Outcomes - Created two tracking columns: - PROC (Resolution Method): - ANY=mode[value] - PRIMARY=median[value] - UNRESOLVED - FLAG (Rejection Reason): - UB_missing: Upper bound missing - LB&gt;UB: Lower bound &gt; upper bound - conflict(primary&lt;any): Primary substance violates “≥ all others” rule - no_candidate_in_range: No values in valid range\n\n\nCode\n#To test chunk\n# pre) Remove intermediate objects created during your pipelines\nobjects_to_remove &lt;-\n    c(\n        # main ext + resolved blocks\n        \"ext\",\n        \"any_cols\",\"any_long\",\"any_counts\",\"any_mode\",\"any_median\",\"any_sources\",\n        \"any_bounds\",\"any_resolved\",\n        # primary-by-substance blocks\n        \"sub_ub_long\",\"prim_cols\",\"prim_long\",\"prim_has_cand\",\"subcount_cols\",\n        \"subs_used\",\"valid_subs\",\"primary_pool\",\"prim_counts\",\"prim_mode\",\n        \"prim_median\",\"prim_sources\",\"prim_bounds\",\"primary_resolved\",\n        \"onset_resolved_from_ext\",\"onset_resolved_from_ext_collapsed\"\n    )\n\nrm(list = intersect(ls(envir = .GlobalEnv), objects_to_remove), envir = .GlobalEnv)\ngc()\n\next&lt;-\ninvalid_age_onset_ext_info_w_c2c6\n# ── ANY candidates (C1–C6) ────────────────────────────────────────────\n# pick columns that look like *_age_subs_onset (but not the per-primary ones)\nany_cols &lt;- names(ext)\nany_cols &lt;- any_cols[grepl(\"(?:^|_)age_subs_onset(?:$|_)\", any_cols, perl=TRUE) &\n                     !grepl(\"prim\", any_cols, ignore.case=TRUE)]\n\nany_long &lt;- ext|&gt;\n  tidytable::select(tidytable::any_of(c(\"hash_key\",\"min_adm_age_rec3\", any_cols)))|&gt;\n  tidytable::pivot_longer(cols=tidytable::all_of(any_cols),\n                          names_to=\"src_any\",\n                          values_to=\"cand_any\")|&gt;\n  tidytable::mutate(cand_any=as.numeric(cand_any))|&gt;\n  tidytable::filter(!is.na(cand_any))|&gt;\n  tidytable::mutate(LB_any=5L,\n                    UB_any=ifelse(!is.na(min_adm_age_rec3), as.integer(min_adm_age_rec3)-1L, NA_integer_))|&gt;\n  tidytable::filter(cand_any&gt;=5 & cand_any&lt;=80)|&gt;\n  tidytable::filter(!is.na(UB_any) & cand_any&lt;=UB_any)\n\n# mode, median, sources, counts\nany_counts &lt;- any_long|&gt;\n  tidytable::group_by(hash_key, cand_any)|&gt;\n  tidytable::summarise(n_any=tidytable::n())|&gt;\n  tidytable::ungroup()\n\nany_mode &lt;- any_counts|&gt;\n  tidytable::arrange(hash_key, tidytable::desc(n_any), cand_any)|&gt;\n  tidytable::slice_head(n=1, by=\"hash_key\")|&gt;\n  tidytable::rename(onset_any_mode=cand_any)\n\nany_median &lt;- any_long|&gt;\n  tidytable::summarise(onset_any_median=as.integer(median(cand_any)),\n                       .by=\"hash_key\")\n\nany_sources &lt;- any_long|&gt;\n  tidytable::summarise(sources_any=paste0(sort(unique(src_any)), collapse=\"+\"),\n                       n_any_cands=tidytable::n(), .by=\"hash_key\")\n\nany_bounds &lt;- ext|&gt;\n  tidytable::select(hash_key, min_adm_age_rec3)|&gt;\n  tidytable::distinct()|&gt;\n  tidytable::mutate(LB_any=5L,\n                    UB_any=ifelse(!is.na(min_adm_age_rec3), as.integer(min_adm_age_rec3)-1L, NA_integer_))\n\nany_resolved &lt;- any_bounds|&gt;\n  tidytable::left_join(any_mode, by=\"hash_key\")|&gt;\n  tidytable::left_join(any_median, by=\"hash_key\")|&gt;\n  tidytable::left_join(any_sources, by=\"hash_key\")|&gt;\n  tidytable::mutate(onset_any_final=tidytable::coalesce(onset_any_mode, onset_any_median),\n                    PROC_ANY=tidytable::case_when(\n                      !is.na(onset_any_mode)~paste0(\"ANY=mode[\",tidytable::coalesce(sources_any,\"cands\"),\"]\"),\n                      is.na(onset_any_mode) & !is.na(onset_any_median)~paste0(\"ANY=median[\",tidytable::coalesce(sources_any,\"cands\"),\"]\"),\n                      TRUE~\"ANY=unresolved\"\n                    ),\n                    FLAG_ANY=tidytable::case_when(\n                      is.na(UB_any)~\"ANY_UB_missing\",\n                      LB_any&gt;UB_any~\"ANY_unsatisfiable(LB&gt;UB)\",\n                      is.na(onset_any_final)~\"ANY_no_candidate_in_range\",\n                      TRUE~NA_character_\n                    ))|&gt;\n  tidytable::select(hash_key, LB_any, UB_any, onset_any_final, PROC_ANY, FLAG_ANY, n_any_cands, sources_any)\n\n# ── PRIMARY-sub candidates (C1–C6) ─────────────────────────────────────\n# Per-(hash × sub) UB from c1_min_adm_age_by_subs_* (wide -&gt; long)\nsub_ub_long &lt;- ext|&gt;\n  tidytable::select(hash_key, min_adm_age_rec3, tidytable::starts_with(\"c1_min_adm_age_by_subs_\"))|&gt;\n  tidytable::pivot_longer(cols=tidytable::starts_with(\"c1_min_adm_age_by_subs_\"),\n                          names_to=\"sub_col\",\n                          values_to=\"min_adm_age_by_substance\")|&gt;\n  tidytable::mutate(sub_key=gsub(\"^c1_min_adm_age_by_subs_\",\"\", sub_col),\n                    primary_sub_std=subkey_to_label(sub_key))|&gt;\n  tidytable::select(hash_key, primary_sub_std, min_adm_age_by_substance, min_adm_age_rec3)|&gt;\n  tidytable::filter(!is.na(primary_sub_std))\n\n# Gather per-substance onset candidates from any source columns:\n# pattern examples in your file:\n#   c1_age_prim_subs_onset_rec_mean_alcohol\n#   c2_age_prim_subs_onset_mean_cocaine_paste\n#   c5_age_prim_subs_onset_mean_opioids\nprim_cols &lt;- names(ext)\nprim_cols &lt;- prim_cols[grepl(\"^c[1-6]_age_prim_subs_onset.*_mean_\", prim_cols)]\n\nprim_long &lt;- ext|&gt;\n  tidytable::select(hash_key, tidytable::all_of(prim_cols))|&gt;\n  tidytable::pivot_longer(cols=tidytable::all_of(prim_cols),\n                          names_to=\"raw_name\",\n                          values_to=\"cand_primary\")|&gt;\n  tidytable::mutate(cand_primary=as.numeric(cand_primary))|&gt;\n  tidytable::filter(!is.na(cand_primary))|&gt;\n  # split \"raw_name\" into \"src_primary\" and \"sub_key\"\n  tidytable::mutate(src_primary=sub(\"^((c[1-6]_age_prim_subs_onset.*_mean))_.*$\",\"\\\\1\", raw_name),\n                    sub_key=sub(\"^c[1-6]_age_prim_subs_onset.*_mean_\",\"\", raw_name),\n                    primary_sub_std=subkey_to_label(sub_key))|&gt;\n  tidytable::select(hash_key, primary_sub_std, cand_primary, src_primary)|&gt;\n  tidytable::filter(!is.na(primary_sub_std))\n\n# 1) Substances with at least one valid candidate value (from c[1-6]_age_prim_subs_onset*_mean_*)\nprim_has_cand &lt;- prim_long |&gt;\n  tidytable::distinct(hash_key, primary_sub_std)\n\n# 2) Substances really used by a patient (if c1_prim_sub_n_* columns exist)\nsubcount_cols &lt;- names(ext)\nsubcount_cols &lt;- subcount_cols[grepl(\"^c1_prim_sub_n_\", subcount_cols)]\n\nsubs_used &lt;- NULL\nif(length(subcount_cols)&gt;0){\n  subs_used &lt;- ext |&gt;\n    tidytable::select(hash_key, tidytable::all_of(subcount_cols)) |&gt;\n    tidytable::pivot_longer(cols=tidytable::all_of(subcount_cols),\n                            names_to=\"sub_col\",\n                            values_to=\"n_sub\") |&gt;\n    tidytable::mutate(sub_key=gsub(\"^c1_prim_sub_n_\",\"\", sub_col),\n                      primary_sub_std=subkey_to_label(sub_key)) |&gt;\n    # If you don't have subkey_to_label, use:\n    # tidytable::mutate(primary_sub_std=gsub(\"_\",\" \", sub_key)) |&gt;\n    tidytable::filter(!is.na(n_sub) & n_sub&gt;0) |&gt;\n    tidytable::distinct(hash_key, primary_sub_std)\n} else {\n  # no count columns present → empty table with same columns\n  subs_used &lt;- prim_has_cand[0,]\n}\n\n# 3) Valid set of substances per patient = (with candidates) ∪ (used ≥ 1)\nvalid_subs &lt;- tidytable::bind_rows(prim_has_cand, subs_used) |&gt;\n  tidytable::distinct(hash_key, primary_sub_std)\n\n# 4) Restrict UB-by-substance bounds to valid substances (filter AFTER they exist)\nsub_ub_long &lt;- sub_ub_long |&gt;\n  tidytable::semi_join(valid_subs, by=c(\"hash_key\",\"primary_sub_std\"))\n\n# 5) Build the primary_pool (now it exists, so you can semi_join if you still want)\nprimary_pool &lt;- prim_long |&gt;\n  tidytable::left_join(sub_ub_long, by=c(\"hash_key\",\"primary_sub_std\")) |&gt;\n  tidytable::left_join(\n    any_resolved |&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  ) |&gt;\n  # Safe LB/UB: avoid pmin(..., na.rm=TRUE) → Inf\n  tidytable::mutate(\n    LB_primary = tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n    UB_primary = tidytable::case_when(\n      !is.na(min_adm_age_by_substance) & !is.na(min_adm_age_rec3) ~\n        pmin(as.integer(min_adm_age_by_substance)-1L, as.integer(min_adm_age_rec3)-1L),\n      !is.na(min_adm_age_by_substance) ~ as.integer(min_adm_age_by_substance)-1L,\n      !is.na(min_adm_age_rec3) ~ as.integer(min_adm_age_rec3)-1L,\n      TRUE ~ NA_integer_\n    )\n  ) |&gt;\n  tidytable::filter(cand_primary&gt;=5 & cand_primary&lt;=80) |&gt;\n  tidytable::filter(!is.na(UB_primary) & LB_primary&lt;=UB_primary) |&gt;\n  tidytable::filter(cand_primary&gt;=LB_primary & cand_primary&lt;=UB_primary) |&gt;\n  tidytable::semi_join(valid_subs, by=c(\"hash_key\",\"primary_sub_std\"))\n\n# 6) Mode/median/sources on the filtered pool\nprim_counts &lt;- primary_pool |&gt;\n  tidytable::group_by(hash_key, primary_sub_std, cand_primary) |&gt;\n  tidytable::summarise(n_primary=tidytable::n()) |&gt;\n  tidytable::ungroup()\n\nprim_mode &lt;- prim_counts |&gt;\n  tidytable::arrange(hash_key, primary_sub_std, tidytable::desc(n_primary), cand_primary) |&gt;\n  tidytable::slice_head(n=1, by=c(\"hash_key\",\"primary_sub_std\")) |&gt;\n  tidytable::rename(onset_primary_mode=cand_primary)\n\nprim_median &lt;- primary_pool |&gt;\n  tidytable::summarise(\n    onset_primary_median=as.integer(median(cand_primary)),\n    .by=c(\"hash_key\",\"primary_sub_std\")\n  )\n\nprim_sources &lt;- primary_pool |&gt;\n  tidytable::summarise(\n    sources_primary=paste0(sort(unique(src_primary)), collapse=\"+\"),\n    n_primary_cands=tidytable::n(),\n    .by=c(\"hash_key\",\"primary_sub_std\")\n  )\n\n# 7) Primary bounds (recompute cleanly; no use of undefined objects)\nprim_bounds &lt;- sub_ub_long |&gt;\n  tidytable::left_join(\n    any_resolved |&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  ) |&gt;\n  tidytable::mutate(\n    LB_primary = tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n    UB_primary = tidytable::case_when(\n      !is.na(min_adm_age_by_substance) & !is.na(min_adm_age_rec3) ~\n        pmin(as.integer(min_adm_age_by_substance)-1L, as.integer(min_adm_age_rec3)-1L),\n      !is.na(min_adm_age_by_substance) ~ as.integer(min_adm_age_by_substance)-1L,\n      !is.na(min_adm_age_rec3) ~ as.integer(min_adm_age_rec3)-1L,\n      TRUE ~ NA_integer_\n    )\n  ) |&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary)\n\n# 8) Resolve primary per (hash × sub)\nprimary_resolved &lt;- prim_bounds |&gt;\n  tidytable::left_join(prim_mode, by=c(\"hash_key\",\"primary_sub_std\")) |&gt;\n  tidytable::left_join(prim_median, by=c(\"hash_key\",\"primary_sub_std\")) |&gt;\n  tidytable::left_join(prim_sources, by=c(\"hash_key\",\"primary_sub_std\")) |&gt;\n  tidytable::left_join(\n    any_resolved |&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  ) |&gt;\n  tidytable::mutate(\n    onset_primary_final = tidytable::coalesce(onset_primary_mode, onset_primary_median),\n    # enforce primary ≥ ANY (when BOTH exist)\n    onset_primary_final = tidytable::case_when(\n      !is.na(onset_any_final) & !is.na(onset_primary_final) & onset_primary_final &lt; onset_any_final ~ NA_integer_,\n      TRUE ~ onset_primary_final\n    ),\n    PROC_PRIMARY = tidytable::case_when(\n      !is.na(onset_primary_mode) ~ paste0(\"PRIMARY=mode[\", tidytable::coalesce(sources_primary,\"cands\"), \"]\"),\n      is.na(onset_primary_mode) & !is.na(onset_primary_median) ~ paste0(\"PRIMARY=median[\", tidytable::coalesce(sources_primary,\"cands\"), \"]\"),\n      TRUE ~ \"PRIMARY=unresolved\"\n    ),\n    FLAG_PRIMARY = tidytable::case_when(\n      is.na(UB_primary) ~ \"PRIM_UB_missing\",\n      LB_primary &gt; UB_primary ~ \"PRIM_unsatisfiable(LB&gt;UB)\",\n      !is.na(onset_any_final) & !is.na(onset_primary_mode) & onset_primary_mode &lt; onset_any_final ~ \"PRIM_conflict(primary&lt;any)\",\n      !is.na(onset_any_final) & !is.na(onset_primary_median) & onset_primary_median &lt; onset_any_final ~ \"PRIM_conflict(primary&lt;any)\",\n      is.na(onset_primary_final) ~ \"PRIM_no_candidate_in_range\",\n      TRUE ~ NA_character_\n    )\n  ) |&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary,\n                    onset_primary_final, PROC_PRIMARY, FLAG_PRIMARY,\n                    n_primary_cands, sources_primary)\n\n# Join bounds and ANY result to enforce precedence\nprimary_pool &lt;- prim_long|&gt;\n  tidytable::left_join(sub_ub_long, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n                    UB_primary=pmin(as.integer(min_adm_age_by_substance)-1L,\n                                    as.integer(min_adm_age_rec3)-1L, na.rm=TRUE))|&gt;\n  tidytable::filter(cand_primary&gt;=5 & cand_primary&lt;=80)|&gt;\n  tidytable::filter(!is.na(UB_primary) & LB_primary&lt;=UB_primary)|&gt;\n  tidytable::filter(cand_primary&gt;=LB_primary & cand_primary&lt;=UB_primary)\n\n# Pick mode → median per (hash × sub)\nprim_counts &lt;- primary_pool|&gt;\n  tidytable::group_by(hash_key, primary_sub_std, cand_primary)|&gt;\n  tidytable::summarise(n_primary=tidytable::n())|&gt;\n  tidytable::ungroup()\n\nprim_mode &lt;- prim_counts|&gt;\n  tidytable::arrange(hash_key, primary_sub_std, tidytable::desc(n_primary), cand_primary)|&gt;\n  tidytable::slice_head(n=1, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::rename(onset_primary_mode=cand_primary)\n\nprim_median &lt;- primary_pool|&gt;\n  tidytable::summarise(onset_primary_median=as.integer(median(cand_primary)),\n                       .by=c(\"hash_key\",\"primary_sub_std\"))\n\nprim_sources &lt;- primary_pool|&gt;\n  tidytable::summarise(sources_primary=paste0(sort(unique(src_primary)), collapse=\"+\"),\n                       n_primary_cands=tidytable::n(),\n                       .by=c(\"hash_key\",\"primary_sub_std\"))\n\nprim_bounds &lt;- sub_ub_long|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(5L, 5L),  # placeholder before join with ANY\n                    UB_primary=pmin(as.integer(min_adm_age_by_substance)-1L,\n                                    as.integer(min_adm_age_rec3)-1L, na.rm=TRUE))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L))|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary)\n\nprimary_resolved &lt;- prim_bounds|&gt;\n  tidytable::left_join(prim_mode, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_median, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_sources, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(onset_primary_final=tidytable::coalesce(onset_primary_mode, onset_primary_median),\n                    # enforce primary &gt;= any (if both exist)\n                    onset_primary_final=tidytable::case_when(\n                      !is.na(onset_any_final) & !is.na(onset_primary_final) & onset_primary_final&lt;onset_any_final ~ NA_integer_,\n                      TRUE ~ onset_primary_final\n                    ),\n                    PROC_PRIMARY=tidytable::case_when(\n                      !is.na(onset_primary_mode)~paste0(\"PRIMARY=mode[\",tidytable::coalesce(sources_primary,\"cands\"),\"]\"),\n                      is.na(onset_primary_mode) & !is.na(onset_primary_median)~paste0(\"PRIMARY=median[\",tidytable::coalesce(sources_primary,\"cands\"),\"]\"),\n                      TRUE~\"PRIMARY=unresolved\"\n                    ),\n                    FLAG_PRIMARY=tidytable::case_when(\n                      is.na(UB_primary)~\"PRIM_UB_missing\",\n                      LB_primary&gt;UB_primary~\"PRIM_unsatisfiable(LB&gt;UB)\",\n                      !is.na(onset_any_final) & !is.na(onset_primary_mode) & onset_primary_mode&lt;onset_any_final~\"PRIM_conflict(primary&lt;any)\",\n                      !is.na(onset_any_final) & !is.na(onset_primary_median) & onset_primary_median&lt;onset_any_final~\"PRIM_conflict(primary&lt;any)\",\n                      is.na(onset_primary_final)~\"PRIM_no_candidate_in_range\",\n                      TRUE~NA_character_\n                    ))|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary,\n                    onset_primary_final, PROC_PRIMARY, FLAG_PRIMARY,\n                    n_primary_cands, sources_primary)\n\n# ── Combined outputs (long & compact) ─────────────────────────────────\nonset_resolved_from_ext &lt;- primary_resolved|&gt;\n  tidytable::left_join(any_resolved, by=\"hash_key\")|&gt;\n  tidytable::mutate(PROC=paste0(tidytable::coalesce(PROC_ANY,\"ANY=NA\"),\" | \",\n                                tidytable::coalesce(PROC_PRIMARY,\"PRIMARY=NA\")),\n                    FLAG=paste0(tidytable::coalesce(FLAG_ANY,\"\"),\n                                ifelse(!is.na(FLAG_ANY) & !is.na(FLAG_PRIMARY),\"; \",\"\"),\n                                tidytable::coalesce(FLAG_PRIMARY,\"\")))|&gt;\n  tidytable::select(hash_key, primary_sub_std,\n                    onset_any_final, LB_any, UB_any,\n                    onset_primary_final, LB_primary, UB_primary,\n                    PROC, FLAG)\n\n#One row per patient and per actual primary substance—just filtering and collapsing did the job.\nonset_resolved_from_ext_collapsed &lt;- onset_resolved_from_ext|&gt;\n  tidytable::filter(!is.na(primary_sub_std)) |&gt;   # only declared substances\n  tidytable::distinct(hash_key, primary_sub_std, .keep_all = TRUE)\n\n\nonset_resolved_from_ext|&gt;\n  tidytable::summarise(\n    any_resolved=sum(!is.na(onset_any_final)),\n    primary_resolved=sum(!is.na(onset_primary_final)),\n    any_unresolved=sum(is.na(onset_any_final)),\n    primary_unresolved=sum(is.na(onset_primary_final))\n  )|&gt;\nknitr::kable(\"markdown\", caption=\"Results of the algorithm\")\n\n\n             used    (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    5321810   284.3    8990758   480.2    8990758   480.2\nVcells 1940364080 14803.9 2787615857 21267.9 2452331116 18709.9\n\n\n\nResults of the algorithm\n\n\nany_resolved\nprimary_resolved\nany_unresolved\nprimary_unresolved\n\n\n\n\n35666\n39290\n6557\n2933\n\n\n\n\n\nWe reincorporated the resolved cases into the main database of C1 treatments.\n\n\nCode\n# Make sure you have an standardized key of substance in C1 database\nstopifnot(\nidentical(attr(table(SISTRAT23_c1_2010_2024_df_prev1r$primary_sub),\"name\"),\nattr(table(onset_resolved_from_ext $primary_sub_std),\"name\"))\n)\nlibrary(tidytable)\n\n# -- helper: integer mode with tie -&gt; smallest\nmode_pick_int &lt;- function(x){\n  x &lt;- x[!is.na(x)]\n  if(length(x)==0) return(NA_integer_)\n  tx &lt;- sort(table(x), decreasing = TRUE)\n  as.integer(names(tx)[1L])\n}\n\n# 1) Build a STRICT one-row-per-hash ANY table -------------------------\nany_by_hash &lt;-\n  onset_resolved_from_ext|&gt;\n  tidytable::select(hash_key, onset_any_final, LB_any, UB_any)|&gt;\n  # collapse to single row per hash_key; if multiple ANY values exist, take mode\n  tidytable::summarise(\n    onset_any_final = mode_pick_int(onset_any_final),\n    LB_any = suppressWarnings(min(LB_any, na.rm=TRUE)),\n    UB_any = suppressWarnings(max(UB_any, na.rm=TRUE)),\n    .by = hash_key\n  )|&gt;\n  # replace Inf/-Inf if group had all NA\n  tidytable::mutate(\n    LB_any = ifelse(is.infinite(LB_any), NA_integer_, as.integer(LB_any)),\n    UB_any = ifelse(is.infinite(UB_any), NA_integer_, as.integer(UB_any))\n  )\n\n# sanity: exactly one row per hash\nif(nrow(any_by_hash)!=nrow(tidytable::distinct(onset_resolved_from_ext, hash_key))){\n  stop(\"ANY table is not 1-row-per-hash; aborting to prevent row blow-up.\")\n}\n\n# 2) PRIMARY table is already unique on (hash_key × primary_sub_std) ----\nprimary_by &lt;-\n  onset_resolved_from_ext|&gt;\n  tidytable::select(\n    hash_key, primary_sub_std,\n    onset_primary_final, LB_primary, UB_primary,\n    PROC, FLAG\n  )\n\n# sanity: uniqueness of PRIMARY keys\ndup_ks &lt;- primary_by|&gt;tidytable::count(hash_key, primary_sub_std)|&gt;tidytable::filter(n&gt;1)\nif(nrow(dup_ks)&gt;0) stop(\"PRIMARY table has duplicate (hash × substance).\")\n\n# 3) Reintegration to episode level ------------------------------------\nSISTRAT23_c1_2010_2024_df_prev1s &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  (\\(df){\n    cat(paste0(\"5.0. Before reintegration, rows: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5.0. Before reintegration, RUNs : \", formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    df\n  })()|&gt;\n  # standardize episode primary_sub for the key\n  tidytable::mutate(primary_sub_std = tolower(primary_sub))|&gt;\n  # join ANY (one-to-many by hash_key only; row count must not change)\n  tidytable::left_join(any_by_hash, by=\"hash_key\")|&gt;\n  # join PRIMARY (many-to-one on (hash_key, primary_sub_std))\n  tidytable::left_join(primary_by, by=c(\"hash_key\",\"primary_sub_std\"),\n                       suffix=c(\"\", \"_PRIMARY\"))|&gt;\n  # produce final columns\n  tidytable::mutate(\n    age_subs_onset_rec2 = tidytable::coalesce(onset_any_final, age_subs_onset_rec),\n    age_primary_onset_rec2 = tidytable::coalesce(onset_primary_final, age_prim_subs_onset_rec),\n    # keep PROC/FLAG as provided by primary_by (already contains \"ANY=... | PRIMARY=...\")\n    PROC_onset = PROC,\n    FLAG_onset = FLAG,\n    # annotate OBS\n    OBS = tidytable::case_when(\n      !is.na(age_subs_onset_rec2) & !is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (ANY+PRIMARY)\"),\n      !is.na(age_subs_onset_rec2) &  is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (ANY only)\"),\n       is.na(age_subs_onset_rec2) & !is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (PRIMARY only)\"),\n      TRUE ~ as.character(OBS)\n    ))|&gt;\n  # drop intermediate duplicates of original PROC/FLAG if you wish\n  tidytable::select(-PROC, -FLAG)|&gt;\n  tidytable::select(-any_of(c(\"primary_sub_std\", \"onset_any_final\", \"onset_primary_final\")))|&gt;# \"LB_any\", \"UB_any\", \"LB_primary\", \"UB_primary\"\n  tidytable::rename(\"LB_age_subs_onset_rec2\"=\"LB_any\", \"UB_age_subs_onset_rec2\"=\"UB_any\", \"LB_age_primary_onset_rec2\"=\"LB_primary\", \"UB_age_primary_onset_rec2\"=\"UB_primary\")|&gt;\n  (\\(df){\n    cat(paste0(\"5.0. After reintegration, rows: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5.0. After reintegration, RUNs : \", formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    if(nrow(df)!=nrow(SISTRAT23_c1_2010_2024_df_prev1r)) stop(\"Error: row count changed after reintegration.\")\n    df\n  })()\n\n# 4) QA: episodes must be unique by rn\nqa_dup &lt;- SISTRAT23_c1_2010_2024_df_prev1s|&gt;tidytable::count(rn)|&gt;tidytable::filter(n&gt;1)\nif(nrow(qa_dup)&gt;0){\n  warning(paste0(\"Duplicated episodes after reintegration: \", nrow(qa_dup)))\n}else{\n  message(\"OK: no duplicated episodes by 'rn' after reintegration.\")\n}\n\n\nOK: no duplicated episodes by ‘rn’ after reintegration.\n\n\nCode\nif(SISTRAT23_c1_2010_2024_df_prev1s|&gt; group_by(rn) |&gt; summarise(n=n()) |&gt; filter(n&gt;1) |&gt; nrow()&gt;0) stop(\"Error: row count changed after reintegration.\")\n\n#ANY_no_candidate_in_range; PRIM_no_candidate_in_range (324) are the hard cases with neither resolvable.\n#PRIM_conflict(primary&lt;any) (7) are tiny; enforce PRIMARY ≥ ANY post-hoc or clamp.\n\n\n5.0. Before reintegration, rows: 173,728 \n5.0. Before reintegration, RUNs : 121,299 \n5.0. After reintegration, rows: 173,728 \n5.0. After reintegration, RUNs : 121,299 \n\n\nColumns recording admissible age of onset of substance use and primary use reintegrated to the main database called SISTRAT23_c1_2010_2024_df_prev1s, with the names age_subs_onset_rec2 and age_primary_onset_rec2. We kept LB and UB variables as boundaries in case of imputation. We also added the columns PROC_onset and FLAG_onset to designated the criteria used to replace values in age of onset of substance use variables and reasons for inconsistency."
  },
  {
    "objectID": "Duplicates_25_3.html#eliminate-to-comply-with-ethical-concerns",
    "href": "Duplicates_25_3.html#eliminate-to-comply-with-ethical-concerns",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "Eliminate to comply with ethical concerns",
    "text": "Eliminate to comply with ethical concerns\nFirst, the column “Código Identificación de SENDA” was completely removed, as it contained potentially sensitive information based on personal attributes. Second, since the treatment center and municipallity of residence could enable indirect reidentification of certain patients, these variables were subjected to an irreversible encryption process using the statistical package “sodium” (v.1.4.0; Ooms, J., 2024).\n\n\nCode\n# set.seed(2125)\n# # Generate and store keys FIRST (do this only once!)\n# key &lt;- sodium::keygen()\n# # Simplified working directory path\n# wdpath&lt;- paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\n# saveRDS(key, paste0(wdpath, \"/encryption_key.rds\"))  # Save key securely\n\n# Read the key back\nkey &lt;- readRDS(paste0(wdpath, \"/encryption_key.rds\")) \n\n# Function to encrypt a character vector\nencrypt_column &lt;- function(x, key) {\n  sapply(x, function(item) {\n    if (is.na(item) || item == \"\") {\n      return(NA_character_)\n    }\n    encrypted_raw &lt;- sodium::data_encrypt(charToRaw(item), key)\n    base64enc::base64encode(encrypted_raw)  # Convert to base64 for storage\n  }, USE.NAMES = FALSE)\n}\n\n# Encrypt (single block)\nSISTRAT23_c1_2010_2024_df_prev1t &lt;- SISTRAT23_c1_2010_2024_df_prev1s |&gt;\n  tidytable::mutate(\n    codigo_identificacion = encrypt_column(codigo_identificacion, key),\n    comuna_residencia = encrypt_column(comuna_residencia, key),\n    municipallity_res_cutpre18 = encrypt_column(municipallity_res_cutpre18, key),\n    nombre_centro = encrypt_column(nombre_centro, key),\n    nombre_centro_rec = encrypt_column(nombre_centro_rec, key)\n  )\n\nrm(key)\n\n# Decrypt\n# decrypted_data &lt;- SISTRAT23_c1_2010_2024_df_prev1t|&gt;\n#   tidytable::mutate(\n#     codigo_identificacion = decrypt_column(codigo_identificacion, key),\n#     nombre_centro         = decrypt_column(nombre_centro, key),\n#     nombre_centro_rec     = decrypt_column(nombre_centro_rec, key),\n#     comuna_residencia = decrypt_column(comuna_residencia, key),\n#     municipallity_res_cutpre18 = decrypt_column(municipallity_res_cutpre18, key)\n#   )\n\n\nTo close the project, we erase polars objects.\n\n\nCode\nrm(list = ls()[grepl(\"_pl$\", ls())])"
  },
  {
    "objectID": "Duplicates_25_3.html#eliminate-to-comply-with-ethical-concerns-add-subsequent-treatment-variables",
    "href": "Duplicates_25_3.html#eliminate-to-comply-with-ethical-concerns-add-subsequent-treatment-variables",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "Eliminate to comply with ethical concerns & add subsequent treatment variables",
    "text": "Eliminate to comply with ethical concerns & add subsequent treatment variables\nSince the SENDA ID, treatment center name and municipality of residence could enable indirect reidentification of certain patients, these variables were subjected to an encryption process using the statistical package “sodium” (v.1.4.0; Ooms, J., 2024).\nWe also added variables designed to capture the database longitudinal structure.\n\nOrdering & “next” episode: Sorted records by adm_date within each hash_key and used lead() to reference the next chronological treatment for the same patient.\nNumeric dates: Converted adm_date and disch_date_num_rec6_trans to numeric (days since 1970. If ongoing treatment, numeric date at last retrieval date: 2025-05-28) to compute intervals so these calculations aren’t dropped\nGap between treatments: Computed diff_bet_treat and kept only rows with a next episode (i.e., not the patient’s last record).\nBinary indicators:\n\nless_60d_diff: 1 if the gap is &lt; 60 days, else 0.\nless_45d_diff: 1 if the gap is &lt; 45 days, else 0.\nreferral``: 1 iftr_compliance_rec5 == “referral”`, else 0.\n\nBetween-episode changes: Built a text summary changes and a count changes_num comparing current vs. next episode across id_centro, tipo_de_plan, and senda.\n\n\n\nCode\n# set.seed(2125)\n# # Generate and store keys FIRST (do this only once!)\n# key &lt;- sodium::keygen()\n# # Simplified working directory path\n# wdpath&lt;- paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\n# saveRDS(key, paste0(wdpath, \"/encryption_key.rds\"))  # Save key securely\n\n# Read the key back\nkeyc1 &lt;- readRDS(paste0(wdpath, \"/encryption_key.rds\")) \n\n# Function to encrypt a character vector\nencrypt_column &lt;- function(x, key) {\n  sapply(x, function(item) {\n    if (is.na(item) || item == \"\") {\n      return(NA_character_)\n    }\n    encrypted_raw &lt;- sodium::data_encrypt(charToRaw(item), keyc1)\n    base64enc::base64encode(encrypted_raw)  # Convert to base64 for storage\n  }, USE.NAMES = FALSE)\n}\n\n# Encrypt (single block)\nSISTRAT23_c1_2010_2024_df_prev1t &lt;- SISTRAT23_c1_2010_2024_df_prev1s|&gt;\n  tidytable::mutate(\n    codigo_identificacion = encrypt_column(codigo_identificacion, keyc1),\n    comuna_residencia = encrypt_column(comuna_residencia, keyc1),\n    municipallity_res_cutpre18 = encrypt_column(municipallity_res_cutpre18, keyc1),\n    nombre_centro = encrypt_column(nombre_centro, keyc1),\n    nombre_centro_rec = encrypt_column(nombre_centro_rec, keyc1)\n  )|&gt;\n# Defining longitudinal variables for gap times\n  tidytable::arrange(hash_key, adm_date_num_rec2)|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(\n    adm_date_next_treat= tidytable::lead(adm_date_num_rec2),\n    disch_date_num_rec6_trans= tidytable::coalesce(disch_date_num_rec6, as.numeric(as.Date(\"2025-05-28\"))),\n    diff_bet_treat= adm_date_next_treat- disch_date_num_rec6_trans,\n    id_centro_next= tidytable::lead(id_centro),\n    plan_type_next= tidytable::lead(plan_type),\n    senda_next= tidytable::lead(senda))|&gt;\n  tidytable::ungroup()|&gt;\n  #tidytable::filter(!is.na(diff_bet_treat))|&gt;\n  tidytable::mutate(\n    less_60d_diff= tidytable::case_when(diff_bet_treat&lt;60~1,TRUE~0),\n    less_45d_diff= tidytable::case_when(diff_bet_treat&lt;45~1,TRUE~0),\n    referral= tidytable::case_when(grepl(\"referral\",tr_compliance_rec5)~1,TRUE~0),\n    changes= tidytable::case_when(id_centro_next!=id_centro~ \"1.1.center change\",TRUE~\"\")\n  )|&gt;\n  tidytable::mutate(\n    changes= tidytable::case_when(plan_type_next!=plan_type~ paste0(changes, \";1.2.plan type change\"),TRUE~ changes),\n    changes= tidytable::case_when(senda_next!=senda~ paste0(changes,\";1.4.senda change\"),TRUE~ changes),\n    changes_none= tidytable::case_when(changes==\"\"~1, TRUE~0),\n    changes_num= tidytable::case_when(id_centro_next!=id_centro~1, TRUE~0)\n  )|&gt;\n  tidytable::mutate(\n    changes_num= tidytable::case_when(plan_type_next!=tipo_de_plan~ changes_num+1, TRUE~ changes_num),\n    changes_num= tidytable::case_when(senda_next!=senda~ changes_num+1, TRUE~ changes_num),\n    changes_num= as.numeric(changes_num)\n  )\n\nrm(keyc1)\n\n\nif(nrow(SISTRAT23_c1_2010_2024_df_prev1t)!=nrow(SISTRAT23_c1_2010_2024_df_prev1s)) stop(\"Error: row count changed after reintegration.\")\nif(SISTRAT23_c1_2010_2024_df_prev1t|&gt; group_by(rn)|&gt; summarise(n=n())|&gt; filter(n&gt;1)|&gt; nrow()&gt;0) stop(\"Error: row count changed after reintegration.\")\n\n\n# Decrypt\n# decrypted_data &lt;- SISTRAT23_c1_2010_2024_df_prev1t|&gt;\n#   tidytable::mutate(\n#     codigo_identificacion = decrypt_column(codigo_identificacion, keyc1),\n#     nombre_centro         = decrypt_column(nombre_centro, keyc1),\n#     nombre_centro_rec     = decrypt_column(nombre_centro_rec, keyc1),\n#     comuna_residencia = decrypt_column(comuna_residencia, keyc1),\n#     municipallity_res_cutpre18 = decrypt_column(municipallity_res_cutpre18, keyc1)\n#   )\n\n\nTo close the project, we erase polars objects.\n\n\nCode\nrm(list = ls()[grepl(\"_pl$\", ls())])"
  },
  {
    "objectID": "Duplicates_25_3.html#age-of-onset-of-substance-use-user-invariant-variables",
    "href": "Duplicates_25_3.html#age-of-onset-of-substance-use-user-invariant-variables",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "3. Age of onset of substance use (user-invariant variables)",
    "text": "3. Age of onset of substance use (user-invariant variables)\nSeveral respondent-invariant variables showed multiple values for the same person across duplicated records, so we triangulated sources to resolve ambiguities. Recall bias—especially among individuals with sustained substance use—likely contributes to imprecision in reported ages.\n\nAge at onset of any drug use (age_subs_onset) (records = 62,142), had too many distinct values per patient (n = 21,950).\nAge at onset of primary substance (age_prim_subs_onset) (records = 69,284), had too many distinct values per user (n = 25,100).\n\nFirst, we flagged and excluded from analysis cases with ages of onset occurring at or after the age at admission (age_subs_onset n = 1). We also discarded invalid ages of onset for primary substance (age_prim_subs_onset n = 6).\nCases with a primary substance age of onset that preceded the age of substance use onset were discarded.\nFor context, summary statistics:\n\nage_subs_onset= median: 15 (IQR: 14–18), mean: 16.37, range: 5–74, missing: 10,896.\nage_prim_subs_onset= median: 18 (IQR: 15–23), mean: 20.24, range: 5–75, missing: 601.\n\n\n\n\nCode\nSISTRAT23_c1_2010_2024_df_prev1q|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(min_adm_age_rec3= min(adm_age_rec3, na.rm=T))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::mutate(\n    age_subs_onset_rec= tidytable::case_when(\n      min_adm_age_rec3 &lt;= age_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_subs_onset)\n    )\n  )|&gt;\n  tidytable::mutate(\n    age_prim_subs_onset_rec= tidytable::case_when(\n      min_adm_age_rec3 &lt;= age_prim_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_prim_subs_onset)\n    )\n  )|&gt;\n  tidytable::mutate(\n    age_prim_subs_onset_rec= tidytable::case_when(\n      age_prim_subs_onset &lt; age_subs_onset~ NA_integer_,\n      TRUE~ as.integer(age_prim_subs_onset)\n    )\n  )|&gt;\n  (\\(df) {\n    assign(x= \"SISTRAT23_c1_2010_2024_df_prev1r\", value= df, envir= .GlobalEnv)\n    })()\n\n\nWe created the variables age_subs_onset_rec and age_prim_subs_onset_rec in the SISTRAT23_c1_2010_2024_df_prev1r database. We replaced missing values with admission ages for records where the age of first substance use was less than or equal to the minimum admission age by HASH. Additionally, we corrected cases where the age of primary substance use onset was lower than the age of first substance use. The following table shows the amount of ages that varies within each user.\n\n\n\nCode\nprueba_age_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_subs_onset_por_hash= tidytable::n_distinct(age_subs_onset))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_subs_onset_por_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\nprueba_age_prim_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_prim_subs_onset_por_hash= tidytable::n_distinct(age_prim_subs_onset))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_prim_subs_onset_por_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\nage_subs_onset_summ &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n   tidytable::filter(hash_key %in% tidytable::pull(prueba_age_subs_onset))|&gt;\n    tidytable::group_by(hash_key)|&gt;\n    tidytable::add_count()|&gt;\n    tidytable::summarise(\n      n = mean(n),\n      age_subs_onset_p25 = quantile(age_subs_onset, 0.25, na.rm = TRUE),\n      age_subs_onset_p50 = quantile(age_subs_onset, 0.50, na.rm = TRUE),\n      age_subs_onset_p75 = quantile(age_subs_onset, 0.75, na.rm = TRUE),\n      age_subs_onset_sd  = sd(age_subs_onset, na.rm = TRUE),\n      min_val   = min(age_subs_onset, na.rm = TRUE),\n      max_val   = max(age_subs_onset, na.rm = TRUE),\n      mean_val  = mean(age_subs_onset, na.rm = TRUE)\n    )|&gt;\n    tidytable::mutate(ranges = abs(max_val - min_val))|&gt;\n    tidytable::ungroup()|&gt;\n    tidytable::mutate(\n      diff_p25_p50 = abs(age_subs_onset_p50 - age_subs_onset_p25),\n      diff_p75_p50 = abs(age_subs_onset_p50 - age_subs_onset_p75),\n      min_mean     = abs(min_val - mean_val),\n      max_mean     = abs(max_val - mean_val)\n    )|&gt;\n    tidytable::summarise(\n      avg_n        = mean(n),\n      sd_n         = sd(n),\n      avg_p25_p50  = mean(diff_p25_p50),\n      avg_p75_p50  = mean(diff_p75_p50),\n      avg_sd       = mean(age_subs_onset_sd, na.rm = TRUE),\n      avg_min_mean = mean(min_mean, na.rm = TRUE),\n      avg_max_mean = mean(max_mean, na.rm = TRUE),\n      avg_ranges   = mean(ranges, na.rm = TRUE),\n      sd_ranges    = sd(ranges, na.rm = TRUE),\n      p75_ranges   = quantile(ranges, 0.75, na.rm = TRUE),\n      p90_ranges   = quantile(ranges, 0.90, na.rm = TRUE)\n    )|&gt;\n    (\\(df) round(df, 2))()\n\nage_prim_subs_onset_summ &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n   tidytable::filter(hash_key %in% tidytable::pull(prueba_age_prim_subs_onset))|&gt;\n    tidytable::group_by(hash_key)|&gt;\n    tidytable::add_count()|&gt;\n    tidytable::summarise(\n      n = mean(n),\n      age_prim_subs_onset_p25 = quantile(age_prim_subs_onset, 0.25, na.rm = TRUE),\n      age_prim_subs_onset_p50 = quantile(age_prim_subs_onset, 0.50, na.rm = TRUE),\n      age_prim_subs_onset_p75 = quantile(age_prim_subs_onset, 0.75, na.rm = TRUE),\n      age_prim_subs_onset_sd  = sd(age_prim_subs_onset, na.rm = TRUE),\n      min_val   = min(age_prim_subs_onset, na.rm = TRUE),\n      max_val   = max(age_prim_subs_onset, na.rm = TRUE),\n      mean_val  = mean(age_prim_subs_onset, na.rm = TRUE)\n    )|&gt;\n    tidytable::mutate(ranges = abs(max_val - min_val))|&gt;\n    tidytable::ungroup()|&gt;\n    tidytable::mutate(\n      diff_p25_p50 = abs(age_prim_subs_onset_p50 - age_prim_subs_onset_p25),\n      diff_p75_p50 = abs(age_prim_subs_onset_p50 - age_prim_subs_onset_p75),\n      min_mean     = abs(min_val - mean_val),\n      max_mean     = abs(max_val - mean_val)\n    )|&gt;\n    tidytable::summarise(\n      avg_n        = mean(n),\n      sd_n         = sd(n),\n      avg_p25_p50  = mean(diff_p25_p50),\n      avg_p75_p50  = mean(diff_p75_p50),\n      avg_sd       = mean(age_prim_subs_onset_sd, na.rm = TRUE),\n      avg_min_mean = mean(min_mean, na.rm = TRUE),\n      avg_max_mean = mean(max_mean, na.rm = TRUE),\n      avg_ranges   = mean(ranges, na.rm = TRUE),\n      sd_ranges    = sd(ranges, na.rm = TRUE),\n      p75_ranges   = quantile(ranges, 0.75, na.rm = TRUE),\n      p90_ranges   = quantile(ranges, 0.90, na.rm = TRUE)\n    )|&gt;\n    (\\(df) round(df, 2))()\n\nrbind(cbind(Variable=\"Age of the Onset of Drug Use\", age_subs_onset_summ), \n      cbind(Variable=\"Age of the Onset of Drug Use Primary Substance\", age_prim_subs_onset_summ))|&gt;\n    DT::datatable(\n      caption= \"Table 2. Distribution of differences in years within users with inconsistent ages of onset\",\n      colnames= c(\"Variables\",\"Avg. Cases per User\", \"Std.Dev. Cases per User\",\"Avg. Diff. Perc 25-50\", \"Avg. Diff. Perc 75-50\",\"Avg. Std.Dev\",\"Avg. Diff. Min-Mean\",\"Avg. Diff. Max-Mean\",\"Avg. Range\", \"Std.Dev. Range\",\"Perc 75 Range\",\"Perc 90 Range\"),\n      options= list(\n        pageLength= 25,\n        scrollX= TRUE,\n        scrollY= \"150px\",\n        dom= 'Brt')\n    )\n\n\n\n\n\n\n\nThe data presented in the table reveals a notable variability in the age of onset for both drug use and primary substance use. The significant standard deviations in the “Age of the Onset of Drug Use” and “Age of the Onset of Drug Use Primary Substance” , combined with the wide ranges shown in “Avg. Range” and “Std.Dev. Range”, indicate that the ages reported by users were not consistent. To address this lack of consistency and establish a more reliable and stable value for the age of onset, we decided to use external databases (Agreements C2 to C6) as a source for this critical variable. This approach ensures that our analysis is based on more dependable and standardized data.\nHASHes with inconsistnt onset ages were grouped in invalid_age_sub_and_prim_sub_onset, and miss_age_sub_and_prim_sub_onset, for missing values (or eliminated due to inconsistencies with admission age).\n\n\nCode\n# cx_n: Number of CX records for this HASH_KEY (all rows after filtering).\n# cx_age_subs_onset: Mean of edad_inicio_consumo across this HASH_KEY’s CX records (years; numeric).\n# cx_age_prim_subs_onset: Mean of edad_inicio_sustancia_principal across this HASH_KEY’s CX records (years; numeric).\n# cx_mode_prim_sub: The most frequent normalized primary substance label for this HASH_KEY (after recoding prim_sub). Tie-breaker: alphabetical by label.\n# cx_mode_prim_sub_n: Count of rows for this HASH_KEY with cx_mode_prim_sub.\n# cx_mode_prim_sub_prop: Proportion of that mode within all non-missing prim_sub rows for this HASH_KEY (cx_mode_prim_sub_n / total non-missing prim_sub).\n# cx_age_prim_subs_onset_mean_: Mean edad_inicio_sustancia_principal for rows of that specific normalized primary substance within this HASH_KEY (years; numeric)\n\ninvisible(\"Include inconsistent onset ages\")\ninconsistent_age_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(age_subs_onset_by_hash= tidytable::n_distinct(age_subs_onset_rec))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_subs_onset_by_hash&gt;1)|&gt;\n  tidytable::distinct(hash_key)\n\ninconsistent_age_prim_subs_onset &lt;- SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key, primary_sub)|&gt;\n  tidytable::mutate(age_prim_subs_onset_by_hash_primsub= tidytable::n_distinct(age_prim_subs_onset_rec))|&gt;\n  tidytable::ungroup()|&gt;\n  tidytable::filter(age_prim_subs_onset_by_hash_primsub&gt;1)|&gt;\n  tidytable::distinct(hash_key, rn)\n#27835\n\ninvalid_age_sub_and_prim_sub_onset &lt;- unique(c(inconsistent_age_subs_onset$hash_key, inconsistent_age_prim_subs_onset$hash_key))\n\ninvisible(\"Include missing onset ages\")\nprueba_age_prim_subs_onset_miss &lt;-SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(na_per_hash = sum(is.na(age_prim_subs_onset_rec)),\n    total = n())|&gt;\n  tidytable::mutate(perc_miss= na_per_hash/total)|&gt;\n  tidytable::filter(perc_miss==1)|&gt; \n  tidytable::ungroup()\nprueba_age_subs_onset_miss &lt;-SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::summarise(na_per_hash = sum(is.na(age_subs_onset_rec)),\n    total = n())|&gt;\n  tidytable::mutate(perc_miss= na_per_hash/total)|&gt;\n  tidytable::filter(perc_miss==1)|&gt; \n  tidytable::ungroup()\n\nmiss_age_sub_and_prim_sub_onset&lt;- \nunique(c(prueba_age_subs_onset_miss$hash_key,prueba_age_prim_subs_onset_miss$hash_key))\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c2&lt;-\n    CONS_C2_25_df|&gt;\n    tidytable::filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset, miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df){\n        message(paste0(\"C2, Entries: \", nrow(df)))\n        message(paste0(\"C2, RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow()))\n        df})()|&gt;\n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub\n      ))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n          tidytable::summarise(\n            c2_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n            c2_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c2_n= tidytable::n())|&gt;\n          tidytable::ungroup()|&gt;\n          # Join the mode (most frequent primary substance) with its count and proportion\n          tidytable::left_join(\n            tidytable::filter(df, !is.na(prim_sub))|&gt;\n            tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n            tidytable::summarise(\n              c2_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n              c2_prim_sub_n= tidytable::n())|&gt;\n            tidytable::group_by(HASH_KEY)|&gt;\n            tidytable::mutate(c2_total_n= sum(c2_prim_sub_n))|&gt;\n            tidytable::arrange(HASH_KEY, -c2_prim_sub_n, prim_sub)|&gt;\n            tidytable::slice_head(n=1)|&gt;\n            tidytable::transmute(\n                HASH_KEY,\n                c2_mode_prim_sub= prim_sub,\n                c2_mode_prim_sub_n= c2_prim_sub_n,\n                c2_mode_prim_sub_prop= c2_prim_sub_n/c2_total_n),\n              by=\"HASH_KEY\")|&gt;\n          # Join wide columns: per-primary-substance mean onset age\n          tidytable::left_join(\n            tidytable::filter(df, !is.na(prim_sub))|&gt;\n            tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n            tidytable::summarise(\n                c2_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n            tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n            tidytable::mutate(col_name= paste0(\"c2_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n            tidytable::select(HASH_KEY, col_name, c2_age_prim_subs_onset_mean)|&gt;\n            tidytable::pivot_wider(names_from= col_name, values_from= c2_age_prim_subs_onset_mean),\n              by=\"HASH_KEY\")})()\n\n\nC2, Entries: 418\n\n\nC2, RUNs: 168\n\n\nCode\n# C2, Entries: 418\n# C2, RUNs: 168\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c3&lt;-  \nCONS_C3_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df){\n      message(paste0(\"C3, Entries: \", nrow(df)))\n      message(paste0(\"C3, RUNs: \", tidytable::distinct(df, HASH_KEY)|&gt; nrow()))\n      df})()|&gt;\n  tidytable::rename(prim_sub=sustancia_principal)|&gt;\n  tidytable::mutate(\n    prim_sub= tidytable::case_when(\n      grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n      grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n      grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n      grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n      grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n      grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n      grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n      grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n      grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n      grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n      TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c3_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c3_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c3_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c3_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c3_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c3_total_n= sum(c3_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c3_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c3_mode_prim_sub= prim_sub,\n            c3_mode_prim_sub_n= c3_prim_sub_n,\n            c3_mode_prim_sub_prop= c3_prim_sub_n/c3_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c3_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c3_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c3_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c3_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC3, Entries: 495\n\n\nC3, RUNs: 326\n\n\nCode\n# C3, Entries: 495\n# C3, RUNs: 326\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c4&lt;-  \nCONS_C4_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n      (message(paste0(\"C4, Entries: \", nrow(df))))\n      (message(paste0(\"C4, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n      df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c4_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c4_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c4_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c4_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c4_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c4_total_n= sum(c4_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c4_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c4_mode_prim_sub= prim_sub,\n            c4_mode_prim_sub_n= c4_prim_sub_n,\n            c4_mode_prim_sub_prop= c4_prim_sub_n/c4_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c4_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c4_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c4_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c4_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC4, Entries: 236\n\n\nC4, RUNs: 162\n\n\nCode\n# C4, Entries: 236\n# C4, RUNs: 162\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c5&lt;-  \nCONS_C5_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n        (message(paste0(\"C5, Entries: \", nrow(df))))\n        (message(paste0(\"C5, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c5_age_subs_onset= mean(as.numeric(edad_inicio_sustancia_inicial), na.rm=TRUE),\n          c5_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c5_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c5_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c5_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c5_total_n= sum(c5_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c5_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c5_mode_prim_sub= prim_sub,\n            c5_mode_prim_sub_n= c5_prim_sub_n,\n            c5_mode_prim_sub_prop= c5_prim_sub_n/c5_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c5_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c5_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c5_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c5_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC5, Entries: 129\n\n\nC5, RUNs: 90\n\n\nCode\n# C5, Entries: 129\n# C5, RUNs: 90\n\ninvisible(\"======================================================\")\ninvalid_age_sub_onset_c6&lt;-  \nCONS_C6_25_df|&gt;\n    filter(HASH_KEY%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n    (\\(df) {\n        (message(paste0(\"C6, Entries: \", nrow(df))))\n        (message(paste0(\"C6, RUNs: \", distinct(df, HASH_KEY)|&gt; nrow())))\n        df\n    })()|&gt;  \n    tidytable::rename(prim_sub=sustancia_principal)|&gt;\n    tidytable::mutate(\n      prim_sub= tidytable::case_when(\n        grepl(\"crack|pasta\",prim_sub, ignore.case=TRUE)~\"cocaine paste\",\n        grepl(\"coca\",prim_sub, ignore.case=TRUE)~\"cocaine powder\",\n        grepl(\"marihuana|marijuana\",prim_sub, ignore.case=TRUE)~\"marijuana\",\n        grepl(\"anfeta|extasis|fenil|estimul\",prim_sub, ignore.case=TRUE)~\"amphetamine-type stimulants\",\n        grepl(\"alucin|lsd|hongos\",prim_sub, ignore.case=TRUE)~\"hallucinogens\",\n        grepl(\"opi|hero|metadona\",prim_sub, ignore.case=TRUE)~\"opioids\",\n        grepl(\"sedante|hipnotico|tranquiliz\",prim_sub, ignore.case=TRUE)~\"tranquilizers/hypnotics\",\n        grepl(\"inhalable\",prim_sub, ignore.case=TRUE)~\"inhalants\",\n        grepl(\"esteroid|otros\",prim_sub, ignore.case=TRUE)~\"others\",\n        grepl(\"especif|cip-crc|sin consumo\",prim_sub, ignore.case=TRUE)~NA_character_,\n        TRUE~prim_sub))|&gt;\n    (\\(df){\n      # Overall per-HASH_KEY summary\n      tidytable::group_by(df, HASH_KEY)|&gt;\n        tidytable::summarise(\n          c6_age_subs_onset= mean(as.numeric(edad_inicio_consumo), na.rm=TRUE),\n          c6_age_prim_subs_onset= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n          c6_n= tidytable::n())|&gt;\n        tidytable::ungroup()|&gt;\n        # Join the mode (most frequent primary substance) with its count and proportion\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c6_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE),\n            c6_prim_sub_n= tidytable::n())|&gt;\n          tidytable::group_by(HASH_KEY)|&gt;\n          tidytable::mutate(c6_total_n= sum(c6_prim_sub_n))|&gt;\n          tidytable::arrange(HASH_KEY, -c6_prim_sub_n, prim_sub)|&gt;\n          tidytable::slice_head(n=1)|&gt;\n          tidytable::transmute(\n            HASH_KEY,\n            c6_mode_prim_sub= prim_sub,\n            c6_mode_prim_sub_n= c6_prim_sub_n,\n            c6_mode_prim_sub_prop= c6_prim_sub_n/c6_total_n\n          ), by=\"HASH_KEY\")|&gt;\n        # Join wide columns: per-primary-substance mean onset age\n        tidytable::left_join(\n          tidytable::filter(df, !is.na(prim_sub))|&gt;\n          tidytable::group_by(HASH_KEY, prim_sub)|&gt;\n          tidytable::summarise(\n            c6_age_prim_subs_onset_mean= mean(as.numeric(edad_inicio_sustancia_principal), na.rm=TRUE))|&gt;\n          tidytable::mutate(prim_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(prim_sub)))|&gt;\n          tidytable::mutate(col_name= paste0(\"c6_age_prim_subs_onset_mean_\", prim_sub_key))|&gt;\n          tidytable::select(HASH_KEY, col_name, c6_age_prim_subs_onset_mean)|&gt;\n          tidytable::pivot_wider(names_from= col_name, values_from= c6_age_prim_subs_onset_mean),\n            by=\"HASH_KEY\")})()\n\n\nC6, Entries: 148\n\n\nC6, RUNs: 112\n\n\nCode\n# C6, Entries: 148\n# C6, RUNs: 112\n\n\nFor missing age of onset of substance use or invalid, we contrasted with external sources.\n\n\nCode\ninvisible(\"handle the edge case of groups with only missing data, ensuring your final data frame is clean and doesn't contain unexpected Inf or -Inf values.\")\ninvalid_age_onset_ext_info&lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  tidytable::filter(hash_key%in%unique(c(invalid_age_sub_and_prim_sub_onset,miss_age_sub_and_prim_sub_onset)))|&gt;\n  (\\(df){\n    # Overall per-hash_key stats (NA-safe)\n    # age_subs_onset stats (C1)\n    #handle the edge case of groups with only missing data, ensuring your final data frame is clean and doesn't contain unexpected Inf or -Inf values.\n    overall&lt;- df|&gt;\n      tidytable::group_by(hash_key)|&gt;\n      tidytable::summarise(\n        c1_n= tidytable::n(),\n        c1_age_subs_onset_mean= if(all(is.na(age_subs_onset_rec))) NA_real_ else mean(as.numeric(age_subs_onset_rec), na.rm=TRUE),\n        c1_age_subs_onset_min = if(all(is.na(age_subs_onset_rec))) NA_real_ else min(as.numeric(age_subs_onset_rec),  na.rm=TRUE),\n        c1_age_subs_onset_max = if(all(is.na(age_subs_onset_rec))) NA_real_ else max(as.numeric(age_subs_onset_rec),  na.rm=TRUE),\n        c1_age_subs_onset_ndist= tidytable::n_distinct(age_subs_onset_rec, na.rm=TRUE),\n\n        c1_age_prim_subs_onset_mean= if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else mean(as.numeric(age_prim_subs_onset_rec), na.rm=TRUE),\n        c1_age_prim_subs_onset_min = if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else min(as.numeric(age_prim_subs_onset_rec),  na.rm=TRUE),\n        c1_age_prim_subs_onset_max = if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else max(as.numeric(age_prim_subs_onset_rec),  na.rm=TRUE),\n        c1_age_prim_subs_onset_ndist= tidytable::n_distinct(age_prim_subs_onset_rec, na.rm=TRUE)\n      )|&gt;\n      tidytable::ungroup()\n\n    # Per-primary_sub stats per hash_key\n    by_sub&lt;- df|&gt;\n      tidytable::filter(!is.na(primary_sub))|&gt;\n      tidytable::group_by(hash_key, primary_sub)|&gt;\n      tidytable::summarise(\n        c1_age_prim_subs_onset_rec_mean= if(all(is.na(age_prim_subs_onset_rec))) NA_real_ else mean(as.numeric(age_prim_subs_onset_rec), na.rm=TRUE),\n        c1_min_adm_age_by_substance= min(as.numeric(adm_age_rec3), na.rm=TRUE),\n        c1_prim_sub_n= tidytable::n()\n      )|&gt;\n      tidytable::ungroup()|&gt;\n      # Safe key for column names\n      tidytable::mutate(primary_sub_key= gsub(\"[^A-Za-z0-9]+\",\"_\", tolower(primary_sub)))\n\n    # Wide: per-substance mean\n    wide_means&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_age_prim_subs_onset_rec_mean_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_age_prim_subs_onset_rec_mean)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_age_prim_subs_onset_rec_mean)\n\n    # Wide: per-substance counts\n    wide_counts&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_prim_sub_n_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_prim_sub_n)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_prim_sub_n)\n\n    # Wide: per-substance minimum admission age\n    wide_min_adm_age&lt;- by_sub|&gt;\n      tidytable::mutate(col_name= paste0(\"c1_min_adm_age_by_subs_\", primary_sub_key))|&gt;\n      tidytable::select(hash_key, col_name, c1_min_adm_age_by_substance)|&gt;\n      tidytable::pivot_wider(names_from= col_name, values_from= c1_min_adm_age_by_substance)\n\n    overall|&gt;\n      tidytable::left_join(wide_min_adm_age, by=\"hash_key\")|&gt;\n      tidytable::left_join(wide_means, by=\"hash_key\")|&gt;\n      tidytable::left_join(wide_counts, by=\"hash_key\")\n  })()|&gt; \n# add a count to check if theres more than one primary substance\n tidytable::rowwise()|&gt;\n  # Create a new column 'total_substance_use'\n  tidytable::mutate(total_substance_use = sum(\n    tidytable::c_across(c(\n      c1_prim_sub_n_cocaine_paste,\n      c1_prim_sub_n_alcohol,\n      c1_prim_sub_n_cocaine_powder,\n      c1_prim_sub_n_opioids,\n      c1_prim_sub_n_marijuana,\n      c1_prim_sub_n_amphetamine_type_stimulants,\n      c1_prim_sub_n_tranquilizers_hypnotics,\n      c1_prim_sub_n_inhalants,\n      c1_prim_sub_n_dissociatives,\n      c1_prim_sub_n_others,\n      c1_prim_sub_n_hallucinogens\n    )),na.rm = TRUE\n  ))|&gt;\n  # Ungroup the data frame to return it to a normal data frame format\n  tidytable::ungroup()|&gt;\n  tidytable::mutate(multiple_prim_sub= ifelse(total_substance_use&gt;1,1,0))\n\n\n\nmessage(paste0(\"We calculated summaries for inconsistent or missing ages (patients= \", formatC(nrow(invalid_age_onset_ext_info), big.mark=\",\"),\")\"))\n\n\nWe calculated summaries for inconsistent or missing ages (patients= 33,899)\n\n\nCode\n#We calculated summaries for inconsistent or missing ages (patients= 33,898)\n\n\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_\n\ninvalid_age_onset_ext_info_w_c2c6 &lt;- \n  invalid_age_onset_ext_info|&gt;\n  tidytable::left_join(tidytable::distinct(SISTRAT23_c1_2010_2024_df_prev1r[, c(\"hash_key\", \"min_adm_age_rec3\")], .keep_all = TRUE), by=\"hash_key\", multiple = \"first\")|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c2, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c3, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c4, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c5, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  tidytable::left_join(invalid_age_sub_onset_c6, by = c(\"hash_key\" = \"HASH_KEY\"))|&gt;\n  (\\(df) {\n      stopifnot(nrow(df) == nrow(invalid_age_onset_ext_info))\n      df\n  })()\n\ninvalid_age_onset_ext_info_w_c2c6|&gt;\n  tidytable::mutate(hash_key= as.numeric(factor(hash_key)))|&gt;\n  rio::export(paste0(getwd(),\"/_out/inconsistent_subs_use_onset_any_prim_sub_w_c2c6.xlsx\"))\n\n\nWe implemented an algorithm to resolve inconsistencies in substance use onset age:\n\n\nCode\nwdpath&lt;-paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\nbpmn::bpmn(paste0(wdpath, \"cons/_input/diagram_age_onset.bpmn\"))\n\n\n\n\nFigure 1. Decision Tree for the Users with more than one value in a User-Invariant Variable\n\n\n1. Pooled Potential Candidates - For each individual, we gathered all potential onset ages from: - Any substance: Columns labeled _age_subs_onset - Primary substance: Columns labeled _age_prim_subs_onset_mean_[substance]\n2. Established Validity Boundaries - Universal Rules: - Minimum age: 5 years - Maximum age: 80 years - Substance-Specific Rules: - Any substance: Onset age &lt; (min_adm_age_rec3 - 1) - Primary substance: - Onset age &lt; Minimum treatment admission age for that substance - Onset age ≥ Onset age of all other substances (must be same or later)\n3. Filter Valid Candidates - Discarded values violating: - Universal age boundaries [5-80] - Substance-specific rules above - Missing values\n4. Resolve Conflicts - Selected final value from remaining candidates: 1. Mode: Most frequently occurring value. Example: If ages [12, 12, 14] remain → select 12 2. Tiebreaker: Median if no clear mode. Example: If ages [12, 14, 14] remain → select 14 3. Unresolved: If no valid candidates remain\n5. Label Outcomes - Created two tracking columns: - PROC (Resolution Method): - ANY=mode[value] - PRIMARY=median[value] - UNRESOLVED - FLAG (Rejection Reason): - UB_missing: Upper bound missing - LB&gt;UB: Lower bound &gt; upper bound - conflict(primary&lt;any): Primary substance violates “≥ all others” rule - no_candidate_in_range: No values in valid range\n\n\nCode\n#To test chunk\n# pre) Remove intermediate objects created during your pipelines\nobjects_to_remove &lt;-\n    c(\n        # main ext + resolved blocks\n        \"ext\",\n        \"any_cols\",\"any_long\",\"any_counts\",\"any_mode\",\"any_median\",\"any_sources\",\n        \"any_bounds\",\"any_resolved\",\n        # primary-by-substance blocks\n        \"sub_ub_long\",\"prim_cols\",\"prim_long\",\"prim_has_cand\",\"subcount_cols\",\n        \"subs_used\",\"valid_subs\",\"primary_pool\",\"prim_counts\",\"prim_mode\",\n        \"prim_median\",\"prim_sources\",\"prim_bounds\",\"primary_resolved\",\n        \"onset_resolved_from_ext\",\"onset_resolved_from_ext_collapsed\"\n    )\n\nrm(list = intersect(ls(envir = .GlobalEnv), objects_to_remove), envir = .GlobalEnv)\ngc()\n\next&lt;-\ninvalid_age_onset_ext_info_w_c2c6\n# ── ANY candidates (C1–C6) ────────────────────────────────────────────\n# pick columns that look like *_age_subs_onset (but not the per-primary ones)\nany_cols &lt;- names(ext)\nany_cols &lt;- any_cols[grepl(\"(?:^|_)age_subs_onset(?:$|_)\", any_cols, perl=TRUE) &\n                     !grepl(\"prim\", any_cols, ignore.case=TRUE)]\n\nany_long &lt;- ext|&gt;\n  tidytable::select(tidytable::any_of(c(\"hash_key\",\"min_adm_age_rec3\", any_cols)))|&gt;\n  tidytable::pivot_longer(cols=tidytable::all_of(any_cols),\n                          names_to=\"src_any\",\n                          values_to=\"cand_any\")|&gt;\n  tidytable::mutate(cand_any=as.numeric(cand_any))|&gt;\n  tidytable::filter(!is.na(cand_any))|&gt;\n  tidytable::mutate(LB_any=5L,\n                    UB_any=ifelse(!is.na(min_adm_age_rec3), as.integer(min_adm_age_rec3)-1L, NA_integer_))|&gt;\n  tidytable::filter(cand_any&gt;=5 & cand_any&lt;=80)|&gt;\n  tidytable::filter(!is.na(UB_any) & cand_any&lt;=UB_any)\n\n# mode, median, sources, counts\nany_counts &lt;- any_long|&gt;\n  tidytable::group_by(hash_key, cand_any)|&gt;\n  tidytable::summarise(n_any=tidytable::n())|&gt;\n  tidytable::ungroup()\n\nany_mode &lt;- any_counts|&gt;\n  tidytable::arrange(hash_key, tidytable::desc(n_any), cand_any)|&gt;\n  tidytable::slice_head(n=1, by=\"hash_key\")|&gt;\n  tidytable::rename(onset_any_mode=cand_any)\n\nany_median &lt;- any_long|&gt;\n  tidytable::summarise(onset_any_median=as.integer(median(cand_any)),\n                       .by=\"hash_key\")\n\nany_sources &lt;- any_long|&gt;\n  tidytable::summarise(sources_any=paste0(sort(unique(src_any)), collapse=\"+\"),\n                       n_any_cands=tidytable::n(), .by=\"hash_key\")\n\nany_bounds &lt;- ext|&gt;\n  tidytable::select(hash_key, min_adm_age_rec3)|&gt;\n  tidytable::distinct()|&gt;\n  tidytable::mutate(LB_any=5L,\n                    UB_any=ifelse(!is.na(min_adm_age_rec3), as.integer(min_adm_age_rec3)-1L, NA_integer_))\n\nany_resolved &lt;- any_bounds|&gt;\n  tidytable::left_join(any_mode, by=\"hash_key\")|&gt;\n  tidytable::left_join(any_median, by=\"hash_key\")|&gt;\n  tidytable::left_join(any_sources, by=\"hash_key\")|&gt;\n  tidytable::mutate(onset_any_final=tidytable::coalesce(onset_any_mode, onset_any_median),\n                    PROC_ANY=tidytable::case_when(\n                      !is.na(onset_any_mode)~paste0(\"ANY=mode[\",tidytable::coalesce(sources_any,\"cands\"),\"]\"),\n                      is.na(onset_any_mode) & !is.na(onset_any_median)~paste0(\"ANY=median[\",tidytable::coalesce(sources_any,\"cands\"),\"]\"),\n                      TRUE~\"ANY=unresolved\"\n                    ),\n                    FLAG_ANY=tidytable::case_when(\n                      is.na(UB_any)~\"ANY_UB_missing\",\n                      LB_any&gt;UB_any~\"ANY_unsatisfiable(LB&gt;UB)\",\n                      is.na(onset_any_final)~\"ANY_no_candidate_in_range\",\n                      TRUE~NA_character_\n                    ))|&gt;\n  tidytable::select(hash_key, LB_any, UB_any, onset_any_final, PROC_ANY, FLAG_ANY, n_any_cands, sources_any)\n\n# ── PRIMARY-sub candidates (C1–C6) ─────────────────────────────────────\n# Per-(hash × sub) UB from c1_min_adm_age_by_subs_* (wide -&gt; long)\nsub_ub_long &lt;- ext|&gt;\n  tidytable::select(hash_key, min_adm_age_rec3, tidytable::starts_with(\"c1_min_adm_age_by_subs_\"))|&gt;\n  tidytable::pivot_longer(cols=tidytable::starts_with(\"c1_min_adm_age_by_subs_\"),\n                          names_to=\"sub_col\",\n                          values_to=\"min_adm_age_by_substance\")|&gt;\n  tidytable::mutate(sub_key=gsub(\"^c1_min_adm_age_by_subs_\",\"\", sub_col),\n                    primary_sub_std=subkey_to_label(sub_key))|&gt;\n  tidytable::select(hash_key, primary_sub_std, min_adm_age_by_substance, min_adm_age_rec3)|&gt;\n  tidytable::filter(!is.na(primary_sub_std))\n\n# Gather per-substance onset candidates from any source columns:\n# pattern examples in your file:\n#   c1_age_prim_subs_onset_rec_mean_alcohol\n#   c2_age_prim_subs_onset_mean_cocaine_paste\n#   c5_age_prim_subs_onset_mean_opioids\nprim_cols &lt;- names(ext)\nprim_cols &lt;- prim_cols[grepl(\"^c[1-6]_age_prim_subs_onset.*_mean_\", prim_cols)]\n\nprim_long &lt;- ext|&gt;\n  tidytable::select(hash_key, tidytable::all_of(prim_cols))|&gt;\n  tidytable::pivot_longer(cols=tidytable::all_of(prim_cols),\n                          names_to=\"raw_name\",\n                          values_to=\"cand_primary\")|&gt;\n  tidytable::mutate(cand_primary=as.numeric(cand_primary))|&gt;\n  tidytable::filter(!is.na(cand_primary))|&gt;\n  # split \"raw_name\" into \"src_primary\" and \"sub_key\"\n  tidytable::mutate(src_primary=sub(\"^((c[1-6]_age_prim_subs_onset.*_mean))_.*$\",\"\\\\1\", raw_name),\n                    sub_key=sub(\"^c[1-6]_age_prim_subs_onset.*_mean_\",\"\", raw_name),\n                    primary_sub_std=subkey_to_label(sub_key))|&gt;\n  tidytable::select(hash_key, primary_sub_std, cand_primary, src_primary)|&gt;\n  tidytable::filter(!is.na(primary_sub_std))\n\n# 1) Substances with at least one valid candidate value (from c[1-6]_age_prim_subs_onset*_mean_*)\nprim_has_cand &lt;- prim_long|&gt;\n  tidytable::distinct(hash_key, primary_sub_std)\n\n# 2) Substances really used by a patient (if c1_prim_sub_n_* columns exist)\nsubcount_cols &lt;- names(ext)\nsubcount_cols &lt;- subcount_cols[grepl(\"^c1_prim_sub_n_\", subcount_cols)]\n\nsubs_used &lt;- NULL\nif(length(subcount_cols)&gt;0){\n  subs_used &lt;- ext|&gt;\n    tidytable::select(hash_key, tidytable::all_of(subcount_cols))|&gt;\n    tidytable::pivot_longer(cols=tidytable::all_of(subcount_cols),\n                            names_to=\"sub_col\",\n                            values_to=\"n_sub\")|&gt;\n    tidytable::mutate(sub_key=gsub(\"^c1_prim_sub_n_\",\"\", sub_col),\n                      primary_sub_std=subkey_to_label(sub_key))|&gt;\n    # If you don't have subkey_to_label, use:\n    # tidytable::mutate(primary_sub_std=gsub(\"_\",\" \", sub_key))|&gt;\n    tidytable::filter(!is.na(n_sub) & n_sub&gt;0)|&gt;\n    tidytable::distinct(hash_key, primary_sub_std)\n} else {\n  # no count columns present → empty table with same columns\n  subs_used &lt;- prim_has_cand[0,]\n}\n\n# 3) Valid set of substances per patient = (with candidates) ∪ (used ≥ 1)\nvalid_subs &lt;- tidytable::bind_rows(prim_has_cand, subs_used)|&gt;\n  tidytable::distinct(hash_key, primary_sub_std)\n\n# 4) Restrict UB-by-substance bounds to valid substances (filter AFTER they exist)\nsub_ub_long &lt;- sub_ub_long|&gt;\n  tidytable::semi_join(valid_subs, by=c(\"hash_key\",\"primary_sub_std\"))\n\n# 5) Build the primary_pool (now it exists, so you can semi_join if you still want)\nprimary_pool &lt;- prim_long|&gt;\n  tidytable::left_join(sub_ub_long, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(\n    any_resolved|&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  )|&gt;\n  # Safe LB/UB: avoid pmin(..., na.rm=TRUE) → Inf\n  tidytable::mutate(\n    LB_primary = tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n    UB_primary = tidytable::case_when(\n      !is.na(min_adm_age_by_substance) & !is.na(min_adm_age_rec3) ~\n        pmin(as.integer(min_adm_age_by_substance)-1L, as.integer(min_adm_age_rec3)-1L),\n      !is.na(min_adm_age_by_substance) ~ as.integer(min_adm_age_by_substance)-1L,\n      !is.na(min_adm_age_rec3) ~ as.integer(min_adm_age_rec3)-1L,\n      TRUE ~ NA_integer_\n    )\n  )|&gt;\n  tidytable::filter(cand_primary&gt;=5 & cand_primary&lt;=80)|&gt;\n  tidytable::filter(!is.na(UB_primary) & LB_primary&lt;=UB_primary)|&gt;\n  tidytable::filter(cand_primary&gt;=LB_primary & cand_primary&lt;=UB_primary)|&gt;\n  tidytable::semi_join(valid_subs, by=c(\"hash_key\",\"primary_sub_std\"))\n\n# 6) Mode/median/sources on the filtered pool\nprim_counts &lt;- primary_pool|&gt;\n  tidytable::group_by(hash_key, primary_sub_std, cand_primary)|&gt;\n  tidytable::summarise(n_primary=tidytable::n())|&gt;\n  tidytable::ungroup()\n\nprim_mode &lt;- prim_counts|&gt;\n  tidytable::arrange(hash_key, primary_sub_std, tidytable::desc(n_primary), cand_primary)|&gt;\n  tidytable::slice_head(n=1, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::rename(onset_primary_mode=cand_primary)\n\nprim_median &lt;- primary_pool|&gt;\n  tidytable::summarise(\n    onset_primary_median=as.integer(median(cand_primary)),\n    .by=c(\"hash_key\",\"primary_sub_std\")\n  )\n\nprim_sources &lt;- primary_pool|&gt;\n  tidytable::summarise(\n    sources_primary=paste0(sort(unique(src_primary)), collapse=\"+\"),\n    n_primary_cands=tidytable::n(),\n    .by=c(\"hash_key\",\"primary_sub_std\")\n  )\n\n# 7) Primary bounds (recompute cleanly; no use of undefined objects)\nprim_bounds &lt;- sub_ub_long|&gt;\n  tidytable::left_join(\n    any_resolved|&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  )|&gt;\n  tidytable::mutate(\n    LB_primary = tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n    UB_primary = tidytable::case_when(\n      !is.na(min_adm_age_by_substance) & !is.na(min_adm_age_rec3) ~\n        pmin(as.integer(min_adm_age_by_substance)-1L, as.integer(min_adm_age_rec3)-1L),\n      !is.na(min_adm_age_by_substance) ~ as.integer(min_adm_age_by_substance)-1L,\n      !is.na(min_adm_age_rec3) ~ as.integer(min_adm_age_rec3)-1L,\n      TRUE ~ NA_integer_\n    )\n  )|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary)\n\n# 8) Resolve primary per (hash × sub)\nprimary_resolved &lt;- prim_bounds|&gt;\n  tidytable::left_join(prim_mode, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_median, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_sources, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(\n    any_resolved|&gt; tidytable::select(hash_key, onset_any_final),\n    by=\"hash_key\"\n  )|&gt;\n  tidytable::mutate(\n    onset_primary_final = tidytable::coalesce(onset_primary_mode, onset_primary_median),\n    # enforce primary ≥ ANY (when BOTH exist)\n    onset_primary_final = tidytable::case_when(\n      !is.na(onset_any_final) & !is.na(onset_primary_final) & onset_primary_final &lt; onset_any_final ~ NA_integer_,\n      TRUE ~ onset_primary_final\n    ),\n    PROC_PRIMARY = tidytable::case_when(\n      !is.na(onset_primary_mode) ~ paste0(\"PRIMARY=mode[\", tidytable::coalesce(sources_primary,\"cands\"), \"]\"),\n      is.na(onset_primary_mode) & !is.na(onset_primary_median) ~ paste0(\"PRIMARY=median[\", tidytable::coalesce(sources_primary,\"cands\"), \"]\"),\n      TRUE ~ \"PRIMARY=unresolved\"\n    ),\n    FLAG_PRIMARY = tidytable::case_when(\n      is.na(UB_primary) ~ \"PRIM_UB_missing\",\n      LB_primary &gt; UB_primary ~ \"PRIM_unsatisfiable(LB&gt;UB)\",\n      !is.na(onset_any_final) & !is.na(onset_primary_mode) & onset_primary_mode &lt; onset_any_final ~ \"PRIM_conflict(primary&lt;any)\",\n      !is.na(onset_any_final) & !is.na(onset_primary_median) & onset_primary_median &lt; onset_any_final ~ \"PRIM_conflict(primary&lt;any)\",\n      is.na(onset_primary_final) ~ \"PRIM_no_candidate_in_range\",\n      TRUE ~ NA_character_\n    )\n  )|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary,\n                    onset_primary_final, PROC_PRIMARY, FLAG_PRIMARY,\n                    n_primary_cands, sources_primary)\n\n# Join bounds and ANY result to enforce precedence\nprimary_pool &lt;- prim_long|&gt;\n  tidytable::left_join(sub_ub_long, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L),\n                    UB_primary=pmin(as.integer(min_adm_age_by_substance)-1L,\n                                    as.integer(min_adm_age_rec3)-1L, na.rm=TRUE))|&gt;\n  tidytable::filter(cand_primary&gt;=5 & cand_primary&lt;=80)|&gt;\n  tidytable::filter(!is.na(UB_primary) & LB_primary&lt;=UB_primary)|&gt;\n  tidytable::filter(cand_primary&gt;=LB_primary & cand_primary&lt;=UB_primary)\n\n# Pick mode → median per (hash × sub)\nprim_counts &lt;- primary_pool|&gt;\n  tidytable::group_by(hash_key, primary_sub_std, cand_primary)|&gt;\n  tidytable::summarise(n_primary=tidytable::n())|&gt;\n  tidytable::ungroup()\n\nprim_mode &lt;- prim_counts|&gt;\n  tidytable::arrange(hash_key, primary_sub_std, tidytable::desc(n_primary), cand_primary)|&gt;\n  tidytable::slice_head(n=1, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::rename(onset_primary_mode=cand_primary)\n\nprim_median &lt;- primary_pool|&gt;\n  tidytable::summarise(onset_primary_median=as.integer(median(cand_primary)),\n                       .by=c(\"hash_key\",\"primary_sub_std\"))\n\nprim_sources &lt;- primary_pool|&gt;\n  tidytable::summarise(sources_primary=paste0(sort(unique(src_primary)), collapse=\"+\"),\n                       n_primary_cands=tidytable::n(),\n                       .by=c(\"hash_key\",\"primary_sub_std\"))\n\nprim_bounds &lt;- sub_ub_long|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(5L, 5L),  # placeholder before join with ANY\n                    UB_primary=pmin(as.integer(min_adm_age_by_substance)-1L,\n                                    as.integer(min_adm_age_rec3)-1L, na.rm=TRUE))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(LB_primary=tidytable::coalesce(pmax(5L, as.integer(onset_any_final)), 5L))|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary)\n\nprimary_resolved &lt;- prim_bounds|&gt;\n  tidytable::left_join(prim_mode, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_median, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(prim_sources, by=c(\"hash_key\",\"primary_sub_std\"))|&gt;\n  tidytable::left_join(any_resolved|&gt;\n                         tidytable::select(hash_key, onset_any_final),\n                       by=\"hash_key\")|&gt;\n  tidytable::mutate(onset_primary_final=tidytable::coalesce(onset_primary_mode, onset_primary_median),\n                    # enforce primary &gt;= any (if both exist)\n                    onset_primary_final=tidytable::case_when(\n                      !is.na(onset_any_final) & !is.na(onset_primary_final) & onset_primary_final&lt;onset_any_final ~ NA_integer_,\n                      TRUE ~ onset_primary_final\n                    ),\n                    PROC_PRIMARY=tidytable::case_when(\n                      !is.na(onset_primary_mode)~paste0(\"PRIMARY=mode[\",tidytable::coalesce(sources_primary,\"cands\"),\"]\"),\n                      is.na(onset_primary_mode) & !is.na(onset_primary_median)~paste0(\"PRIMARY=median[\",tidytable::coalesce(sources_primary,\"cands\"),\"]\"),\n                      TRUE~\"PRIMARY=unresolved\"\n                    ),\n                    FLAG_PRIMARY=tidytable::case_when(\n                      is.na(UB_primary)~\"PRIM_UB_missing\",\n                      LB_primary&gt;UB_primary~\"PRIM_unsatisfiable(LB&gt;UB)\",\n                      !is.na(onset_any_final) & !is.na(onset_primary_mode) & onset_primary_mode&lt;onset_any_final~\"PRIM_conflict(primary&lt;any)\",\n                      !is.na(onset_any_final) & !is.na(onset_primary_median) & onset_primary_median&lt;onset_any_final~\"PRIM_conflict(primary&lt;any)\",\n                      is.na(onset_primary_final)~\"PRIM_no_candidate_in_range\",\n                      TRUE~NA_character_\n                    ))|&gt;\n  tidytable::select(hash_key, primary_sub_std, LB_primary, UB_primary,\n                    onset_primary_final, PROC_PRIMARY, FLAG_PRIMARY,\n                    n_primary_cands, sources_primary)\n\n# ── Combined outputs (long & compact) ─────────────────────────────────\nonset_resolved_from_ext &lt;- primary_resolved|&gt;\n  tidytable::left_join(any_resolved, by=\"hash_key\")|&gt;\n  tidytable::mutate(PROC=paste0(tidytable::coalesce(PROC_ANY,\"ANY=NA\"),\" | \",\n                                tidytable::coalesce(PROC_PRIMARY,\"PRIMARY=NA\")),\n                    FLAG=paste0(tidytable::coalesce(FLAG_ANY,\"\"),\n                                ifelse(!is.na(FLAG_ANY) & !is.na(FLAG_PRIMARY),\"; \",\"\"),\n                                tidytable::coalesce(FLAG_PRIMARY,\"\")))|&gt;\n  tidytable::select(hash_key, primary_sub_std,\n                    onset_any_final, LB_any, UB_any,\n                    onset_primary_final, LB_primary, UB_primary,\n                    PROC, FLAG)\n\n#One row per patient and per actual primary substance—just filtering and collapsing did the job.\nonset_resolved_from_ext_collapsed &lt;- onset_resolved_from_ext|&gt;\n  tidytable::filter(!is.na(primary_sub_std))|&gt;   # only declared substances\n  tidytable::distinct(hash_key, primary_sub_std, .keep_all = TRUE)\n\n\nonset_resolved_from_ext|&gt;\n  tidytable::summarise(\n    any_resolved=sum(!is.na(onset_any_final)),\n    primary_resolved=sum(!is.na(onset_primary_final)),\n    any_unresolved=sum(is.na(onset_any_final)),\n    primary_unresolved=sum(is.na(onset_primary_final))\n  )|&gt;\nknitr::kable(\"markdown\", caption=\"Results of the algorithm\")\n\n\n             used    (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    5350372   285.8    9072005   484.5    9072005   484.5\nVcells 1955808765 14921.7 3352345654 25576.4 2364978772 18043.4\n\n\n\nResults of the algorithm\n\n\nany_resolved\nprimary_resolved\nany_unresolved\nprimary_unresolved\n\n\n\n\n35668\n39293\n6557\n2932\n\n\n\n\n\nWe reincorporated the resolved cases into the main database of C1 treatments.\n\n\nCode\n# Make sure you have an standardized key of substance in C1 database\nstopifnot(\nidentical(attr(table(SISTRAT23_c1_2010_2024_df_prev1r$primary_sub),\"name\"),\nattr(table(onset_resolved_from_ext $primary_sub_std),\"name\"))\n)\nlibrary(tidytable)\n\n# -- helper: integer mode with tie -&gt; smallest\nmode_pick_int &lt;- function(x){\n  x &lt;- x[!is.na(x)]\n  if(length(x)==0) return(NA_integer_)\n  tx &lt;- sort(table(x), decreasing = TRUE)\n  as.integer(names(tx)[1L])\n}\n\n# 1) Build a STRICT one-row-per-hash ANY table -------------------------\nany_by_hash &lt;-\n  onset_resolved_from_ext|&gt;\n  tidytable::select(hash_key, onset_any_final, LB_any, UB_any)|&gt;\n  # collapse to single row per hash_key; if multiple ANY values exist, take mode\n  tidytable::summarise(\n    onset_any_final = mode_pick_int(onset_any_final),\n    LB_any = suppressWarnings(min(LB_any, na.rm=TRUE)),\n    UB_any = suppressWarnings(max(UB_any, na.rm=TRUE)),\n    .by = hash_key\n  )|&gt;\n  # replace Inf/-Inf if group had all NA\n  tidytable::mutate(\n    LB_any = ifelse(is.infinite(LB_any), NA_integer_, as.integer(LB_any)),\n    UB_any = ifelse(is.infinite(UB_any), NA_integer_, as.integer(UB_any))\n  )\n\n# sanity: exactly one row per hash\nif(nrow(any_by_hash)!=nrow(tidytable::distinct(onset_resolved_from_ext, hash_key))){\n  stop(\"ANY table is not 1-row-per-hash; aborting to prevent row blow-up.\")\n}\n\n# 2) PRIMARY table is already unique on (hash_key × primary_sub_std) ----\nprimary_by &lt;-\n  onset_resolved_from_ext|&gt;\n  tidytable::select(\n    hash_key, primary_sub_std,\n    onset_primary_final, LB_primary, UB_primary,\n    PROC, FLAG\n  )\n\n# sanity: uniqueness of PRIMARY keys\ndup_ks &lt;- primary_by|&gt;tidytable::count(hash_key, primary_sub_std)|&gt;tidytable::filter(n&gt;1)\nif(nrow(dup_ks)&gt;0) stop(\"PRIMARY table has duplicate (hash × substance).\")\n\n# 3) Reintegration to episode level ------------------------------------\nSISTRAT23_c1_2010_2024_df_prev1s &lt;-\n  SISTRAT23_c1_2010_2024_df_prev1r|&gt;\n  (\\(df){\n    cat(paste0(\"5.0. Before reintegration, rows: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5.0. Before reintegration, RUNs : \", formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    df\n  })()|&gt;\n  # standardize episode primary_sub for the key\n  tidytable::mutate(primary_sub_std = tolower(primary_sub))|&gt;\n  # join ANY (one-to-many by hash_key only; row count must not change)\n  tidytable::left_join(any_by_hash, by=\"hash_key\")|&gt;\n  # join PRIMARY (many-to-one on (hash_key, primary_sub_std))\n  tidytable::left_join(primary_by, by=c(\"hash_key\",\"primary_sub_std\"),\n                       suffix=c(\"\", \"_PRIMARY\"))|&gt;\n  # produce final columns\n  tidytable::mutate(\n    age_subs_onset_rec2 = tidytable::coalesce(onset_any_final, age_subs_onset_rec),\n    age_primary_onset_rec2 = tidytable::coalesce(onset_primary_final, age_prim_subs_onset_rec),\n    # keep PROC/FLAG as provided by primary_by (already contains \"ANY=... | PRIMARY=...\")\n    PROC_onset = PROC,\n    FLAG_onset = FLAG,\n    # annotate OBS\n    OBS = tidytable::case_when(\n      !is.na(age_subs_onset_rec2) & !is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (ANY+PRIMARY)\"),\n      !is.na(age_subs_onset_rec2) &  is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (ANY only)\"),\n       is.na(age_subs_onset_rec2) & !is.na(age_primary_onset_rec2)~ paste0(as.character(OBS), \";\", \"5.0.Onset resolution integrated (PRIMARY only)\"),\n      TRUE ~ as.character(OBS)\n    ))|&gt;\n  # drop intermediate duplicates of original PROC/FLAG if you wish\n  tidytable::select(-PROC, -FLAG)|&gt;\n  tidytable::select(-any_of(c(\"primary_sub_std\", \"onset_any_final\", \"onset_primary_final\")))|&gt;# \"LB_any\", \"UB_any\", \"LB_primary\", \"UB_primary\"\n  tidytable::rename(\"LB_age_subs_onset_rec2\"=\"LB_any\", \"UB_age_subs_onset_rec2\"=\"UB_any\", \"LB_age_primary_onset_rec2\"=\"LB_primary\", \"UB_age_primary_onset_rec2\"=\"UB_primary\")|&gt;\n  (\\(df){\n    cat(paste0(\"5.0. After reintegration, rows: \", formatC(nrow(df), big.mark=\",\")),\"\\n\")\n    cat(paste0(\"5.0. After reintegration, RUNs : \", formatC(nrow(tidytable::distinct(df, hash_key)), big.mark=\",\")),\"\\n\")\n    if(nrow(df)!=nrow(SISTRAT23_c1_2010_2024_df_prev1r)) stop(\"Error: row count changed after reintegration.\")\n    df\n  })()\n\n# 4) QA: episodes must be unique by rn\nqa_dup &lt;- SISTRAT23_c1_2010_2024_df_prev1s|&gt;tidytable::count(rn)|&gt;tidytable::filter(n&gt;1)\nif(nrow(qa_dup)&gt;0){\n  warning(paste0(\"Duplicated episodes after reintegration: \", nrow(qa_dup)))\n}else{\n  message(\"OK: no duplicated episodes by 'rn' after reintegration.\")\n}\n\n\nOK: no duplicated episodes by ‘rn’ after reintegration.\n\n\nCode\nif(SISTRAT23_c1_2010_2024_df_prev1s|&gt; group_by(rn)|&gt; summarise(n=n())|&gt; filter(n&gt;1)|&gt; nrow()&gt;0) stop(\"Error: row count changed after reintegration.\")\n\n#ANY_no_candidate_in_range; PRIM_no_candidate_in_range (324) are the hard cases with neither resolvable.\n#PRIM_conflict(primary&lt;any) (7) are tiny; enforce PRIMARY ≥ ANY post-hoc or clamp.\n\n\n5.0. Before reintegration, rows: 173,728 \n5.0. Before reintegration, RUNs : 121,299 \n5.0. After reintegration, rows: 173,728 \n5.0. After reintegration, RUNs : 121,299 \n\n\nColumns recording admissible age of onset of substance use and primary use reintegrated to the main database called SISTRAT23_c1_2010_2024_df_prev1s, with the names age_subs_onset_rec2 and age_primary_onset_rec2. We kept LB and UB variables as boundaries in case of imputation. We also added the columns PROC_onset and FLAG_onset to designated the criteria used to replace values in age of onset of substance use variables and reasons for inconsistency."
  },
  {
    "objectID": "Duplicates_25_3.html#de-identification-and-longitudinal-feature-engineering",
    "href": "Duplicates_25_3.html#de-identification-and-longitudinal-feature-engineering",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "De-identification and longitudinal feature engineering",
    "text": "De-identification and longitudinal feature engineering\nSince the SENDA ID, treatment center name and municipality of residence could enable indirect reidentification of certain patients, these variables were subjected to an encryption process using the statistical package “sodium” (v.1.4.0; Ooms, J., 2024).\nWe also added variables designed to capture the database longitudinal structure.\n\nOrdering & “next” episode: Sorted records by adm_date within each hash_key and used lead() to reference the next chronological treatment for the same patient.\nNumeric dates: Converted adm_date and disch_date_num_rec6_trans to numeric (days since 1970. If ongoing treatment, numeric date at last retrieval date: 2025-05-28) to compute intervals so these calculations aren’t dropped\nGap between treatments: Computed diff_bet_treat and kept only rows with a next episode (i.e., not the patient’s last record).\nBinary indicators:\n\nless_60d_diff: 1 if the gap is &lt; 60 days, else 0.\nless_45d_diff: 1 if the gap is &lt; 45 days, else 0.\nreferral``: 1 iftr_compliance_rec6 == “referral”`, else 0.\n\nBetween-episode changes: Built a text summary changes and a count changes_num comparing current vs. next episode across id_centro, tipo_de_plan, and senda.\n\n\n\nCode\n# set.seed(2125)\n# # Generate and store keys FIRST (do this only once!)\n# key &lt;- sodium::keygen()\n# # Simplified working directory path\n# wdpath&lt;- paste0(gsub(\"/cons\",\"\",gsub(\"cons\",\"\",paste0(getwd(),\"/cons\"))))\n# saveRDS(key, paste0(wdpath, \"/encryption_key.rds\"))  # Save key securely\n\n# Read the key back\nkeyc1 &lt;- readRDS(paste0(wdpath, \"/encryption_key.rds\")) \n\n# Function to encrypt a character vector\nencrypt_column &lt;- function(x, key) {\n  sapply(x, function(item) {\n    if (is.na(item) || item == \"\") {\n      return(NA_character_)\n    }\n    encrypted_raw &lt;- sodium::data_encrypt(charToRaw(item), keyc1)\n    base64enc::base64encode(encrypted_raw)  # Convert to base64 for storage\n  }, USE.NAMES = FALSE)\n}\n\n# Encrypt (single block)\nSISTRAT23_c1_2010_2024_df_prev1t &lt;- SISTRAT23_c1_2010_2024_df_prev1s|&gt;\n  tidytable::mutate(\n    codigo_identificacion = encrypt_column(codigo_identificacion, keyc1),\n    comuna_residencia = encrypt_column(comuna_residencia, keyc1),\n    municipallity_res_cutpre18 = encrypt_column(municipallity_res_cutpre18, keyc1),\n    nombre_centro = encrypt_column(nombre_centro, keyc1),\n    nombre_centro_rec = encrypt_column(nombre_centro_rec, keyc1)\n  )|&gt;\n# Defining longitudinal variables for gap times\n  tidytable::arrange(hash_key, adm_date_num_rec2)|&gt;\n  tidytable::group_by(hash_key)|&gt;\n  tidytable::mutate(\n    adm_date_next_treat= tidytable::lead(adm_date_num_rec2),\n    disch_date_num_rec6_trans= tidytable::coalesce(disch_date_num_rec6, as.numeric(as.Date(\"2025-05-28\"))),\n    diff_bet_treat= adm_date_next_treat- disch_date_num_rec6_trans,\n    id_centro_next= tidytable::lead(id_centro),\n    plan_type_next= tidytable::lead(plan_type),\n    senda_next= tidytable::lead(senda))|&gt;\n  tidytable::ungroup()|&gt;\n  #tidytable::filter(!is.na(diff_bet_treat))|&gt;\n  tidytable::mutate(\n    less_60d_diff= tidytable::case_when(diff_bet_treat&lt;60~1,TRUE~0),\n    less_45d_diff= tidytable::case_when(diff_bet_treat&lt;45~1,TRUE~0),\n    referral= tidytable::case_when(grepl(\"referral\",tr_compliance_rec6)~1,TRUE~0),\n    changes= tidytable::case_when(id_centro_next!=id_centro~ \"1.1.center change\",TRUE~\"\")\n  )|&gt;\n  tidytable::mutate(\n    changes= tidytable::case_when(plan_type_next!=plan_type~ paste0(changes, \";1.2.plan type change\"),TRUE~ changes),\n    changes= tidytable::case_when(senda_next!=senda~ paste0(changes,\";1.4.senda change\"),TRUE~ changes),\n    changes_none= tidytable::case_when(changes==\"\"~1, TRUE~0),\n    changes_num= tidytable::case_when(id_centro_next!=id_centro~1, TRUE~0)\n  )|&gt;\n  tidytable::mutate(\n    changes_num= tidytable::case_when(plan_type_next!=tipo_de_plan~ changes_num+1, TRUE~ changes_num),\n    changes_num= tidytable::case_when(senda_next!=senda~ changes_num+1, TRUE~ changes_num),\n    changes_num= as.numeric(changes_num)\n  )\n\nrm(keyc1)\n\n\nif(nrow(SISTRAT23_c1_2010_2024_df_prev1t)!=nrow(SISTRAT23_c1_2010_2024_df_prev1s)) stop(\"Error: row count changed after reintegration.\")\nif(SISTRAT23_c1_2010_2024_df_prev1t|&gt; group_by(rn)|&gt; summarise(n=n())|&gt; filter(n&gt;1)|&gt; nrow()&gt;0) stop(\"Error: row count changed after reintegration.\")\n\n\n# Decrypt\n# decrypted_data &lt;- SISTRAT23_c1_2010_2024_df_prev1t|&gt;\n#   tidytable::mutate(\n#     codigo_identificacion = decrypt_column(codigo_identificacion, keyc1),\n#     nombre_centro         = decrypt_column(nombre_centro, keyc1),\n#     nombre_centro_rec     = decrypt_column(nombre_centro_rec, keyc1),\n#     comuna_residencia = decrypt_column(comuna_residencia, keyc1),\n#     municipallity_res_cutpre18 = decrypt_column(municipallity_res_cutpre18, keyc1)\n#   )\n\n\nVariable renaming for Stata-16 compatibility. We shortened and ASCII-normalized several long Spanish variable names to Stata-friendly labels (≤32 chars, no accents). Renaming is applied via a tidytable-compatible helper that (i) only renames columns present in the data, (ii) prevents accidental overwrites by aborting on true name collisions, and (iii) is idempotent—running it multiple times does not change the dataset further.\n\n\nCode\n# 1) map old -&gt; new (Stata-16 friendly)\nrename_map&lt;-c(\n  \"numero_de_hijos_ingreso_tratamiento_residencial\"=\"num_hijos_trat_res\",\n  \"numero_de_tratamientos_anteriores\"=\"num_trat_ant\",\n  \"frecuencia_de_consumo_sustancia_principal\"=\"freq_cons_sus_prin\",\n  \"via_administracion_sustancia_principal\"=\"via_adm_sus_prin_act\",\n  \"diagnostico_trs_consumo_sustancia\"=\"dg_trs_cons_sus_cie10_or\",\n  \"diagnostico_trs_psiquiatrico_dsm_iv\"=\"dg_trs_psiq_dsmiv_or\",\n  \"diagnostico_trs_psiquiatrico_sub_dsm_iv\"=\"dg_trs_psiq_dsmiv_sub_or\",\n  \"x2_diagnostico_trs_psiquiatrico_dsm_iv\"=\"x2_dg_trs_psiq_dsmiv_or\",\n  \"x2_diagnostico_trs_psiquiatrico_sub_dsm_iv\"=\"x2_dg_trs_psiq_dsmiv_sub_or\",\n  \"x3_diagnostico_trs_psiquiatrico_dsm_iv\"=\"x3_dg_trs_psiq_dsmiv_or\",\n  \"x3_diagnostico_trs_psiquiatrico_sub_dsm_iv\"=\"x3_dg_trs_psiq_dsmiv_sub_or\",\n  \"diagnostico_trs_psiquiatrico_cie_10\"=\"dg_trs_psiq_cie10_or\",\n  \"diagnostico_trs_psiquiatrico_sub_cie_10\"=\"dg_trs_psiq_cie10_sub_or\",\n  \"x2_diagnostico_trs_psiquiatrico_cie_10\"=\"x2_dg_trs_psiq_cie10_or\",\n  \"x2_diagnostico_trs_psiquiatrico_sub_cie_10\"=\"x2_dg_trs_psiq_cie10_sub_or\",\n  \"x3_diagnostico_trs_psiquiatrico_cie_10\"=\"x3_dg_trs_psiq_cie10_or\",\n  \"x3_diagnostico_trs_psiquiatrico_sub_cie_10\"=\"x3_dg_trs_psiq_cie10_sub_or\",\n  \"otros_problemas_de_atencion_de_salud_mental\"=\"otros_probl_at_sm_or\",\n  \"diagnostico_global_de_necesidades_de_integracion_social_60\"=\"dg_global_nec_int_soc_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_61\"=\"dg_nec_int_soc_cap_hum_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_62\"=\"dg_nec_int_soc_cap_fis_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_63\"=\"dg_nec_int_soc_cap_soc_or\",\n  \"usuario_de_tribunales_tratamiento_drogas\"=\"usuario_tribunal_trat_droga\",\n  \"evaluacion_del_proceso_terapeutico\"=\"evaluacindelprocesoteraputico\",\n  \"evaluacion_al_egreso_respecto_al_patron_de_consumo\"=\"eva_consumo\",\n  \"evaluacion_al_egreso_respecto_a_situacion_familiar\"=\"eva_fam\",\n  \"evaluacion_al_egreso_respecto_relaciones_interpersonales\"=\"eva_relinterp\",\n  \"evaluacion_al_egreso_respecto_a_situacion_ocupacional\"=\"eva_ocupacion\",\n  \"evaluacion_al_egreso_respecto_salud_mental\"=\"eva_sm\",\n  \"evaluacion_al_egreso_respecto_salud_fisica\"=\"eva_fisica\",\n  \"evaluacion_al_egreso_respecto_trasgresion_a_la_norma_social\"=\"eva_transgnorma\",\n  \"diagnostico_trastorno_psiquiatrico_cie_10_al_egreso\"=\"dg_trs_psiq_cie10_egr_or\",\n  \"diagnostico_global_de_necesidades_de_integracion_social_80\"=\"dg_global_nec_int_soc_egr_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_humano_81\"=\"dg_nec_int_soc_cap_hum_egr_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_fisico_82\"=\"dg_nec_int_soc_cap_fis_egr_or\",\n  \"diagnostico_de_necesidades_de_integrac_io_n_social_en_capital_social_83\"=\"dg_nec_int_soc_cap_soc_egr_or\",\n  \"motivo_de_egreso_alta_administrativa\"=\"motivo_de_egreso_alta_adm\"\n)\n\n# 2) drop-in helper you can use inside a pipe\nsafe_rename_tt&lt;-\\(df,map){\n  olds&lt;-intersect(names(map),names(df))\n  if(length(olds)==0) return(df)\n  news&lt;-unname(map[olds])\n  # guard against overwriting a different existing column\n  collision&lt;-news%in%setdiff(names(df),olds)\n  if(any(collision)){\n    bad&lt;-unique(news[collision])\n    stop(\"Rename collision: target name(s) already exist in data: \",\n         paste(bad,collapse=\", \"))\n  }\n  tidytable::rename(df,!!!setNames(rlang::syms(olds),news))\n}\n\n# 3) usage (no spaces around|&gt; to match your style)\nSISTRAT23_c1_2010_2024_df_prev1t&lt;-\nSISTRAT23_c1_2010_2024_df_prev1t|&gt;\nsafe_rename_tt(rename_map)\n\n\nTo close the project, we erase polars objects.\n\n\nCode\nrm(list = ls()[grepl(\"_pl$\", ls())])"
  },
  {
    "objectID": "Duplicates_25_3.html#information-about-municipality-of-residence",
    "href": "Duplicates_25_3.html#information-about-municipality-of-residence",
    "title": "SENDAs Agreement 1 Update 2010-2022 (step 3)",
    "section": "Information about municipality of residence",
    "text": "Information about municipality of residence\nFirst, we corrected CUT for Algarrobo (5602) which was bad written (6502).\nWe standardized and integrated commune-level poverty data for Chile across the period 2007-2024, combining rural classification information with annual poverty estimates. We addressed two critical data harmonization challenges: commune code standardization and temporal data integration.\nThe processing pipeline begins by reading rural classification data from the PNDR (National Rural Development Policy) classification file, which contained commune-level rural/urban designations. Simultaneously, we processed separate Excel files containing annual poverty estimates, each requiring specific handling due to variations in file structure and naming conventions across different years.\nA key transformation involved standardizing commune codes using a mapping table that converts legacy codes (e.g., 16101, 16102) to standardized formats (8401, 8402). This standardization ensured consistent matching between rural classification data and poverty estimates.\nAfter processing individual annual datasets, the code aggregated all years into a unified longitudinal dataset (pobr_mult_2010_2020) containing standardized commune codes, poverty percentages, and temporal identifiers. This created a comprehensive foundation for analyzing poverty trends across Chilean communes while maintaining data consistency and enabling rural-urban comparisons over the 14-year period.\nThe final output provides researchers with a clean, standardized dataset suitable for longitudinal analysis of poverty patterns, with particular value for examining relationships between rural classification and poverty dynamics across Chilean municipalities.\n\n\nCode\n# ===============================\n# Commune poverty (income) by admission year + IPM 2022 (multidimensional)\n# Relative paths via `wdpath`, no library(), package::-qualified, pipes |&gt;, no spaces.\n# ===============================\n\n# --- helpers ---\nstandardize_comuna_code &lt;- function(x){\n  x &lt;- as.character(x)\n  map &lt;- c(\n    \"16101\"=\"8401\",\"16102\"=\"8402\",\"16103\"=\"8406\",\"16104\"=\"8407\",\"16105\"=\"8410\",\n    \"16106\"=\"8411\",\"16107\"=\"8413\",\"16108\"=\"8418\",\"16109\"=\"8421\",\"16201\"=\"8414\",\n    \"16202\"=\"8403\",\"16203\"=\"8404\",\"16204\"=\"8408\",\"16205\"=\"8412\",\"16206\"=\"8415\",\n    \"16207\"=\"8420\",\"16301\"=\"8416\",\"16302\"=\"8405\",\"16303\"=\"8409\",\"16304\"=\"8417\",\n    \"16305\"=\"8419\"\n  )\n  y &lt;- unname(map[x]); x[!is.na(y)] &lt;- y[!is.na(y)]; x\n}\nnearest_year_fill &lt;- function(p_all){\n  yrs &lt;- 2007:2024\n  cods &lt;- unique(p_all$cod)\n  grid &lt;- data.frame(cod=rep(cods,each=length(yrs)), anio=rep(yrs,times=length(cods)), stringsAsFactors=FALSE)\n\n  df &lt;- tidytable::left_join(grid, p_all, by=c(\"cod\",\"anio\"))\n\n  obs  &lt;- df|&gt;tidytable::filter(!is.na(porc_pobr))\n  miss &lt;- df|&gt;tidytable::filter(is.na(porc_pobr))\n  if(nrow(miss)==0) return(obs|&gt;tidytable::arrange(cod,anio)|&gt;tidytable::distinct(cod,anio,.keep_all=TRUE))\n\n  cand &lt;- tidytable::inner_join(\n            miss|&gt;tidytable::rename(anio_miss=anio),\n            obs |&gt;tidytable::rename(anio_obs=anio, porc_obs=porc_pobr),\n            by=\"cod\"\n          ) |&gt;\n          tidytable::mutate(dist=abs(anio_obs-anio_miss)) |&gt;\n          tidytable::arrange(cod, anio_miss, dist, tidytable::desc(anio_obs)) |&gt;\n          tidytable::distinct(cod, anio_miss, .keep_all=TRUE) |&gt;\n          tidytable::transmute(cod, anio=anio_miss, porc_pobr=porc_obs)\n\n  tidytable::bind_rows(\n    obs|&gt;tidytable::rename(porc_pobr=porc_pobr, anio=anio),\n    cand\n  ) |&gt;\n  tidytable::arrange(cod,anio) |&gt;\n  tidytable::distinct(cod,anio,.keep_all=TRUE)\n}\nread_poverty_year &lt;- function(anio,fname,skip_rows,inp_path){\n  x &lt;- readxl::read_excel(file.path(inp_path,fname), skip=skip_rows)|&gt;\n    tidytable::mutate(anio=anio)\n  nm &lt;- names(x)\n  nm &lt;- gsub(\"Código\",\"Codigo\",nm,fixed=TRUE)\n  nm &lt;- gsub(\"Nombre comuna\",\"NombreComuna\",nm,fixed=TRUE)\n  names(x) &lt;- nm\n  measure &lt;- ifelse(\n    grepl(\"multidimensional|índice|indice\",tolower(paste(names(x),collapse=\" \")))||\n    grepl(\"multidimensional|índice|indice\",tolower(fname)),\n    \"multidimensional\",\"income\")\n  x|&gt;\n    tidytable::rename_with(~\"porc_pobr\",tidyselect::matches(\"(?i)porcentaje.*pobreza\"))|&gt;\n    tidytable::rename(\n      ci_lo       = tidyselect::matches(\"(?i)l[ií]mite.*inferior\"),\n      ci_hi       = tidyselect::matches(\"(?i)l[ií]mite.*superior\"),\n      in_casen    = tidyselect::matches(\"(?i)presencia.*casen\"),\n      sae_tipo    = tidyselect::matches(\"(?i)tipo.*estimaci[oó]n\"),\n      n_pobres    = tidyselect::matches(\"(?i)n[uú]mero.*pobreza\"),\n      n_poblacion = tidyselect::matches(\"(?i)proyecciones.*poblaci[oó]n\")\n    )|&gt;\n    (\\(df){\n      if(!\"Codigo\"%in%names(df)) df &lt;- tidytable::rename(df,Codigo=tidyselect::all_of(names(df)[2]))\n      if(!\"NombreComuna\"%in%names(df)) df &lt;- tidytable::rename(df,NombreComuna=tidyselect::all_of(names(df)[3]))\n      # create missing optional cols\n      opt_num &lt;- c(\"ci_lo\",\"ci_hi\",\"n_poblacion\",\"n_pobres\")\n      opt_chr &lt;- c(\"in_casen\",\"sae_tipo\")\n      for(nm in opt_num) if(!nm%in%names(df)) df[[nm]] &lt;- NA_real_\n      for(nm in opt_chr) if(!nm%in%names(df)) df[[nm]] &lt;- NA_character_\n      df\n    })()|&gt;\n    tidytable::mutate(\n      porc_pobr=as.numeric(gsub(\",\",\".\",gsub(\"%\",\"\",as.character(porc_pobr),fixed=TRUE),fixed=TRUE)),\n      ci_lo=as.numeric(gsub(\",\",\".\",gsub(\"%\",\"\",as.character(ci_lo),fixed=TRUE),fixed=TRUE)),\n      ci_hi=as.numeric(gsub(\",\",\".\",gsub(\"%\",\"\",as.character(ci_hi),fixed=TRUE),fixed=TRUE)),\n      n_poblacion=as.numeric(gsub(\"\\\\.\",\"\",as.character(n_poblacion))),\n      n_pobres=as.numeric(gsub(\"\\\\.\",\"\",as.character(n_pobres))),\n      Codigo=as.character(Codigo),\n      cod=standardize_comuna_code(gsub(\"^0+\",\"\",Codigo,perl=TRUE)),\n      measure=measure\n    )|&gt;\n    tidytable::select(anio,cod,measure,porc_pobr,ci_lo,ci_hi,in_casen,sae_tipo,n_poblacion,n_pobres)\n}\n# --- paths ---\ninp_path &lt;- file.path(wdpath,\"cons/_input\")\n# --- rurality (optional, for later join if you want) ---\nComunas_PNDR &lt;- readxl::read_excel(file.path(inp_path,\"Clasificacion-comunas-PNDR.xlsx\"))|&gt;\n  tidytable::mutate(cod=standardize_comuna_code(as.character(cod_com)))\n# --- table-driven file list (income 2010–2020 + IPM 2022) ---\nfiles_tbl &lt;- tidytable::tribble(\n  ~anio, ~fname, ~skip_rows,\n  2022,\"Estimaciones_Indice_Pobreza_Multidimensional_Comunas_2022.xlsx\",1,\n  2020,\"Estimaciones_de_Tasa_de_Pobreza_por_Ingresos_por_Comunas_2020_revisada2022_09.xlsx\",1,\n  2019,\"Estimaciones_de_Tasa_de_Pobreza_por_Ingresos_por_Comunas_2020_revisada2022_09.xlsx\",1,\n  2018,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_multidimensional_2017.xlsx\",1,\n  2017,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_multidimensional_2017.xlsx\",1,\n  2016,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_multidimensional_2015.xlsx\",1,\n  2015,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_multidimensional_2015.xlsx\",1,\n  2014,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_2013.xlsx\",1,\n  2013,\"PLANILLA_Estimaciones_comunales_tasa_pobreza_por_ingresos_2013.xlsx\",1,\n  2012,\"Estimacion_tasa_de_pobreza_comunal_2011_(nueva _metodologia).xlsx\",1,\n  2011,\"Estimacion_tasa_de_pobreza_comunal_2011_(nueva _metodologia).xlsx\",1,\n  2010,\"Estimacion_tasa_de_pobreza_comunal_2011_(nueva _metodologia).xlsx\",1\n)\n# --- read all files once ---\npoverty_all &lt;- purrr::pmap_dfr(\n    list(files_tbl$anio,files_tbl$fname,files_tbl$skip_rows),\n    ~read_poverty_year(..1,..2,..3,inp_path)\n)\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_lo), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_hi), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_lo), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_hi), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_lo), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_hi), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_lo), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_hi), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_lo), : NAs introducidos por coerción\n\n\nWarning in vctrs::vec_recycle(as.numeric(gsub(“,”, “.”, gsub(“%”, ““, as.character(ci_hi), : NAs introducidos por coerción\n\n\nCode\n# --- income poverty (for interpolation by admission year) ---\npobr_mult_2010_2022_income &lt;- poverty_all|&gt;\n    tidytable::filter(measure==\"income\")|&gt;\n    tidytable::group_by(cod,anio)|&gt;\n    tidytable::summarise(\n        porc_pobr={tmp&lt;-porc_pobr[!is.na(porc_pobr)]; if(length(tmp)) tmp[1] else NA_real_},\n        .groups=\"drop\"\n    )\n# fill missing years by nearest available within each cod (tie→later year)\npobr_filled &lt;- nearest_year_fill(pobr_mult_2010_2022_income)\n# --- IPM 2022 (multidimensional) by commune, static attributes ---\nipm_2022 &lt;- poverty_all|&gt;\n    tidytable::filter(measure==\"multidimensional\", anio==2022)|&gt;\n    tidytable::select(cod,porc_pobr,ci_lo,ci_hi,in_casen,sae_tipo,n_poblacion,n_pobres)|&gt;\n    tidytable::rename(\n        ipm_md_2022_pct=porc_pobr,\n        ipm_md_2022_ci_lo=ci_lo,\n        ipm_md_2022_ci_hi=ci_hi,\n        ipm_md_2022_in_casen=in_casen,\n        ipm_md_2022_sae_type=sae_tipo,\n        ipm_md_2022_pop=n_poblacion,\n        ipm_md_2022_poorn=n_pobres\n    )|&gt;\n    tidytable::distinct(cod,.keep_all=TRUE)\n# --- attach to episode lines (SISTRAT23_c1_2010_2024_df_prev1s) ---\nSISTRAT23_c1_2010_2024_df_prev1s &lt;- \n  tidytable::mutate(SISTRAT23_c1_2010_2024_df_prev1s, municipallity_res_cutpre18= gsub(\"algarrobo \\\\(6502\\\\)\",\"algarrobo (5602)\", municipallity_res_cutpre18), municipallity_res_cutpre18=gsub(\"rio ibanez\",\"rio ibanez (11402)\",municipallity_res_cutpre18))|&gt;\n  tidytable::mutate(\n    adm_year= as.integer(format(adm_date_rec2,\"%Y\")),\n    cod_raw= stringr::str_extract(municipallity_res_cutpre18,\"(?&lt;=\\\\()\\\\d+\"),\n    cod_raw= ifelse(is.na(cod_raw), stringr::str_extract(municipallity_res_cutpre18,\"\\\\d+\"), cod_raw),\n    cod= standardize_comuna_code(gsub(\"^0+\",\"\",cod_raw,perl=TRUE))\n  )|&gt;\n  (\\(df){\n    message(paste0(\"Before join of with municipality, cases: \", nrow(df)))\n    message(paste0(\"Before join of with municipality, patients: \", nrow(tidytable::distinct(df, hash_key))))\n    df\n  })()|&gt;\n  # income poverty matched to admission year (nearest-year filled)\n  tidytable::left_join(pobr_filled, by=c(\"cod\"=\"cod\",\"adm_year\"=\"anio\"))|&gt;\n  # IPM 2022 static commune attributes\n  tidytable::left_join(ipm_2022, by=\"cod\")|&gt;\n  # optional: rurality classification (keeps all columns from PNDR sheet)\n  tidytable::left_join(Comunas_PNDR|&gt;tidytable::select(cod, tidytable::everything()), by=\"cod\")|&gt;\n  (\\(df){\n    message(paste0(\"After join of with municipality, cases: \", nrow(df)))\n    message(paste0(\"After join of with municipality, patients: \", nrow(tidytable::distinct(df, hash_key))))\n    df\n  })()|&gt; \n  tidytable::select(-any_of(c(\"cod_raw\", \"cod\", \"ipm_md_2022_ci_lo\", \"ipm_md_2022_ci_hi\", \"ipm_md_2022_in_casen\", \"ipm_md_2022_pop\", \"ipm_md_2022_poorn\", \"Cod_reg\", \"Región\", \"cod_com\", \"Comuna\", \"N° Habitantes\", \"Densidad\")))|&gt;\ntidytable::mutate(porc_pobr= ifelse(adm_year&gt;2021, ipm_md_2022_pct, porc_pobr))|&gt;\n  tidytable::select(-any_of(c(\"ipm_md_2022_pct\",\"ipm_md_2022_sae_type\")))\n\n\nBefore join of with municipality, cases: 173728\n\n\nBefore join of with municipality, patients: 121299\n\n\nAfter join of with municipality, cases: 173728\n\n\nAfter join of with municipality, patients: 121299\n\n\nCode\n# SISTRAT23_c1_2010_2024_df_prev1s|&gt;\n#     tidytable::select(-any_of(c(\"cod_raw\", \"cod\", \"ipm_md_2022_ci_lo\", \"ipm_md_2022_ci_hi\", \"ipm_md_2022_in_casen\", \"ipm_md_2022_pop\", \"ipm_md_2022_poorn\", \"Cod_reg\", \"Región\", \"cod_com\", \"Comuna\", \"N° Habitantes\", \"Densidad\"))) |&gt; filter(is.na(poverty_income_pct)) |&gt; select(municipallity_res_cutpre18, adm_year,  porc_pobr, ipm_md_2022_pct)\n# \n# SISTRAT23_c1_2010_2024_df_prev1s|&gt; select(municipallity_res_cutpre18, adm_year,  porc_pobr, ipm_md_2022_pct )|&gt; filter(is.na(porc_pobr), adm_year&gt;2009)|&gt; nrow()\n#11402"
  }
]